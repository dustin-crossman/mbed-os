@startuml

abstract class NFCNDEFCapable {
  +{abstract} bool is_ndef_supported() const
  +void set_ndef_message_parser(ndef::MessageParser* parser) const
  +void set_ndef_message_builder(ndef::MessageBuilder* builder) const

  #ndef::MessageParser* ndef_message_parser()
  #ndef::MessageBuilder* ndef_message_builder()
}

abstract class NFCRemoteEndpoint {
  +void is_lost()
  +nfc_rf_protocols_bitmask_t rf_protocols() const
}

abstract class NFCRemoteEndpoint::Delegate {
  +{abstract} void on_lost()
}

abstract class NFCTarget {
  +void set_delegate(NFCTarget::Delegate* delegate)
  +void write_ndef_message()
  +void erase_ndef_message()
  +void read_ndef_message()
}

abstract class NFCTarget::Delegate {
  +{abstract} void on_ndef_message_written(nfc_err_t result)
  +{abstract} void on_ndef_message_erased(nfc_err_t result)
  +{abstract} void on_ndef_message_read(nfc_err_t result)
}

class NFCEEPROM {
  +void set_delegate(NFCEEPROM::Delegate* delegate)
}

abstract class NFCEEPROM::Delegate {

}

abstract class NFCEEPROMDriver {
  +void set_delegate(Delegate* delegate)

  +{abstract} void reset()
  +{abstract} size_t get_max_size()
  +{abstract} void start_session()
  +{abstract} void end_session()
  +{abstract} void read_bytes(uint32_t address, size_t count)
  +{abstract} void write_bytes(uint32_t address, const uint8_t* bytes, size_t count)
  +{abstract} void set_size(size_t count)
  +{abstract} void get_size()
  +{abstract} void erase_bytes(uint32_t address, size_t size)
}

abstract class NFCEEPROMDriver::Delegate {
  +{abstract} void has_started_session(bool success)
  +{abstract} void has_read_bytes(bool success, const uint8_t* bytes)
  +{abstract} void has_written_bytes(bool success)
  +{abstract} void has_set_size(bool success)
  +{abstract} void has_gotten_size(bool success, size_t size)
  +{abstract} void has_erased_bytes(bool success)
}


NFCNDEFCapable <-- NFCTarget
NFCTarget <-- NFCEEPROM
NFCTarget::Delegate <-- NFCEEPROM::Delegate
NFCEEPROM o-- NFCEEPROM::Delegate
NFCEEPROM o-- NFCEEPROMDriver
NFCEEPROMDriver::Delegate <-- NFCEEPROM

class NFCRemoteInitiator {
  +void  set_delegate(NFCRemoteInitiator::Delegate* delegate)
  
  +bool is_iso7816_supported()
  +void add_iso7816_application(ISO7816App* app);
  
  +size_t nfc_tag_type()
  +bool is_ndef_supported()
  
  +nfc_err_t set_ndef_message(const NDEFMessage& message)
  +nfc_err_t clear_ndef_message()
  +nfc_err_t get_ndef_message(NDEFMessage* message)
}

abstract class NFCRemoteInitiator::Delegate {
  +void on_selected()
  +void on_deselected()
  +void on_before_ndef_message_read()
  +void on_after_ndef_message_write()
}

NFCNDEFCapable <-- NFCRemoteInitiator
 NFCRemoteEndpoint <-- NFCRemoteInitiator
 NFCRemoteEndpoint::Delegate <-- NFCRemoteInitiator::Delegate
NFCRemoteInitiator o-- NFCRemoteInitiator::Delegate

class NFCRemoteTarget {
  +void  set_delegate(NFCRemoteTarget::Delegate* delegate)

}

abstract class NFCRemoteTarget::Delegate {

}

 NFCRemoteEndpoint <-- NFCRemoteTarget
NFCTarget <-- NFCRemoteTarget
 NFCRemoteEndpoint::Delegate <-- NFCRemoteTarget::Delegate
NFCTarget::Delegate <-- NFCRemoteTarget::Delegate
NFCRemoteTarget o-- NFCRemoteTarget::Delegate

@enduml