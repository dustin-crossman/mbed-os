        -:    0:Source:../../../framework/mux/mbed_mux.h
        -:    0:Graph:objs/mbed_mux_data_service_unit/mbed_mux_data_service.gcno
        -:    0:Data:objs/mbed_mux_data_service_unit/mbed_mux_data_service.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Copyright (c) 2006-2017, Arm Limited and affiliates.
        -:    3: * SPDX-License-Identifier: Apache-2.0
        -:    4: *
        -:    5: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    6: * you may not use this file except in compliance with the License.
        -:    7: * You may obtain a copy of the License at
        -:    8: *
        -:    9: *     http://www.apache.org/licenses/LICENSE-2.0
        -:   10: *
        -:   11: * Unless required by applicable law or agreed to in writing, software
        -:   12: * distributed under the License is distributed on an "AS IS" BASIS,
        -:   13: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   14: * See the License for the specific language governing permissions and
        -:   15: * limitations under the License.
        -:   16: */
        -:   17:
        -:   18:#ifndef MUX_H
        -:   19:#define MUX_H
        -:   20:
        -:   21:#include <stdbool.h>
        -:   22:#include "FileHandle.h"
        -:   23:#include "PlatformMutex.h"
        -:   24:#include "Semaphore.h"
        -:   25:#include "EventQueue.h"
        -:   26:
        -:   27:#define MUX_DLCI_INVALID_ID       0    /* Invalid DLCI ID. Used to invalidate MuxDataService object. */
        -:   28:#define MUX_CRC_TABLE_LEN         256u /* CRC table length in number of bytes. */
        -:   29:
        -:   30:#ifndef MBED_CONF_MUX_DLCI_COUNT
        -:   31:#define MBED_CONF_MUX_DLCI_COUNT  3u   /* Number of supported DLCI IDs. */
        -:   32:#endif
        -:   33:#ifndef MBED_CONF_MUX_BUFFER_SIZE
        -:   34:#define MBED_CONF_MUX_BUFFER_SIZE 31u  /* Size of TX/Rx buffers in number of bytes. */
        -:   35:#endif
        -:   36:
        -:   37:/* More RAM needs to allocated if more than 4 DLCI ID to be supported see @ref tx_callback_context for details. */
        -:   38:MBED_STATIC_ASSERT(MBED_CONF_MUX_DLCI_COUNT <= 4u, "");
        -:   39:
        -:   40:
        -:   41:/* @todo:
        -:   42:I assume that we need to export some kind of #defines for EVENT_SIZE and MAX_EVENT_COUNT (max number of events that can
        -:   43:be queued at the same time by the module inside EventQueue, so that the application designer can calculate the RAM
        -:   44:storage requirements correctly at compile time.
        -:   45:*/
        -:   46:
        -:   47:namespace mbed {
        -:   48:
    #####:   49:class MuxDataService : public FileHandle
        -:   50:{
        -:   51:    friend class Mux;
        -:   52:public:
        -:   53:
        -:   54:    /** Enqueue user data for transmission.
        -:   55:     *
        -:   56:     *  @note: This is API is only meant to be used for the multiplexer (user) data service tx. Supplied buffer can be
        -:   57:     *         reused/freed upon call return.
        -:   58:     *
        -:   59:     *  @param buffer Begin of the user data.
        -:   60:     *  @param size   The number of bytes to write.
        -:   61:     *  @return       The number of bytes written.
        -:   62:     */
        -:   63:    virtual ssize_t write(const void* buffer, size_t size);
        -:   64:
        -:   65:    /** Read user data into a buffer.
        -:   66:     *
        -:   67:     *  @note: This is API is only meant to be used for the multiplexer (user) data service rx.
        -:   68:     *
        -:   69:     *  @param buffer The buffer to read in to.
        -:   70:     *  @param size   The number of bytes to read.
        -:   71:     *  @return       The number of bytes read, -EAGAIN if no data available for read.
        -:   72:     */
        -:   73:    virtual ssize_t read(void *buffer, size_t size);
        -:   74:
        -:   75:    /** Not supported by the implementation. */
        -:   76:    virtual off_t seek(off_t offset, int whence = SEEK_SET);
        -:   77:
        -:   78:    /** Not supported by the implementation. */
        -:   79:    virtual int close();
        -:   80:
        -:   81:    /** Register a callback on completion of enqueued write and read operations.
        -:   82:     *
        -:   83:     *  @note: The registered callback is called within thread context supplied in eventqueue_attach.
        -:   84:     *
        -:   85:     *  @param func Function to call upon event generation.
        -:   86:     */
        -:   87:    virtual void sigio(Callback<void()> func);
        -:   88:
        -:   89:    /** Constructor. */
        -:   90:    MuxDataService() : _dlci(MUX_DLCI_INVALID_ID) {};
        -:   91:
        -:   92:private:
        -:   93:
        -:   94:    /* Deny copy constructor. */
        -:   95:    MuxDataService(const MuxDataService& obj);
        -:   96:
        -:   97:    /* Deny assignment operator. */
        -:   98:    MuxDataService& operator=(const MuxDataService& obj);
        -:   99:
        -:  100:    uint8_t          _dlci;     /* DLCI number. Valid range 1 - 63. */
        -:  101:    Callback<void()> _sigio_cb; /* Registered signal callback. */
        -:  102:};
        -:  103:
        -:  104:
        -:  105:class Mux
        -:  106:{
        -:  107:    friend class MuxDataService;
        -:  108:public:
        -:  109:
        -:  110:    /* Definition for multiplexer establishment status type. */
        -:  111:    enum MuxEstablishStatus {
        -:  112:        MUX_ESTABLISH_SUCCESS = 0, /* Peer accepted the request. */
        -:  113:        MUX_ESTABLISH_REJECT,      /* Peer rejected the request. */
        -:  114:        MUX_ESTABLISH_TIMEOUT,     /* Timeout occurred for the request. */
        -:  115:        MUX_ESTABLISH_MAX          /* Enumeration upper bound. */
        -:  116:    };
        -:  117:
        -:  118:    /* @ref MuxEstablishStatus type assigned to _shared_memory variable, which has sizeof(uint8_t) storage class. Enforce
        -:  119:       expected behaviour compile time. */
        -:  120:    MBED_STATIC_ASSERT(sizeof(MuxEstablishStatus) == sizeof(uint), "");
        -:  121:
        -:  122:    /* Definition for multiplexer establishment return code type. */
        -:  123:    enum MuxReturnStatus {
        -:  124:        MUX_STATUS_SUCCESS = 0,
        -:  125:        MUX_STATUS_INPROGRESS,
        -:  126:        MUX_STATUS_INVALID_RANGE,
        -:  127:        MUX_STATUS_MUX_NOT_OPEN,
        -:  128:        MUX_STATUS_NO_RESOURCE,
        -:  129:        MUX_STATUS_MAX
        -:  130:    };
        -:  131:
        -:  132:    /** Module init. */
        -:  133:    static void module_init();
        -:  134:
        -:  135:    /** Establish the multiplexer control channel.
        -:  136:     *
        -:  137:     *  @note: Relevant request specific parameters are fixed at compile time within multiplexer component.
        -:  138:     *  @note: Call returns when response from the peer is received, timeout or write error occurs.
        -:  139:     *
        -:  140:     *  @param status Operation completion code.
        -:  141:     *
        -:  142:     *  @return MUX_STATUS_SUCCESS     Operation completed, check status for completion code.
        -:  143:     *  @return MUX_STATUS_INPROGRESS  Operation not started, control channel open already in progress.
        -:  144:     *  @return MUX_STATUS_NO_RESOURCE Operation not started, multiplexer control channel already open.
        -:  145:     */
        -:  146:    static MuxReturnStatus mux_start(MuxEstablishStatus &status);
        -:  147:
        -:  148:    /** Establish a DLCI.
        -:  149:     *
        -:  150:     *  @note: Relevant request specific parameters are fixed at compile time within multiplexer component.
        -:  151:     *  @note: Call returns when response from the peer is received or timeout occurs.
        -:  152:     *
        -:  153:     *  @warning: Not allowed to be called from callback context.
        -:  154:     *
        -:  155:     *  @param dlci_id ID of the DLCI to establish. Valid range 1 - 63.
        -:  156:     *  @param status  Operation completion code.
        -:  157:     *  @param obj     Valid object upon status having MUX_ESTABLISH_SUCCESS, NULL upon failure.
        -:  158:     *
        -:  159:     *  @return MUX_STATUS_SUCCESS       Operation completed, check  status for completion code.
        -:  160:     *  @return MUX_STATUS_INPROGRESS    Operation not started, DLCI establishment already in progress.
        -:  161:     *  @return MUX_STATUS_INVALID_RANGE Operation not started, DLCI ID not in valid range.
        -:  162:     *  @return MUX_STATUS_MUX_NOT_OPEN  Operation not started, no established multiplexer control channel exists.
        -:  163:     *  @return MUX_STATUS_NO_RESOURCE   Operation not started, dlci_id, or all available DLCI ID resources,
        -:  164:     *                                   already in use.
        -:  165:     */
        -:  166:    static MuxReturnStatus dlci_establish(uint8_t dlci_id, MuxEstablishStatus &status, FileHandle **obj);
        -:  167:
        -:  168:    /** Attach serial interface to the object.
        -:  169:     *
        -:  170:     *  @param serial Serial interface to be used.
        -:  171:     */
        -:  172:    static void serial_attach(FileHandle *serial);
        -:  173:
        -:  174:    /** Attach EventQueue interface to the object.
        -:  175:     *
        -:  176:     *  @param event_queue Event queue interface to be used.
        -:  177:     */
        -:  178:    static void eventqueue_attach(events::EventQueue *event_queue);
        -:  179:
        -:  180:private:
        -:  181:
        -:  182:    /* Definition for Rx event type. */
        -:  183:    enum RxEvent {
        -:  184:        RX_READ = 0,
        -:  185:        RX_RESUME,
        -:  186:        RX_EVENT_MAX
        -:  187:    };
        -:  188:
        -:  189:    /* Definition for Tx state machine. */
        -:  190:    enum TxState {
        -:  191:        TX_IDLE = 0,
        -:  192:        TX_RETRANSMIT_ENQUEUE,
        -:  193:        TX_RETRANSMIT_DONE,
        -:  194:        TX_INTERNAL_RESP,
        -:  195:        TX_NORETRANSMIT,
        -:  196:        TX_STATE_MAX
        -:  197:    };
        -:  198:
        -:  199:    /* Definition for Rx state machine. */
        -:  200:    enum RxState {
        -:  201:        RX_FRAME_START = 0,
        -:  202:        RX_HEADER_READ,
        -:  203:        RX_TRAILER_READ,
        -:  204:        RX_SUSPEND,
        -:  205:        RX_STATE_MAX
        -:  206:    };
        -:  207:
        -:  208:    /* Definition for frame type within rx path. */
        -:  209:    enum FrameRxType {
        -:  210:        FRAME_RX_TYPE_SABM = 0,
        -:  211:        FRAME_RX_TYPE_UA,
        -:  212:        FRAME_RX_TYPE_DM,
        -:  213:        FRAME_RX_TYPE_DISC,
        -:  214:        FRAME_RX_TYPE_UIH,
        -:  215:        FRAME_RX_TYPE_NOT_SUPPORTED,
        -:  216:        FRAME_RX_TYPE_MAX
        -:  217:    };
        -:  218:
        -:  219:    /* Definition for frame type within tx path. */
        -:  220:    enum FrameTxType {
        -:  221:        FRAME_TX_TYPE_SABM = 0,
        -:  222:        FRAME_TX_TYPE_DM,
        -:  223:        FRAME_TX_TYPE_UIH,
        -:  224:        FRAME_TX_TYPE_MAX
        -:  225:    };
        -:  226:
        -:  227:    /** Registered time-out expiration event. */
        -:  228:    static void on_timeout();
        -:  229:
        -:  230:    /** Registered deferred call event in safe (thread context) supplied in eventqueue_attach. */
        -:  231:    static void on_deferred_call();
        -:  232:
        -:  233:    /** Registered sigio callback from FileHandle. */
        -:  234:    static void on_sigio();
        -:  235:
        -:  236:    /** Calculate fcs.
        -:  237:     *
        -:  238:     *  @param buffer    Input buffer.
        -:  239:     *  @param input_len Input length in number of bytes.
        -:  240:     *
        -:  241:     *  @return Calculated fcs.
        -:  242:     */
        -:  243:    static uint8_t fcs_calculate(const uint8_t *buffer,  uint8_t input_len);
        -:  244:
        -:  245:    /** Construct sabm request message.
        -:  246:     *
        -:  247:     *  @param dlci_id ID of the DLCI to establish
        -:  248:     */
        -:  249:    static void sabm_request_construct(uint8_t dlci_id);
        -:  250:
        -:  251:    /** Construct dm response message.
        -:  252:     */
        -:  253:    static void dm_response_construct();
        -:  254:
        -:  255:    /** Construct user information frame.
        -:  256:     *
        -:  257:     *  @param dlci_id ID of the DLCI to establish
        -:  258:     *  @param buffer
        -:  259:     *  @param size
        -:  260:     */
        -:  261:    static void user_information_construct(uint8_t dlci_id, const void *buffer, size_t size);
        -:  262:
        -:  263:    /** Do write operation if pending data available.
        -:  264:     */
        -:  265:    static void write_do();
        -:  266:
        -:  267:    /** Generate Rx event.
        -:  268:     *
        -:  269:     *  @param event Rx event
        -:  270:     */
        -:  271:    static void rx_event_do(RxEvent event);
        -:  272:
        -:  273:    /** Rx event frame start read state.
        -:  274:     *
        -:  275:     *  @return Number of bytes read, -EAGAIN if no data available.
        -:  276:     */
        -:  277:    static ssize_t on_rx_read_state_frame_start();
        -:  278:
        -:  279:    /** Rx event header read state.
        -:  280:     *
        -:  281:     *  @return Number of bytes read, -EAGAIN if no data available.
        -:  282:     */
        -:  283:    static ssize_t on_rx_read_state_header_read();
        -:  284:
        -:  285:    /** Rx event trailer read state.
        -:  286:     *
        -:  287:     *  @return Number of bytes read, -EAGAIN if no data available.
        -:  288:     */
        -:  289:    static ssize_t on_rx_read_state_trailer_read();
        -:  290:
        -:  291:    /** Rx event suspend read state.
        -:  292:     *
        -:  293:     *  @return Number of bytes read, -EAGAIN if no data available.
        -:  294:     */
        -:  295:    static ssize_t on_rx_read_state_suspend();
        -:  296:
        -:  297:    /** Process received SABM frame. */
        -:  298:    static void on_rx_frame_sabm();
        -:  299:
        -:  300:    /** Process received UA frame. */
        -:  301:    static void on_rx_frame_ua();
        -:  302:
        -:  303:    /** Process received DM frame. */
        -:  304:    static void on_rx_frame_dm();
        -:  305:
        -:  306:    /** Process received DISC frame. */
        -:  307:    static void on_rx_frame_disc();
        -:  308:
        -:  309:    /** Process received UIH frame. */
        -:  310:    static void on_rx_frame_uih();
        -:  311:
        -:  312:    /** Process received frame, which is not supported. */
        -:  313:    static void on_rx_frame_not_supported();
        -:  314:
        -:  315:    /** Process valid received frame. */
        -:  316:    static void valid_rx_frame_decode();
        -:  317:
        -:  318:    /** SABM frame tx path post processing. */
        -:  319:    static void on_post_tx_frame_sabm();
        -:  320:
        -:  321:    /** DM frame tx path post processing. */
        -:  322:    static void on_post_tx_frame_dm();
        -:  323:
        -:  324:    /** UIH frame tx path post processing. */
        -:  325:    static void on_post_tx_frame_uih();
        -:  326:
        -:  327:    /** Resolve rx frame type.
        -:  328:     *
        -:  329:     *  @return Frame type.
        -:  330:     */
        -:  331:    static Mux::FrameRxType frame_rx_type_resolve();
        -:  332:
        -:  333:    /** Resolve tx frame type.
        -:  334:     *
        -:  335:     *  @return Frame type.
        -:  336:     */
        -:  337:    static Mux::FrameTxType frame_tx_type_resolve();
        -:  338:
        -:  339:    /** Begin the frame retransmit sequence. */
        -:  340:    static void frame_retransmit_begin();
        -:  341:
        -:  342:    /** TX state entry functions. */
        -:  343:    static void tx_retransmit_enqueu_entry_run();
        -:  344:    static void tx_retransmit_done_entry_run();
        -:  345:    static void tx_idle_entry_run();
        -:  346:    static void tx_internal_resp_entry_run();
        -:  347:    static void tx_noretransmit_entry_run();
        -:  348:    typedef void (*tx_state_entry_func_t)();
        -:  349:
        -:  350:    /** TX state exit function. */
        -:  351:    static void tx_idle_exit_run();
        -:  352:    typedef void (*tx_state_exit_func_t)();
        -:  353:
        -:  354:    /** Change Tx state machine state.
        -:  355:     *
        -:  356:     *  @param new_state  State to transit.
        -:  357:     *  @param entry_func State entry function.
        -:  358:     *  @param exit_func  State exit function.
        -:  359:     */
        -:  360:    static void tx_state_change(TxState new_state, tx_state_entry_func_t entry_func, tx_state_exit_func_t exit_func);
        -:  361:
        -:  362:    /** RX state entry functions. */
        -:  363:    static void rx_header_read_entry_run();
        -:  364:    typedef void (*rx_state_entry_func_t)();
        -:  365:
        -:  366:    /** Null action function. */
        -:  367:    static void null_action();
        -:  368:
        -:  369:    /** Change Rx state machine state.
        -:  370:     *
        -:  371:     *  @param new_state  State to transit.
        -:  372:     *  @param entry_func State entry function.
        -:  373:     */
        -:  374:    static void rx_state_change(RxState new_state, rx_state_entry_func_t entry_func);
        -:  375:
        -:  376:    /** Begin DM frame transmit sequence. */
        -:  377:    static void dm_response_send();
        -:  378:
        -:  379:    /** Append DLCI ID to storage.
        -:  380:     *
        -:  381:     *  @param dlci_id ID of the DLCI to append.
        -:  382:     */
        -:  383:    static void dlci_id_append(uint8_t dlci_id);
        -:  384:
        -:  385:    /** Get file handle based on DLCI ID.
        -:  386:     *
        -:  387:     *  @param dlci_id ID of the DLCI used as the key
        -:  388:     *
        -:  389:     *  @return Valid object reference or NULL if not found.
        -:  390:     */
        -:  391:    static MuxDataService* file_handle_get(uint8_t dlci_id);
        -:  392:
        -:  393:    /** Evaluate is DLCI ID in use.
        -:  394:     *
        -:  395:     *  @param dlci_id ID of the DLCI yo evaluate
        -:  396:     *
        -:  397:     *  @return True if in use, false otherwise.
        -:  398:     */
        -:  399:    static bool is_dlci_in_use(uint8_t dlci_id);
        -:  400:
        -:  401:    /** Evaluate is DLCI ID queue full.
        -:  402:     *
        -:  403:     *  @return True if full, false otherwise.
        -:  404:     */
        -:  405:    static bool is_dlci_q_full();
        -:  406:
        -:  407:    /** Begin pending self iniated multiplexer open sequence. */
        -:  408:    static void pending_self_iniated_mux_open_start();
        -:  409:
        -:  410:    /** Begin pending self iniated DLCI establishment sequence. */
        -:  411:    static void pending_self_iniated_dlci_open_start();
        -:  412:
        -:  413:    /** Begin pending peer iniated DLCI establishment sequence.
        -:  414:     *
        -:  415:     *  @param dlci_id ID of the DLCI to establish.
        -:  416:     */
        -:  417:    static void pending_peer_iniated_dlci_open_start(uint8_t dlci_id);
        -:  418:
        -:  419:    /** Enqueue user data for transmission.
        -:  420:     *
        -:  421:     *  @note: This is API is only meant to be used for the multiplexer (user) data service tx. Supplied buffer can be
        -:  422:     *         reused/freed upon call return.
        -:  423:     *
        -:  424:     *  @param dlci_id ID of the DLCI to use.
        -:  425:     *  @param buffer  Begin of the user data.
        -:  426:     *  @param size    The number of bytes to write.
        -:  427:     *  @return        The number of bytes written, negative error on failure.
        -:  428:     */
        -:  429:    static ssize_t user_data_tx(uint8_t dlci_id, const void* buffer, size_t size);
        -:  430:
        -:  431:    /** Read user data into a buffer.
        -:  432:     *
        -:  433:     *  @note: This is API is only meant to be used for the multiplexer (user) data service rx.
        -:  434:     *
        -:  435:     *  @param buffer The buffer to read in to.
        -:  436:     *  @param size   The number of bytes to read.
        -:  437:     *  @return       The number of bytes read, -EAGAIN if no data availabe for read.
        -:  438:     */
        -:  439:    static ssize_t user_data_rx(void* buffer, size_t size);
        -:  440:
        -:  441:    /** Clear TX callback pending bit.
        -:  442:     *
        -:  443:     *  @param bit Bit to clear.
        -:  444:     */
        -:  445:    static void tx_callback_pending_bit_clear(uint8_t bit);
        -:  446:
        -:  447:    /** Set TX callback pending bit for supplied DLCI ID.
        -:  448:     *
        -:  449:     *  @param dlci_id DLCI ID for bit to set.
        -:  450:     */
        -:  451:    static void tx_callback_pending_bit_set(uint8_t dlci_id);
        -:  452:
        -:  453:    /** Advance the current TX callback index bit.
        -:  454:     *
        -:  455:     *  @return The current TX callback index bit after advanced.
        -:  456:     */
        -:  457:    static uint8_t tx_callback_index_advance();
        -:  458:
        -:  459:    /** Get the TX callback pending bitmask.
        -:  460:     *
        -:  461:     *  @return TX callback pending bitmask.
        -:  462:     */
        -:  463:    static uint8_t tx_callback_pending_mask_get();
        -:  464:
        -:  465:    /** Dispatch TX callback based on supplied bit.
        -:  466:     *
        -:  467:     *  @param bit Bit indetifier of callback to dispatch.
        -:  468:     */
        -:  469:    static void tx_callback_dispatch(uint8_t bit);
        -:  470:
        -:  471:    /** Run main processing loop for resolving pending TX callbacks and dispatching them if they exists.
        -:  472:     */
        -:  473:    static void tx_callbacks_run();
        -:  474:
        -:  475:    /** Get data service object based on supplied bit id.
        -:  476:     *
        -:  477:     *  @param bit Bit indetifier of data service object to get.
        -:  478:     *  @return    Data service object reference.
        -:  479:     */
        -:  480:    static MuxDataService& tx_callback_lookup(uint8_t bit);
        -:  481:
        -:  482:    /** Get minimum of 2 supplied paramaters.
        -:  483:     *
        -:  484:     *  @param size_1 1st param for comparisation.
        -:  485:     *  @param size_2 2nd param for comparisation.
        -:  486:     *  @return       Minimum of supplied paramaters.
        -:  487:     */
        -:  488:    static size_t min(uint8_t size_1, size_t size_2);
        -:  489:
        -:  490:    /** Enqueue callback to event queue.
        -:  491:     */
        -:  492:    static void event_queue_enqueue();
        -:  493:
        -:  494:    /** Verify is FCS valid in RX frame.
        -:  495:     *
        -:  496:     *  @return True upon valid FCS, false otherwise.
        -:  497:     */
        -:  498:    static bool is_rx_fcs_valid();
        -:  499:
        -:  500:    /* Deny object creation. */
        -:  501:    Mux();
        -:  502:
        -:  503:    /* Deny copy constructor. */
        -:  504:    Mux(const Mux& obj);
        -:  505:
        -:  506:    /* Deny assignment operator. */
        -:  507:    Mux& operator=(const Mux& obj);
        -:  508:
        -:  509:    /* Definition for Tx context type. */
        -:  510:    struct tx_context_t {
        -:  511:        int timer_id;                   /* Timer id. */
        -:  512:        union {
        -:  513:            uint32_t align_4_byte;                      /* Force 4-byte alignment. */
        -:  514:            uint8_t  buffer[MBED_CONF_MUX_BUFFER_SIZE]; /* Rx buffer. */
        -:  515:        };
        -:  516:        uint8_t retransmit_counter;     /* Frame retransmission counter. */
        -:  517:        uint8_t bytes_remaining;        /* Bytes remaining in the buffer to write. */
        -:  518:        uint8_t offset;                 /* Offset in the buffer where to write from. */
        -:  519:        uint8_t tx_callback_context;    /* Context for the TX callback dispatching logic as follows:
        -:  520:                                           - 4 LO bits contain the pending callback mask
        -:  521:                                           - 4 HI bits contain the current bit used for masking */
        -:  522:        TxState tx_state;               /* Tx state machine current state. */
        -:  523:
        -:  524:    };
        -:  525:
        -:  526:    /* Definition for Rx context type. */
        -:  527:    struct rx_context_t {
        -:  528:        union {
        -:  529:            uint32_t align_4_byte;                      /* Force 4-byte alignment. */
        -:  530:            uint8_t  buffer[MBED_CONF_MUX_BUFFER_SIZE]; /* Rx buffer. */
        -:  531:        };
        -:  532:        uint8_t offset;         /* Offset in the buffer where to read to. */
        -:  533:        uint8_t read_length;    /* Amount to read in number of bytes. */
        -:  534:        RxState rx_state;       /* Rx state machine current state. */
        -:  535:    };
        -:  536:
        -:  537:    /* Definition for state type. */
        -:  538:    struct state_t {
        -:  539:        uint16_t is_mux_open              : 1; /* True when multiplexer is open. */
        -:  540:        uint16_t is_mux_open_pending      : 1; /* True when multiplexer open is pending. */
        -:  541:        uint16_t is_mux_open_running      : 1; /* True when multiplexer open is running. */
        -:  542:        uint16_t is_dlci_open_pending     : 1; /* True when DLCI open is pending. */
        -:  543:        uint16_t is_dlci_open_running     : 1; /* True when DLCI open is running. */
        -:  544:        uint16_t is_system_thread_context : 1; /* True when current context is system thread context. */
        -:  545:        uint16_t is_tx_callback_context   : 1; /* True when current context is TX callback context. */
        -:  546:        uint16_t is_user_tx_pending       : 1; /* True when user TX is pending. */
        -:  547:        uint16_t is_user_rx_ready         : 1; /* True when user RX is ready/available. */
        -:  548:    };
        -:  549:
        -:  550:    static FileHandle*          _serial;                                /* Serial used. */
        -:  551:    static events::EventQueue*  _event_q;                               /* Event queue used. */
        -:  552:    static rtos::Semaphore      _semaphore;                             /* Semaphore used. */
        -:  553:    static PlatformMutex        _mutex;                                 /* Mutex used. */
        -:  554:    static MuxDataService       _mux_objects[MBED_CONF_MUX_DLCI_COUNT]; /* Number of supported DLCIs. */
        -:  555:    static tx_context_t         _tx_context;                            /* Tx context. */
        -:  556:    static rx_context_t         _rx_context;                            /* Rx context. */
        -:  557:    static state_t              _state;                                 /* General state context. */
        -:  558:    static const uint8_t        _crctable[MUX_CRC_TABLE_LEN];           /* CRC table used for frame FCS. */
        -:  559:    static uint8_t              _shared_memory;                         /* Shared memory used passing data between user and
        -:  560:                                                                     system threads. */
        -:  561:};
        -:  562:
        -:  563:} // namespace mbed
        -:  564:
        -:  565:#endif
