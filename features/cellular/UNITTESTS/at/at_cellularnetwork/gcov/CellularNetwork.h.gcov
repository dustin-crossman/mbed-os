        -:    0:Source:../../../framework/API/CellularNetwork.h
        -:    0:Graph:objs/AT_CellularNetwork_unit/AT_CellularNetwork.gcno
        -:    0:Data:objs/AT_CellularNetwork_unit/AT_CellularNetwork.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Copyright (c) 2017, Arm Limited and affiliates.
        -:    3: * SPDX-License-Identifier: Apache-2.0
        -:    4: *
        -:    5: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    6: * you may not use this file except in compliance with the License.
        -:    7: * You may obtain a copy of the License at
        -:    8: *
        -:    9: *     http://www.apache.org/licenses/LICENSE-2.0
        -:   10: *
        -:   11: * Unless required by applicable law or agreed to in writing, software
        -:   12: * distributed under the License is distributed on an "AS IS" BASIS,
        -:   13: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   14: * See the License for the specific language governing permissions and
        -:   15: * limitations under the License.
        -:   16: */
        -:   17:
        -:   18:#ifndef CELLULAR_NETWORK_H_
        -:   19:#define CELLULAR_NETWORK_H_
        -:   20:
        -:   21:#include "CellularInterface.h"
        -:   22:#include "NetworkInterface.h"
        -:   23:#include "CellularList.h"
        -:   24:
        -:   25:namespace mbed {
        -:   26:
        -:   27:/**
        -:   28: *  Class CellularNetwork
        -:   29: *
        -:   30: *  An abstract interface for connecting to a network and getting information from it.
        -:   31: */
       25:   32:class CellularNetwork : public NetworkInterface
        -:   33:{
        -:   34:protected:
        -:   35:    // friend of CellularDevice so that it's the only way to close/delete this class.
        -:   36:    friend class CellularDevice;
        -:   37:
        -:   38:    /**
        -:   39:     * virtual Destructor
        -:   40:     */
       25:   41:    virtual ~CellularNetwork() {}
        -:   42:
        -:   43:public:
        -:   44:    /* Definition for Supported CIoT EPS optimizations type. */
        -:   45:    enum Supported_UE_Opt {
        -:   46:        SUPPORTED_UE_OPT_NO_SUPPORT = 0, /* No support. */
        -:   47:        SUPPORTED_UE_OPT_CONTROL_PLANE,  /* Support for control plane CIoT EPS optimization. */
        -:   48:        SUPPORTED_UE_OPT_USER_PLANE,     /* Support for user plane CIoT EPS optimization. */
        -:   49:        SUPPORTED_UE_OPT_BOTH,           /* Support for both control plane CIoT EPS optimization and user plane CIoT EPS
        -:   50:                                            optimization. */
        -:   51:        SUPPORTED_UE_OPT_MAX
        -:   52:    };
        -:   53:
        -:   54:    /* Definition for Preferred CIoT EPS optimizations type. */
        -:   55:    enum Preferred_UE_Opt {
        -:   56:        PREFERRED_UE_OPT_NO_PREFERENCE = 0, /* No preference. */
        -:   57:        PREFERRED_UE_OPT_CONTROL_PLANE,     /* Preference for control plane CIoT EPS optimization. */
        -:   58:        PREFERRED_UE_OPT_USER_PLANE,        /* Preference for user plane CIoT EPS optimization. */
        -:   59:        PREFERRED_UE_OPT_MAX
        -:   60:    };
        -:   61:
        -:   62:    /* Network registration status */
        -:   63:    enum RegistrationStatus {
        -:   64:        NotRegistered = 0,
        -:   65:        RegisteredHomeNetwork,
        -:   66:        SearchingNetwork,
        -:   67:        RegistrationDenied,
        -:   68:        Unknown,
        -:   69:        RegisteredRoaming,
        -:   70:        RegisteredSMSOnlyHome,
        -:   71:        RegisteredSMSOnlyRoaming,
        -:   72:        AttachedEmergencyOnly,
        -:   73:        RegisteredCSFBNotPreferredHome,
        -:   74:        RegisteredCSFBNotPreferredRoaming = 10
        -:   75:    };
        -:   76:
        -:   77:    /* Network registration type */
        -:   78:    enum RegistrationType {
        -:   79:        C_EREG = 0,
        -:   80:        C_GREG,
        -:   81:        C_REG,
        -:   82:        C_MAX
        -:   83:    };
        -:   84:
        -:   85:    /* device attach status to network */
        -:   86:    enum AttachStatus {
        -:   87:        Detached = 0,
        -:   88:        Attached,
        -:   89:    };
        -:   90:
        -:   91:    /*  whether the additional exception reports are allowed to be sent when the maximum uplink rate is reached */
        -:   92:    enum RateControlExceptionReports {
        -:   93:        NotAllowedToBeSent = 0,
        -:   94:        AllowedToBeSent
        -:   95:    };
        -:   96:
        -:   97:    /* specifies the time unit to be used for the maximum uplink rate */
        -:   98:    enum RateControlUplinkTimeUnit {
        -:   99:        Unrestricted = 0,
        -:  100:        Minute,
        -:  101:        Hour,
        -:  102:        Day,
        -:  103:        Week
        -:  104:    };
        -:  105:
        -:  106:    /* authentication type when activating or modifying the pdp context */
        -:  107:    enum AuthenticationType {
        -:  108:        NOAUTH = 0,
        -:  109:        PAP,
        -:  110:        CHAP
        -:  111:    };
        -:  112:
        -:  113:    // 3GPP TS 27.007 - 7.3 PLMN selection +COPS
        -:  114:    struct operator_t {
        -:  115:        enum Status {
        -:  116:            Unknown,
        -:  117:            Available,
        -:  118:            Current,
        -:  119:            Forbiden
        -:  120:        };
        -:  121:
        -:  122:        enum RadioAccessTechnology {
        -:  123:            RAT_GSM,
        -:  124:            RAT_GSM_COMPACT,
        -:  125:            RAT_UTRAN,
        -:  126:            RAT_EGPRS,
        -:  127:            RAT_HSDPA,
        -:  128:            RAT_HSUPA,
        -:  129:            RAT_HSDPA_HSUPA,
        -:  130:            RAT_E_UTRAN,
        -:  131:            RAT_CATM1,
        -:  132:            RAT_NB1,
        -:  133:            RAT_UNKNOWN
        -:  134:        };
        -:  135:
        -:  136:
        -:  137:        Status op_status;
        -:  138:        char op_long[16+9];
        -:  139:        char op_short[8+4];
        -:  140:        char op_num[8+4];
        -:  141:        RadioAccessTechnology op_rat;
        -:  142:        operator_t *next;
        -:  143:
    #####:  144:        operator_t() {
    #####:  145:            op_status = Unknown;
    #####:  146:            op_rat = RAT_UNKNOWN;
    #####:  147:            next = NULL;
    #####:  148:        }
        -:  149:    };
        -:  150:
        -:  151:    typedef CellularList<operator_t> operList_t;
        -:  152:
        -:  153:    /* PDP Context information */
        -:  154:    struct pdpcontext_params_t {
        -:  155:        char apn[100+1];
        -:  156:        char local_addr[63+1];
        -:  157:        char local_subnet_mask[63+1];
        -:  158:        char gateway_addr[63+1];
        -:  159:        char dns_primary_addr[63+1];
        -:  160:        char dns_secondary_addr[63+1];
        -:  161:        char p_cscf_prim_addr[63+1];
        -:  162:        char p_cscf_sec_addr[63+1];
        -:  163:        int cid;
        -:  164:        int bearer_id;
        -:  165:        int im_signalling_flag;
        -:  166:        int lipa_indication;
        -:  167:        int ipv4_mtu;
        -:  168:        int wlan_offload;
        -:  169:        int local_addr_ind;
        -:  170:        int non_ip_mtu;
        -:  171:        int serving_plmn_rate_control_value;
        -:  172:        pdpcontext_params_t* next;
        -:  173:
    #####:  174:        pdpcontext_params_t() {
    #####:  175:            apn[0] = '\0';
    #####:  176:            local_addr[0] = '\0';
    #####:  177:            local_subnet_mask[0] = '\0';
    #####:  178:            gateway_addr[0] = '\0';
    #####:  179:            dns_primary_addr[0] = '\0';
    #####:  180:            dns_secondary_addr[0] = '\0';
    #####:  181:            p_cscf_prim_addr[0] = '\0';
    #####:  182:            p_cscf_sec_addr[0] = '\0';
    #####:  183:            cid = -1;
    #####:  184:            bearer_id = -1;
    #####:  185:            im_signalling_flag = -1;
    #####:  186:            lipa_indication = -1;
    #####:  187:            ipv4_mtu = -1;
    #####:  188:            wlan_offload = -1;
    #####:  189:            local_addr_ind = -1;
    #####:  190:            non_ip_mtu = -1;
    #####:  191:            serving_plmn_rate_control_value = -1;
    #####:  192:            next = NULL;
    #####:  193:        }
        -:  194:    };
        -:  195:    typedef CellularList<pdpcontext_params_t> pdpContextList_t;
        -:  196:
        -:  197:    /** Request registering to network.
        -:  198:     *
        -:  199:     *  @param plmn     format is in numeric format or 0 for automatic network registration
        -:  200:     *  @return         zero on success
        -:  201:     */
        -:  202:    virtual nsapi_error_t set_registration(char *plmn = 0) = 0;
        -:  203:
        -:  204:    /** Gets the network registration status.
        -:  205:     *
        -:  206:     * @param type      see RegistrationType values
        -:  207:     * @param status    see RegistrationStatus values
        -:  208:     * @return zero on success
        -:  209:     */
        -:  210:    virtual nsapi_error_t get_registration_status(RegistrationType type, RegistrationStatus &status) = 0;
        -:  211:
        -:  212:    /** Set the cellular network APN and credentials
        -:  213:     *
        -:  214:     *  @param apn      Optional name of the network to connect to
        -:  215:     *  @param username Optional username for the APN
        -:  216:     *  @param password Optional password fot the APN
        -:  217:     *  @return         0 on success, negative error code on failure
        -:  218:     */
        -:  219:    virtual nsapi_error_t set_credentials(const char *apn,
        -:  220:                                          const char *username = 0, const char *password = 0) = 0;
        -:  221:
        -:  222:    /** Set the cellular network APN and credentials
        -:  223:     *
        -:  224:     *  @param apn      Name of the network to connect to
        -:  225:     *  @param type     Authentication type to use
        -:  226:     *  @param username Optional username for the APN
        -:  227:     *  @param password Optional password fot the APN
        -:  228:     *  @return         0 on success, negative error code on failure
        -:  229:     */
        -:  230:    virtual nsapi_error_t set_credentials(const char *apn, AuthenticationType type,
        -:  231:                const char *username = 0, const char *password = 0) = 0;
        -:  232:
        -:  233:    /** Request attach to network.
        -:  234:     *
        -:  235:     *  @param timeout milliseconds to wait for attach response
        -:  236:     *  @return        zero on success
        -:  237:     */
        -:  238:    virtual nsapi_error_t set_attach(int timeout = 10*1000) = 0;
        -:  239:
        -:  240:    /** Request attach status from network.
        -:  241:     *
        -:  242:     *  @param status see AttachStatus values
        -:  243:     *  @return       zero on success
        -:  244:     */
        -:  245:    virtual nsapi_error_t get_attach(AttachStatus &status) = 0;
        -:  246:
        -:  247:    /** Get APN rate control.
        -:  248:     *
        -:  249:     *  @remark optional params are not updated if not received from network, so use good defaults
        -:  250:     *  @param reports       Additional exception reports at maximum rate reached are allowed to be sent [optional]
        -:  251:     *  @param time_unit     Uplink time unit with values 0=unrestricted, 1=minute, 2=hour, 3=day, 4=week [optional]
        -:  252:     *  @param uplink_rate   Maximum number of messages per timeUnit [optional]
        -:  253:     *  @return              zero on success
        -:  254:     */
        -:  255:    virtual nsapi_error_t get_rate_control(CellularNetwork::RateControlExceptionReports &reports,
        -:  256:        CellularNetwork::RateControlUplinkTimeUnit &time_unit, int &uplink_rate) = 0;
        -:  257:
        -:  258:    /** Get backoff timer value
        -:  259:     *
        -:  260:     *  @param backoff_time Backoff timer value associated with PDP APN in seconds
        -:  261:     *  @return             zero on success
        -:  262:     */
        -:  263:    virtual nsapi_error_t get_backoff_time(int &backoff_time) = 0;
        -:  264:
        -:  265:    /** Sets radio access technology.
        -:  266:     *
        -:  267:     *  @param op_rat Radio access technology
        -:  268:     *  @return       zero on success
        -:  269:     */
        -:  270:    virtual nsapi_error_t set_access_technology(operator_t::RadioAccessTechnology op_rat) = 0;
        -:  271:
        -:  272:    /** Scans for operators module can reach.
        -:  273:     *
        -:  274:     *  @param operators Container of reachable operators and their access technologies
        -:  275:     *  @param ops_count Number of found operators
        -:  276:     *  @return          zero on success
        -:  277:     */
        -:  278:    virtual nsapi_error_t scan_plmn(operList_t &operators, int &ops_count) = 0;
        -:  279:
        -:  280:    /** Set CIoT optimizations.
        -:  281:     *
        -:  282:     *  @param supported_opt Supported CIoT EPS optimizations.
        -:  283:     *  @param preferred_opt Preferred CIoT EPS optimizations.
        -:  284:     *  @return zero on success
        -:  285:     */
        -:  286:    virtual nsapi_error_t set_ciot_optimization_config(Supported_UE_Opt supported_opt,
        -:  287:                                                       Preferred_UE_Opt preferred_opt) = 0;
        -:  288:
        -:  289:    /** Get CIoT optimizations.
        -:  290:     *
        -:  291:     *  @param supported_opt Supported CIoT EPS optimizations.
        -:  292:     *  @param preferred_opt Preferred CIoT EPS optimizations.
        -:  293:     *  @return zero on success
        -:  294:     */
        -:  295:    virtual nsapi_error_t get_ciot_optimization_config(Supported_UE_Opt& supported_opt,
        -:  296:                                                       Preferred_UE_Opt& preferred_opt) = 0;
        -:  297:
        -:  298:    /** Start the interface. Attempts to connect to a cellular network.
        -:  299:     *
        -:  300:     *  @return 0 on success, negative error code on failure
        -:  301:     */
        -:  302:    virtual nsapi_error_t connect() = 0;
        -:  303:
        -:  304:    /** Start the interface. Attempts to connect to a cellular network.
        -:  305:     *
        -:  306:     *  @param apn      Optional name of the network to connect to
        -:  307:     *  @param username Optional username for your APN
        -:  308:     *  @param password Optional password for your APN
        -:  309:     *  @return         0 on success, negative error code on failure
        -:  310:     */
        -:  311:    virtual nsapi_error_t connect(const char *apn,
        -:  312:                                  const char *username = 0, const char *password = 0) = 0;
        -:  313:
        -:  314:    /**
        -:  315:     * Set the pdn type to be used
        -:  316:     *
        -:  317:     * @param stack_type the stack type to be used.
        -:  318:     *
        -:  319:     * @return NSAPI_ERROR_OK on success
        -:  320:     */
        -:  321:    virtual nsapi_error_t set_stack_type(nsapi_ip_stack_t stack_type) = 0;
        -:  322:
        -:  323:    /**
        -:  324:     * Get the pdn type in use
        -:  325:     *
        -:  326:     * @return stack type
        -:  327:     */
        -:  328:    virtual nsapi_ip_stack_t get_stack_type() = 0;
        -:  329:
        -:  330:    /** Get the relevant information for an active non secondary PDP context.
        -:  331:     *
        -:  332:     *  @remark optional params are not updated if not received from network.
        -:  333:     *  @param params_list  reference to linked list which is filled on successful call
        -:  334:     *  @return             0 on success, negative error code on failure
        -:  335:     */
        -:  336:    virtual nsapi_error_t get_pdpcontext_params(pdpContextList_t& params_list) = 0;
        -:  337:
        -:  338:    /** Get extended signal quality parameters.
        -:  339:     *
        -:  340:     *  @param rxlev signal strength level
        -:  341:     *  @param ber bit error rate
        -:  342:     *  @param rscp signal code power
        -:  343:     *  @param ecno ratio of the received energy per PN chip to the total received power spectral density
        -:  344:     *  @param rsrq signal received quality
        -:  345:     *  @param rsrp signal received power
        -:  346:     *  @return NSAPI_ERROR_OK on success, negative error code on failure
        -:  347:     */
        -:  348:    virtual nsapi_error_t get_extended_signal_quality(int &rxlev, int &ber, int &rscp, int &ecno, int &rsrq, int &rsrp) = 0;
        -:  349:
        -:  350:    /** Get signal quality parameters.
        -:  351:     *
        -:  352:     *  @param rssi signal strength level
        -:  353:     *  @param ber bit error rate
        -:  354:     *  @return NSAPI_ERROR_OK on success, negative error code on failure
        -:  355:     */
        -:  356:    virtual nsapi_error_t get_signal_quality(int &rssi, int &ber) = 0;
        -:  357:
        -:  358:    /** Get cell id.
        -:  359:     *
        -:  360:     *  @param cell_id cell id
        -:  361:     *  @return NSAPI_ERROR_OK on success, negative error code on failure
        -:  362:     */
        -:  363:    virtual nsapi_error_t get_cell_id(int &cell_id) = 0;
        -:  364:
        -:  365:    /** Get the last 3GPP error code
        -:  366:     *  @return see 3GPP TS 27.007 error codes
        -:  367:     */
        -:  368:    virtual uint8_t get_3gpp_error() = 0;
        -:  369:
        -:  370:    /** Get the operator params
        -:  371:     *
        -:  372:     *  @param format format of the operator field
        -:  373:     *  @param operator_params applicable operator param fields filled
        -:  374:     *  @return NSAPI_ERROR_OK on success, negative error code on failure
        -:  375:     */
        -:  376:    virtual nsapi_error_t get_operator_params(int &format, operator_t &operator_params) = 0;
        -:  377:
        -:  378:};
        -:  379:
        -:  380:} // namespace mbed
        -:  381:
        -:  382:#endif // CELLULAR_NETWORK_H_
