        -:    0:Source:../../../framework/API/CellularPower.h
        -:    0:Graph:objs/AT_CellularPower_unit/AT_CellularPower.gcno
        -:    0:Data:objs/AT_CellularPower_unit/AT_CellularPower.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Copyright (c) 2017, Arm Limited and affiliates.
        -:    3: * SPDX-License-Identifier: Apache-2.0
        -:    4: *
        -:    5: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    6: * you may not use this file except in compliance with the License.
        -:    7: * You may obtain a copy of the License at
        -:    8: *
        -:    9: *     http://www.apache.org/licenses/LICENSE-2.0
        -:   10: *
        -:   11: * Unless required by applicable law or agreed to in writing, software
        -:   12: * distributed under the License is distributed on an "AS IS" BASIS,
        -:   13: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   14: * See the License for the specific language governing permissions and
        -:   15: * limitations under the License.
        -:   16: */
        -:   17:#ifndef CELLULAR_API_CELLULARPOWER_H_
        -:   18:#define CELLULAR_API_CELLULARPOWER_H_
        -:   19:
        -:   20:#include "nsapi_types.h"
        -:   21:
        -:   22:namespace mbed {
        -:   23:
        -:   24:/**
        -:   25: *  Class CellularPower
        -:   26: *
        -:   27: *  An abstract interface for connecting to a network and getting information from it.
        -:   28: */
        1:   29:class CellularPower
        -:   30:{
        -:   31:protected:
        -:   32:    // friend of CellularDevice so that it's the only way to close/delete this class.
        -:   33:    friend class CellularDevice;
        -:   34:
        -:   35:    /**
        -:   36:     * virtual Destructor
        -:   37:     */
        1:   38:    virtual ~CellularPower() {}
        -:   39:
        -:   40:public:
        -:   41:    /* Access technology used in method opt_receive_period */
        -:   42:    enum EDRXAccessTechnology {
        -:   43:        EDRXGSM_EC_GSM_IoT_mode = 1,
        -:   44:        EDRXGSM_A_Gb_mode,
        -:   45:        EDRXUTRAN_Iu_mode,
        -:   46:        EDRXEUTRAN_WB_S1_mode,
        -:   47:        EDRXEUTRAN_NB_S1_mode
        -:   48:    };
        -:   49:
        -:   50:    /** Set cellular device power on. Default implementation is empty.
        -:   51:     *  Device power on/off is modem/board specific behavior and must be done on inherited class if needed.
        -:   52:     *  Power on is done by toggling power pin/button.
        -:   53:     *
        -:   54:     *  @remark set_at_mode must be called to initialise modem
        -:   55:     *
        -:   56:     *  @remark Should not be called if MUX is enabled and started. If called then start-up sequence must be done again.
        -:   57:     *  @return zero on success
        -:   58:     */
        -:   59:    virtual nsapi_error_t on() = 0;
        -:   60:
        -:   61:    /** Set cellular device power off. Default implementation is empty.
        -:   62:     *  Device power on/off is modem/board specific behavior and must be done on inherited class if needed.
        -:   63:     *  Power off is done by toggling power pin/button.
        -:   64:     *
        -:   65:     *  @remark Should not be called if MUX is enabled and started. If called then start-up sequence must be done again.
        -:   66:     *
        -:   67:     *  @return zero on success
        -:   68:     */
        -:   69:    virtual nsapi_error_t off() = 0;
        -:   70:
        -:   71:    /** Set AT command mode. Blocking until success or failure.
        -:   72:     *
        -:   73:     *  @remark must be called after power on to prepare correct AT mode
        -:   74:     *
        -:   75:     *  @return zero on success
        -:   76:     */
        -:   77:    virtual nsapi_error_t set_at_mode() = 0;
        -:   78:
        -:   79:    /** Set cellular device power level by enabling/disabling functionality.
        -:   80:     *
        -:   81:     *  @param func_level:
        -:   82:     *  0   minimum functionality
        -:   83:     *  1   full functionality. Enable (turn on) the transmit and receive RF circuits for all supported radio access technologies.
        -:   84:     *      For MTs supporting +CSRA, this equals the RATs indicated by the response of +CSRA=?. Current +CSRA setting is ignored.
        -:   85:     *      It is not required that the MT transmit and receive RF circuits are in a disabled state for this setting to have effect.
        -:   86:     *  2   disable (turn off) MT transmit RF circuits only
        -:   87:     *  3   disable (turn off) MT receive RF circuits only
        -:   88:     *  4   disable (turn off) both MT transmit and receive RF circuits
        -:   89:     *
        -:   90:     *  @remark See 3GPP TS 27.007 CFUN for more details
        -:   91:     *  @remark Should not be called if MUX is enabled and started. If called then start-up sequence must be done again.
        -:   92:     *
        -:   93:     *  @return zero on success
        -:   94:     */
        -:   95:    virtual nsapi_error_t set_power_level(int func_level) = 0;
        -:   96:
        -:   97:    /** Reset and wake-up cellular device.
        -:   98:     *
        -:   99:     *  @remark Should not be called if MUX is enabled and started. If called then start-up sequence must be done again.
        -:  100:     *
        -:  101:     *  @return zero on success
        -:  102:     */
        -:  103:    virtual nsapi_error_t reset() = 0;
        -:  104:
        -:  105:    /** Opt for power save setting on cellular device. If both parameters are zero then disables PSM.
        -:  106:     *
        -:  107:     *  @remark See 3GPP TS 27.007 PSM for details
        -:  108:     *
        -:  109:     *  @param periodic_time Timeout in seconds IoT subsystem is not expecting messaging
        -:  110:     *  @param active_time   Timeout in seconds IoT subsystem waits for response
        -:  111:     *  @return              zero on success
        -:  112:     */
        -:  113:    virtual nsapi_error_t opt_power_save_mode(int periodic_time, int active_time) = 0;
        -:  114:
        -:  115:    /** Opt for discontinuous reception on cellular device.
        -:  116:     *
        -:  117:     *  @remark See 3GPP TS 27.007 eDRX for details.
        -:  118:     *
        -:  119:     *  @param mode          disable or enable the use of eDRX
        -:  120:     *  @param act_type      type of access technology
        -:  121:     *  @param edrx_value    requested edxr value. Extended DRX parameters information element.
        -:  122:     *
        -:  123:     *  @return              zero on success
        -:  124:     */
        -:  125:    virtual nsapi_error_t opt_receive_period(int mode, EDRXAccessTechnology act_type, uint8_t edrx_value) = 0;
        -:  126:};
        -:  127:
        -:  128:} // namespace mbed
        -:  129:
        -:  130:#endif /* CELLULAR_API_CELLULARPOWER_H_ */
