        -:    0:Source:../../../../../platform/Callback.h
        -:    0:Graph:objs/ATHandler_unit/ATHandler.gcno
        -:    0:Data:objs/ATHandler_unit/ATHandler.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* mbed Microcontroller Library
        -:    2: * Copyright (c) 2006-2015 ARM Limited
        -:    3: *
        -:    4: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    5: * you may not use this file except in compliance with the License.
        -:    6: * You may obtain a copy of the License at
        -:    7: *
        -:    8: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    9: *
        -:   10: * Unless required by applicable law or agreed to in writing, software
        -:   11: * distributed under the License is distributed on an "AS IS" BASIS,
        -:   12: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   13: * See the License for the specific language governing permissions and
        -:   14: * limitations under the License.
        -:   15: */
        -:   16:#ifndef MBED_CALLBACK_H
        -:   17:#define MBED_CALLBACK_H
        -:   18:
        -:   19:#include <string.h>
        -:   20:#include <stdint.h>
        -:   21:#include <new>
        -:   22:#include "platform/mbed_assert.h"
        -:   23:#include "platform/mbed_toolchain.h"
        -:   24:
        -:   25:namespace mbed {
        -:   26:/** \addtogroup platform */
        -:   27:/** @{*/
        -:   28:/**
        -:   29: * \defgroup platform_Callback Callback class
        -:   30: * @{
        -:   31: */
        -:   32:
        -:   33:/** Callback class based on template specialization
        -:   34: *
        -:   35: * @note Synchronization level: Not protected
        -:   36: */
        -:   37:template <typename F>
        -:   38:class Callback;
        -:   39:
        -:   40:// Internal sfinae declarations
        -:   41://
        -:   42:// These are used to eliminate overloads based on type attributes
        -:   43:// 1. Does a function object have a call operator
        -:   44:// 2. Does a function object fit in the available storage
        -:   45://
        -:   46:// These eliminations are handled cleanly by the compiler and avoid
        -:   47:// massive and misleading error messages when confronted with an
        -:   48:// invalid type (or worse, runtime failures)
        -:   49:namespace detail {
        -:   50:    struct nil {};
        -:   51:
        -:   52:    template <bool B, typename R = nil>
        -:   53:    struct enable_if { typedef R type; };
        -:   54:
        -:   55:    template <typename R>
        -:   56:    struct enable_if<false, R> {};
        -:   57:
        -:   58:    template <typename M, M>
        -:   59:    struct is_type {
        -:   60:        static const bool value = true;
        -:   61:    };
        -:   62:}
        -:   63:
        -:   64:#define MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, M)                            \
        -:   65:    typename detail::enable_if<                                             \
        -:   66:            detail::is_type<M, &F::operator()>::value &&                    \
        -:   67:            sizeof(F) <= sizeof(uintptr_t)                                  \
        -:   68:        >::type = detail::nil()
        -:   69:
        -:   70:/** Callback class based on template specialization
        -:   71: *
        -:   72: * @note Synchronization level: Not protected
        -:   73: */
        -:   74:template <typename R>
        -:   75:class Callback<R()> {
        -:   76:public:
        -:   77:    /** Create a Callback with a static function
        -:   78:     *  @param func     Static function to attach
        -:   79:     */
    #####:   80:    Callback(R (*func)() = 0) {
    #####:   81:        if (!func) {
    #####:   82:            memset(this, 0, sizeof(Callback));
        -:   83:        } else {
    #####:   84:            generate(func);
        -:   85:        }
    #####:   86:    }
        -:   87:
        -:   88:    /** Attach a Callback
        -:   89:     *  @param func     The Callback to attach
        -:   90:     */
        3:   91:    Callback(const Callback<R()> &func) {
        3:   92:        if (func._ops) {
        2:   93:            func._ops->move(this, &func);
        -:   94:        }
        3:   95:        _ops = func._ops;
        3:   96:    }
        -:   97:
        -:   98:    /** Create a Callback with a member function
        -:   99:     *  @param obj      Pointer to object to invoke member function on
        -:  100:     *  @param method   Member function to attach
        -:  101:     */
        -:  102:    template<typename T, typename U>
       77:  103:    Callback(U *obj, R (T::*method)()) {
       77:  104:        generate(method_context<T, R (T::*)()>(obj, method));
       77:  105:    }
        -:  106:
        -:  107:    /** Create a Callback with a member function
        -:  108:     *  @param obj      Pointer to object to invoke member function on
        -:  109:     *  @param method   Member function to attach
        -:  110:     */
        -:  111:    template<typename T, typename U>
        -:  112:    Callback(const U *obj, R (T::*method)() const) {
        -:  113:        generate(method_context<const T, R (T::*)() const>(obj, method));
        -:  114:    }
        -:  115:
        -:  116:    /** Create a Callback with a member function
        -:  117:     *  @param obj      Pointer to object to invoke member function on
        -:  118:     *  @param method   Member function to attach
        -:  119:     */
        -:  120:    template<typename T, typename U>
        -:  121:    Callback(volatile U *obj, R (T::*method)() volatile) {
        -:  122:        generate(method_context<volatile T, R (T::*)() volatile>(obj, method));
        -:  123:    }
        -:  124:
        -:  125:    /** Create a Callback with a member function
        -:  126:     *  @param obj      Pointer to object to invoke member function on
        -:  127:     *  @param method   Member function to attach
        -:  128:     */
        -:  129:    template<typename T, typename U>
        -:  130:    Callback(const volatile U *obj, R (T::*method)() const volatile) {
        -:  131:        generate(method_context<const volatile T, R (T::*)() const volatile>(obj, method));
        -:  132:    }
        -:  133:
        -:  134:    /** Create a Callback with a static function and bound pointer
        -:  135:     *  @param func     Static function to attach
        -:  136:     *  @param arg      Pointer argument to function 
        -:  137:     */
        -:  138:    template<typename T, typename U>
        -:  139:    Callback(R (*func)(T*), U *arg) {
        -:  140:        generate(function_context<R (*)(T*), T>(func, arg));
        -:  141:    }
        -:  142:
        -:  143:    /** Create a Callback with a static function and bound pointer
        -:  144:     *  @param func     Static function to attach
        -:  145:     *  @param arg      Pointer argument to function 
        -:  146:     */
        -:  147:    template<typename T, typename U>
        -:  148:    Callback(R (*func)(const T*), const U *arg) {
        -:  149:        generate(function_context<R (*)(const T*), const T>(func, arg));
        -:  150:    }
        -:  151:
        -:  152:    /** Create a Callback with a static function and bound pointer
        -:  153:     *  @param func     Static function to attach
        -:  154:     *  @param arg      Pointer argument to function 
        -:  155:     */
        -:  156:    template<typename T, typename U>
        -:  157:    Callback(R (*func)(volatile T*), volatile U *arg) {
        -:  158:        generate(function_context<R (*)(volatile T*), volatile T>(func, arg));
        -:  159:    }
        -:  160:
        -:  161:    /** Create a Callback with a static function and bound pointer
        -:  162:     *  @param func     Static function to attach
        -:  163:     *  @param arg      Pointer argument to function 
        -:  164:     */
        -:  165:    template<typename T, typename U>
        -:  166:    Callback(R (*func)(const volatile T*), const volatile U *arg) {
        -:  167:        generate(function_context<R (*)(const volatile T*), const volatile T>(func, arg));
        -:  168:    }
        -:  169:
        -:  170:    /** Create a Callback with a function object
        -:  171:     *  @param f Function object to attach
        -:  172:     *  @note The function object is limited to a single word of storage
        -:  173:     */
        -:  174:    template <typename F>
        -:  175:    Callback(F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)())) {
        -:  176:        generate(f);
        -:  177:    }
        -:  178:
        -:  179:    /** Create a Callback with a function object
        -:  180:     *  @param f Function object to attach
        -:  181:     *  @note The function object is limited to a single word of storage
        -:  182:     */
        -:  183:    template <typename F>
        -:  184:    Callback(const F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)() const)) {
        -:  185:        generate(f);
        -:  186:    }
        -:  187:
        -:  188:    /** Create a Callback with a function object
        -:  189:     *  @param f Function object to attach
        -:  190:     *  @note The function object is limited to a single word of storage
        -:  191:     */
        -:  192:    template <typename F>
        -:  193:    Callback(volatile F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)() volatile)) {
        -:  194:        generate(f);
        -:  195:    }
        -:  196:
        -:  197:    /** Create a Callback with a function object
        -:  198:     *  @param f Function object to attach
        -:  199:     *  @note The function object is limited to a single word of storage
        -:  200:     */
        -:  201:    template <typename F>
        -:  202:    Callback(const volatile F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)() const volatile)) {
        -:  203:        generate(f);
        -:  204:    }
        -:  205:
        -:  206:    /** Create a Callback with a static function and bound pointer
        -:  207:     *  @param obj  Pointer to object to bind to function
        -:  208:     *  @param func Static function to attach
        -:  209:     *  @deprecated
        -:  210:     *      Arguments to callback have been reordered to Callback(func, arg)
        -:  211:     */
        -:  212:    template<typename T, typename U>
        -:  213:    MBED_DEPRECATED_SINCE("mbed-os-5.1",
        -:  214:        "Arguments to callback have been reordered to Callback(func, arg)")
        -:  215:    Callback(U *obj, R (*func)(T*)) {
        -:  216:        new (this) Callback(func, obj);
        -:  217:    }
        -:  218:
        -:  219:    /** Create a Callback with a static function and bound pointer
        -:  220:     *  @param obj  Pointer to object to bind to function
        -:  221:     *  @param func Static function to attach
        -:  222:     *  @deprecated
        -:  223:     *      Arguments to callback have been reordered to Callback(func, arg)
        -:  224:     */
        -:  225:    template<typename T, typename U>
        -:  226:    MBED_DEPRECATED_SINCE("mbed-os-5.1",
        -:  227:        "Arguments to callback have been reordered to Callback(func, arg)")
        -:  228:    Callback(const U *obj, R (*func)(const T*)) {
        -:  229:        new (this) Callback(func, obj);
        -:  230:    }
        -:  231:
        -:  232:    /** Create a Callback with a static function and bound pointer
        -:  233:     *  @param obj  Pointer to object to bind to function
        -:  234:     *  @param func Static function to attach
        -:  235:     *  @deprecated
        -:  236:     *      Arguments to callback have been reordered to Callback(func, arg)
        -:  237:     */
        -:  238:    template<typename T, typename U>
        -:  239:    MBED_DEPRECATED_SINCE("mbed-os-5.1",
        -:  240:        "Arguments to callback have been reordered to Callback(func, arg)")
        -:  241:    Callback(volatile U *obj, R (*func)(volatile T*)) {
        -:  242:        new (this) Callback(func, obj);
        -:  243:    }
        -:  244:
        -:  245:    /** Create a Callback with a static function and bound pointer
        -:  246:     *  @param obj  Pointer to object to bind to function
        -:  247:     *  @param func Static function to attach
        -:  248:     *  @deprecated
        -:  249:     *      Arguments to callback have been reordered to Callback(func, arg)
        -:  250:     */
        -:  251:    template<typename T, typename U>
        -:  252:    MBED_DEPRECATED_SINCE("mbed-os-5.1",
        -:  253:        "Arguments to callback have been reordered to Callback(func, arg)")
        -:  254:    Callback(const volatile U *obj, R (*func)(const volatile T*)) {
        -:  255:        new (this) Callback(func, obj);
        -:  256:    }
        -:  257:
        -:  258:    /** Destroy a callback
        -:  259:     */
    #####:  260:    ~Callback() {
    #####:  261:        if (_ops) {
    #####:  262:            _ops->dtor(this);
        -:  263:        }
    #####:  264:    }
        -:  265:
        -:  266:    /** Attach a static function
        -:  267:     *  @param func     Static function to attach
        -:  268:     *  @deprecated
        -:  269:     *      Replaced by simple assignment 'Callback cb = func'
        -:  270:     */
        -:  271:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -:  272:        "Replaced by simple assignment 'Callback cb = func")
        -:  273:    void attach(R (*func)()) {
        -:  274:        this->~Callback();
        -:  275:        new (this) Callback(func);
        -:  276:    }
        -:  277:
        -:  278:    /** Attach a Callback
        -:  279:     *  @param func     The Callback to attach
        -:  280:     *  @deprecated
        -:  281:     *      Replaced by simple assignment 'Callback cb = func'
        -:  282:     */
        -:  283:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -:  284:        "Replaced by simple assignment 'Callback cb = func")
        -:  285:    void attach(const Callback<R()> &func) {
        -:  286:        this->~Callback();
        -:  287:        new (this) Callback(func);
        -:  288:    }
        -:  289:
        -:  290:    /** Attach a member function
        -:  291:     *  @param obj      Pointer to object to invoke member function on
        -:  292:     *  @param method   Member function to attach
        -:  293:     *  @deprecated
        -:  294:     *      Replaced by simple assignment 'Callback cb = func'
        -:  295:     */
        -:  296:    template<typename T, typename U>
        -:  297:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -:  298:        "Replaced by simple assignment 'Callback cb = func")
        -:  299:    void attach(U *obj, R (T::*method)()) {
        -:  300:        this->~Callback();
        -:  301:        new (this) Callback(obj, method);
        -:  302:    }
        -:  303:
        -:  304:    /** Attach a member function
        -:  305:     *  @param obj      Pointer to object to invoke member function on
        -:  306:     *  @param method   Member function to attach
        -:  307:     *  @deprecated
        -:  308:     *      Replaced by simple assignment 'Callback cb = func'
        -:  309:     */
        -:  310:    template<typename T, typename U>
        -:  311:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -:  312:        "Replaced by simple assignment 'Callback cb = func")
        -:  313:    void attach(const U *obj, R (T::*method)() const) {
        -:  314:        this->~Callback();
        -:  315:        new (this) Callback(obj, method);
        -:  316:    }
        -:  317:
        -:  318:    /** Attach a member function
        -:  319:     *  @param obj      Pointer to object to invoke member function on
        -:  320:     *  @param method   Member function to attach
        -:  321:     *  @deprecated
        -:  322:     *      Replaced by simple assignment 'Callback cb = func'
        -:  323:     */
        -:  324:    template<typename T, typename U>
        -:  325:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -:  326:        "Replaced by simple assignment 'Callback cb = func")
        -:  327:    void attach(volatile U *obj, R (T::*method)() volatile) {
        -:  328:        this->~Callback();
        -:  329:        new (this) Callback(obj, method);
        -:  330:    }
        -:  331:
        -:  332:    /** Attach a member function
        -:  333:     *  @param obj      Pointer to object to invoke member function on
        -:  334:     *  @param method   Member function to attach
        -:  335:     *  @deprecated
        -:  336:     *      Replaced by simple assignment 'Callback cb = func'
        -:  337:     */
        -:  338:    template<typename T, typename U>
        -:  339:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -:  340:        "Replaced by simple assignment 'Callback cb = func")
        -:  341:    void attach(const volatile U *obj, R (T::*method)() const volatile) {
        -:  342:        this->~Callback();
        -:  343:        new (this) Callback(obj, method);
        -:  344:    }
        -:  345:
        -:  346:    /** Attach a static function with a bound pointer
        -:  347:     *  @param func     Static function to attach
        -:  348:     *  @param arg      Pointer argument to function
        -:  349:     *  @deprecated
        -:  350:     *      Replaced by simple assignment 'Callback cb = func'
        -:  351:     */
        -:  352:    template <typename T, typename U>
        -:  353:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -:  354:        "Replaced by simple assignment 'Callback cb = func")
        -:  355:    void attach(R (*func)(T*), U *arg) {
        -:  356:        this->~Callback();
        -:  357:        new (this) Callback(func, arg);
        -:  358:    }
        -:  359:
        -:  360:    /** Attach a static function with a bound pointer
        -:  361:     *  @param func     Static function to attach
        -:  362:     *  @param arg      Pointer argument to function
        -:  363:     *  @deprecated
        -:  364:     *      Replaced by simple assignment 'Callback cb = func'
        -:  365:     */
        -:  366:    template <typename T, typename U>
        -:  367:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -:  368:        "Replaced by simple assignment 'Callback cb = func")
        -:  369:    void attach(R (*func)(const T*), const U *arg) {
        -:  370:        this->~Callback();
        -:  371:        new (this) Callback(func, arg);
        -:  372:    }
        -:  373:
        -:  374:    /** Attach a static function with a bound pointer
        -:  375:     *  @param func     Static function to attach
        -:  376:     *  @param arg      Pointer argument to function
        -:  377:     *  @deprecated
        -:  378:     *      Replaced by simple assignment 'Callback cb = func'
        -:  379:     */
        -:  380:    template <typename T, typename U>
        -:  381:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -:  382:        "Replaced by simple assignment 'Callback cb = func")
        -:  383:    void attach(R (*func)(volatile T*), volatile U *arg) {
        -:  384:        this->~Callback();
        -:  385:        new (this) Callback(func, arg);
        -:  386:    }
        -:  387:
        -:  388:    /** Attach a static function with a bound pointer
        -:  389:     *  @param func     Static function to attach
        -:  390:     *  @param arg      Pointer argument to function
        -:  391:     *  @deprecated
        -:  392:     *      Replaced by simple assignment 'Callback cb = func'
        -:  393:     */
        -:  394:    template <typename T, typename U>
        -:  395:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -:  396:        "Replaced by simple assignment 'Callback cb = func")
        -:  397:    void attach(R (*func)(const volatile T*), const volatile U *arg) {
        -:  398:        this->~Callback();
        -:  399:        new (this) Callback(func, arg);
        -:  400:    }
        -:  401:
        -:  402:    /** Attach a function object
        -:  403:     *  @param f     Function object to attach
        -:  404:     *  @note The function object is limited to a single word of storage
        -:  405:     *  @deprecated
        -:  406:     *      Replaced by simple assignment 'Callback cb = func'
        -:  407:     */
        -:  408:    template <typename F>
        -:  409:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -:  410:        "Replaced by simple assignment 'Callback cb = func")
        -:  411:    void attach(F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)())) {
        -:  412:        this->~Callback();
        -:  413:        new (this) Callback(f);
        -:  414:    }
        -:  415:
        -:  416:    /** Attach a function object
        -:  417:     *  @param f     Function object to attach
        -:  418:     *  @note The function object is limited to a single word of storage
        -:  419:     *  @deprecated
        -:  420:     *      Replaced by simple assignment 'Callback cb = func'
        -:  421:     */
        -:  422:    template <typename F>
        -:  423:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -:  424:        "Replaced by simple assignment 'Callback cb = func")
        -:  425:    void attach(const F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)() const)) {
        -:  426:        this->~Callback();
        -:  427:        new (this) Callback(f);
        -:  428:    }
        -:  429:
        -:  430:    /** Attach a function object
        -:  431:     *  @param f Function object to attach
        -:  432:     *  @note The function object is limited to a single word of storage
        -:  433:     *  @deprecated
        -:  434:     *      Replaced by simple assignment 'Callback cb = func'
        -:  435:     */
        -:  436:    template <typename F>
        -:  437:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -:  438:        "Replaced by simple assignment 'Callback cb = func")
        -:  439:    void attach(volatile F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)() volatile)) {
        -:  440:        this->~Callback();
        -:  441:        new (this) Callback(f);
        -:  442:    }
        -:  443:
        -:  444:    /** Attach a function object
        -:  445:     *  @param f Function object to attach
        -:  446:     *  @note The function object is limited to a single word of storage
        -:  447:     *  @deprecated
        -:  448:     *      Replaced by simple assignment 'Callback cb = func'
        -:  449:     */
        -:  450:    template <typename F>
        -:  451:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -:  452:        "Replaced by simple assignment 'Callback cb = func")
        -:  453:    void attach(const volatile F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)() const volatile)) {
        -:  454:        this->~Callback();
        -:  455:        new (this) Callback(f);
        -:  456:    }
        -:  457:
        -:  458:    /** Attach a static function with a bound pointer
        -:  459:     *  @param obj  Pointer to object to bind to function
        -:  460:     *  @param func Static function to attach
        -:  461:     *  @deprecated
        -:  462:     *      Arguments to callback have been reordered to attach(func, arg)
        -:  463:     */
        -:  464:    template <typename T, typename U>
        -:  465:    MBED_DEPRECATED_SINCE("mbed-os-5.1",
        -:  466:        "Arguments to callback have been reordered to attach(func, arg)")
        -:  467:    void attach(U *obj, R (*func)(T*)) {
        -:  468:        this->~Callback();
        -:  469:        new (this) Callback(func, obj);
        -:  470:    }
        -:  471:
        -:  472:    /** Attach a static function with a bound pointer
        -:  473:     *  @param obj  Pointer to object to bind to function
        -:  474:     *  @param func Static function to attach
        -:  475:     *  @deprecated
        -:  476:     *      Arguments to callback have been reordered to attach(func, arg)
        -:  477:     */
        -:  478:    template <typename T, typename U>
        -:  479:    MBED_DEPRECATED_SINCE("mbed-os-5.1",
        -:  480:        "Arguments to callback have been reordered to attach(func, arg)")
        -:  481:    void attach(const U *obj, R (*func)(const T*)) {
        -:  482:        this->~Callback();
        -:  483:        new (this) Callback(func, obj);
        -:  484:    }
        -:  485:
        -:  486:    /** Attach a static function with a bound pointer
        -:  487:     *  @param obj  Pointer to object to bind to function
        -:  488:     *  @param func Static function to attach
        -:  489:     *  @deprecated
        -:  490:     *      Arguments to callback have been reordered to attach(func, arg)
        -:  491:     */
        -:  492:    template <typename T, typename U>
        -:  493:    MBED_DEPRECATED_SINCE("mbed-os-5.1",
        -:  494:        "Arguments to callback have been reordered to attach(func, arg)")
        -:  495:    void attach(volatile U *obj, R (*func)(volatile T*)) {
        -:  496:        this->~Callback();
        -:  497:        new (this) Callback(func, obj);
        -:  498:    }
        -:  499:
        -:  500:    /** Attach a static function with a bound pointer
        -:  501:     *  @param obj  Pointer to object to bind to function
        -:  502:     *  @param func Static function to attach
        -:  503:     *  @deprecated
        -:  504:     *      Arguments to callback have been reordered to attach(func, arg)
        -:  505:     */
        -:  506:    template <typename T, typename U>
        -:  507:    MBED_DEPRECATED_SINCE("mbed-os-5.1",
        -:  508:        "Arguments to callback have been reordered to attach(func, arg)")
        -:  509:    void attach(const volatile U *obj, R (*func)(const volatile T*)) {
        -:  510:        this->~Callback();
        -:  511:        new (this) Callback(func, obj);
        -:  512:    }
        -:  513:
        -:  514:    /** Assign a callback
        -:  515:     */
        3:  516:    Callback &operator=(const Callback &that) {
        3:  517:        if (this != &that) {
        3:  518:            this->~Callback();
        3:  519:            new (this) Callback(that);
        -:  520:        }
        -:  521:
        3:  522:        return *this;
        -:  523:    }
        -:  524:
        -:  525:    /** Call the attached function
        -:  526:     */
    #####:  527:    R call() const {
    #####:  528:        MBED_ASSERT(_ops);
    #####:  529:        return _ops->call(this);
        -:  530:    }
        -:  531:
        -:  532:    /** Call the attached function
        -:  533:     */
    #####:  534:    R operator()() const {
    #####:  535:        return call();
        -:  536:    }
        -:  537:
        -:  538:    /** Test if function has been attached
        -:  539:     */
        3:  540:    operator bool() const {
        3:  541:        return _ops;
        -:  542:    }
        -:  543:
        -:  544:    /** Test for equality
        -:  545:     */
        -:  546:    friend bool operator==(const Callback &l, const Callback &r) {
        -:  547:        return memcmp(&l, &r, sizeof(Callback)) == 0;
        -:  548:    }
        -:  549:
        -:  550:    /** Test for inequality
        -:  551:     */
        -:  552:    friend bool operator!=(const Callback &l, const Callback &r) {
        -:  553:        return !(l == r);
        -:  554:    }
        -:  555:
        -:  556:    /** Static thunk for passing as C-style function
        -:  557:     *  @param func Callback to call passed as void pointer
        -:  558:     *  @return the value as determined by func which is of 
        -:  559:     *      type and determined by the signiture of func
        -:  560:     */
        -:  561:    static R thunk(void *func) {
        -:  562:        return static_cast<Callback*>(func)->call();
        -:  563:    }
        -:  564:
        -:  565:private:
        -:  566:    // Stored as pointer to function and pointer to optional object
        -:  567:    // Function pointer is stored as union of possible function types
        -:  568:    // to garuntee proper size and alignment
        -:  569:    struct _class;
        -:  570:    union {
        -:  571:        void (*_staticfunc)();
        -:  572:        void (*_boundfunc)(_class*);
        -:  573:        void (_class::*_methodfunc)();
        -:  574:    } _func;
        -:  575:    void *_obj;
        -:  576:
        -:  577:    // Dynamically dispatched operations
        -:  578:    const struct ops {
        -:  579:        R (*call)(const void*);
        -:  580:        void (*move)(void*, const void*);
        -:  581:        void (*dtor)(void*);
        -:  582:    } *_ops;
        -:  583:
        -:  584:    // Generate operations for function object
        -:  585:    template <typename F>
       77:  586:    void generate(const F &f) {
        -:  587:        static const ops ops = {
        -:  588:            &Callback::function_call<F>,
        -:  589:            &Callback::function_move<F>,
        -:  590:            &Callback::function_dtor<F>,
        -:  591:        };
        -:  592:
        -:  593:        MBED_STATIC_ASSERT(sizeof(Callback) - sizeof(_ops) >= sizeof(F),
        -:  594:                "Type F must not exceed the size of the Callback class");
       77:  595:        memset(this, 0, sizeof(Callback));
       77:  596:        new (this) F(f);
       77:  597:        _ops = &ops;
       77:  598:    }
        -:  599:
        -:  600:    // Function attributes
        -:  601:    template <typename F>
       38:  602:    static R function_call(const void *p) {
       38:  603:        return (*(F*)p)();
        -:  604:    }
        -:  605:
        -:  606:    template <typename F>
    #####:  607:    static void function_move(void *d, const void *p) {
    #####:  608:        new (d) F(*(F*)p);
    #####:  609:    }
        -:  610:
        -:  611:    template <typename F>
       77:  612:    static void function_dtor(void *p) {
        -:  613:        ((F*)p)->~F();
       77:  614:    }
        -:  615:
        -:  616:    // Wrappers for functions with context
        -:  617:    template <typename O, typename M>
        -:  618:    struct method_context {
        -:  619:        M method;
        -:  620:        O *obj;
        -:  621:
       77:  622:        method_context(O *obj, M method)
       77:  623:            : method(method), obj(obj) {}
        -:  624:
       38:  625:        R operator()() const {
       38:  626:            return (obj->*method)();
        -:  627:        }
        -:  628:    };
        -:  629:
        -:  630:    template <typename F, typename A>
        -:  631:    struct function_context {
        -:  632:        F func;
        -:  633:        A *arg;
        -:  634:
        -:  635:        function_context(F func, A *arg)
        -:  636:            : func(func), arg(arg) {}
        -:  637:
        -:  638:        R operator()() const {
        -:  639:            return func(arg);
        -:  640:        }
        -:  641:    };
        -:  642:};
        -:  643:
        -:  644:/** Callback class based on template specialization
        -:  645: *
        -:  646: * @note Synchronization level: Not protected
        -:  647: */
        -:  648:template <typename R, typename A0>
        -:  649:class Callback<R(A0)> {
        -:  650:public:
        -:  651:    /** Create a Callback with a static function
        -:  652:     *  @param func     Static function to attach
        -:  653:     */
        -:  654:    Callback(R (*func)(A0) = 0) {
        -:  655:        if (!func) {
        -:  656:            memset(this, 0, sizeof(Callback));
        -:  657:        } else {
        -:  658:            generate(func);
        -:  659:        }
        -:  660:    }
        -:  661:
        -:  662:    /** Attach a Callback
        -:  663:     *  @param func     The Callback to attach
        -:  664:     */
        -:  665:    Callback(const Callback<R(A0)> &func) {
        -:  666:        if (func._ops) {
        -:  667:            func._ops->move(this, &func);
        -:  668:        }
        -:  669:        _ops = func._ops;
        -:  670:    }
        -:  671:
        -:  672:    /** Create a Callback with a member function
        -:  673:     *  @param obj      Pointer to object to invoke member function on
        -:  674:     *  @param method   Member function to attach
        -:  675:     */
        -:  676:    template<typename T, typename U>
        -:  677:    Callback(U *obj, R (T::*method)(A0)) {
        -:  678:        generate(method_context<T, R (T::*)(A0)>(obj, method));
        -:  679:    }
        -:  680:
        -:  681:    /** Create a Callback with a member function
        -:  682:     *  @param obj      Pointer to object to invoke member function on
        -:  683:     *  @param method   Member function to attach
        -:  684:     */
        -:  685:    template<typename T, typename U>
        -:  686:    Callback(const U *obj, R (T::*method)(A0) const) {
        -:  687:        generate(method_context<const T, R (T::*)(A0) const>(obj, method));
        -:  688:    }
        -:  689:
        -:  690:    /** Create a Callback with a member function
        -:  691:     *  @param obj      Pointer to object to invoke member function on
        -:  692:     *  @param method   Member function to attach
        -:  693:     */
        -:  694:    template<typename T, typename U>
        -:  695:    Callback(volatile U *obj, R (T::*method)(A0) volatile) {
        -:  696:        generate(method_context<volatile T, R (T::*)(A0) volatile>(obj, method));
        -:  697:    }
        -:  698:
        -:  699:    /** Create a Callback with a member function
        -:  700:     *  @param obj      Pointer to object to invoke member function on
        -:  701:     *  @param method   Member function to attach
        -:  702:     */
        -:  703:    template<typename T, typename U>
        -:  704:    Callback(const volatile U *obj, R (T::*method)(A0) const volatile) {
        -:  705:        generate(method_context<const volatile T, R (T::*)(A0) const volatile>(obj, method));
        -:  706:    }
        -:  707:
        -:  708:    /** Create a Callback with a static function and bound pointer
        -:  709:     *  @param func     Static function to attach
        -:  710:     *  @param arg      Pointer argument to function 
        -:  711:     */
        -:  712:    template<typename T, typename U>
        -:  713:    Callback(R (*func)(T*, A0), U *arg) {
        -:  714:        generate(function_context<R (*)(T*, A0), T>(func, arg));
        -:  715:    }
        -:  716:
        -:  717:    /** Create a Callback with a static function and bound pointer
        -:  718:     *  @param func     Static function to attach
        -:  719:     *  @param arg      Pointer argument to function 
        -:  720:     */
        -:  721:    template<typename T, typename U>
        -:  722:    Callback(R (*func)(const T*, A0), const U *arg) {
        -:  723:        generate(function_context<R (*)(const T*, A0), const T>(func, arg));
        -:  724:    }
        -:  725:
        -:  726:    /** Create a Callback with a static function and bound pointer
        -:  727:     *  @param func     Static function to attach
        -:  728:     *  @param arg      Pointer argument to function 
        -:  729:     */
        -:  730:    template<typename T, typename U>
        -:  731:    Callback(R (*func)(volatile T*, A0), volatile U *arg) {
        -:  732:        generate(function_context<R (*)(volatile T*, A0), volatile T>(func, arg));
        -:  733:    }
        -:  734:
        -:  735:    /** Create a Callback with a static function and bound pointer
        -:  736:     *  @param func     Static function to attach
        -:  737:     *  @param arg      Pointer argument to function 
        -:  738:     */
        -:  739:    template<typename T, typename U>
        -:  740:    Callback(R (*func)(const volatile T*, A0), const volatile U *arg) {
        -:  741:        generate(function_context<R (*)(const volatile T*, A0), const volatile T>(func, arg));
        -:  742:    }
        -:  743:
        -:  744:    /** Create a Callback with a function object
        -:  745:     *  @param f Function object to attach
        -:  746:     *  @note The function object is limited to a single word of storage
        -:  747:     */
        -:  748:    template <typename F>
        -:  749:    Callback(F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0))) {
        -:  750:        generate(f);
        -:  751:    }
        -:  752:
        -:  753:    /** Create a Callback with a function object
        -:  754:     *  @param f Function object to attach
        -:  755:     *  @note The function object is limited to a single word of storage
        -:  756:     */
        -:  757:    template <typename F>
        -:  758:    Callback(const F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0) const)) {
        -:  759:        generate(f);
        -:  760:    }
        -:  761:
        -:  762:    /** Create a Callback with a function object
        -:  763:     *  @param f Function object to attach
        -:  764:     *  @note The function object is limited to a single word of storage
        -:  765:     */
        -:  766:    template <typename F>
        -:  767:    Callback(volatile F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0) volatile)) {
        -:  768:        generate(f);
        -:  769:    }
        -:  770:
        -:  771:    /** Create a Callback with a function object
        -:  772:     *  @param f Function object to attach
        -:  773:     *  @note The function object is limited to a single word of storage
        -:  774:     */
        -:  775:    template <typename F>
        -:  776:    Callback(const volatile F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0) const volatile)) {
        -:  777:        generate(f);
        -:  778:    }
        -:  779:
        -:  780:    /** Create a Callback with a static function and bound pointer
        -:  781:     *  @param obj  Pointer to object to bind to function
        -:  782:     *  @param func Static function to attach
        -:  783:     *  @deprecated
        -:  784:     *      Arguments to callback have been reordered to Callback(func, arg)
        -:  785:     */
        -:  786:    template<typename T, typename U>
        -:  787:    MBED_DEPRECATED_SINCE("mbed-os-5.1",
        -:  788:        "Arguments to callback have been reordered to Callback(func, arg)")
        -:  789:    Callback(U *obj, R (*func)(T*, A0)) {
        -:  790:        new (this) Callback(func, obj);
        -:  791:    }
        -:  792:
        -:  793:    /** Create a Callback with a static function and bound pointer
        -:  794:     *  @param obj  Pointer to object to bind to function
        -:  795:     *  @param func Static function to attach
        -:  796:     *  @deprecated
        -:  797:     *      Arguments to callback have been reordered to Callback(func, arg)
        -:  798:     */
        -:  799:    template<typename T, typename U>
        -:  800:    MBED_DEPRECATED_SINCE("mbed-os-5.1",
        -:  801:        "Arguments to callback have been reordered to Callback(func, arg)")
        -:  802:    Callback(const U *obj, R (*func)(const T*, A0)) {
        -:  803:        new (this) Callback(func, obj);
        -:  804:    }
        -:  805:
        -:  806:    /** Create a Callback with a static function and bound pointer
        -:  807:     *  @param obj  Pointer to object to bind to function
        -:  808:     *  @param func Static function to attach
        -:  809:     *  @deprecated
        -:  810:     *      Arguments to callback have been reordered to Callback(func, arg)
        -:  811:     */
        -:  812:    template<typename T, typename U>
        -:  813:    MBED_DEPRECATED_SINCE("mbed-os-5.1",
        -:  814:        "Arguments to callback have been reordered to Callback(func, arg)")
        -:  815:    Callback(volatile U *obj, R (*func)(volatile T*, A0)) {
        -:  816:        new (this) Callback(func, obj);
        -:  817:    }
        -:  818:
        -:  819:    /** Create a Callback with a static function and bound pointer
        -:  820:     *  @param obj  Pointer to object to bind to function
        -:  821:     *  @param func Static function to attach
        -:  822:     *  @deprecated
        -:  823:     *      Arguments to callback have been reordered to Callback(func, arg)
        -:  824:     */
        -:  825:    template<typename T, typename U>
        -:  826:    MBED_DEPRECATED_SINCE("mbed-os-5.1",
        -:  827:        "Arguments to callback have been reordered to Callback(func, arg)")
        -:  828:    Callback(const volatile U *obj, R (*func)(const volatile T*, A0)) {
        -:  829:        new (this) Callback(func, obj);
        -:  830:    }
        -:  831:
        -:  832:    /** Destroy a callback
        -:  833:     */
        -:  834:    ~Callback() {
        -:  835:        if (_ops) {
        -:  836:            _ops->dtor(this);
        -:  837:        }
        -:  838:    }
        -:  839:
        -:  840:    /** Attach a static function
        -:  841:     *  @param func     Static function to attach
        -:  842:     *  @deprecated
        -:  843:     *      Replaced by simple assignment 'Callback cb = func'
        -:  844:     */
        -:  845:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -:  846:        "Replaced by simple assignment 'Callback cb = func")
        -:  847:    void attach(R (*func)(A0)) {
        -:  848:        this->~Callback();
        -:  849:        new (this) Callback(func);
        -:  850:    }
        -:  851:
        -:  852:    /** Attach a Callback
        -:  853:     *  @param func     The Callback to attach
        -:  854:     *  @deprecated
        -:  855:     *      Replaced by simple assignment 'Callback cb = func'
        -:  856:     */
        -:  857:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -:  858:        "Replaced by simple assignment 'Callback cb = func")
        -:  859:    void attach(const Callback<R(A0)> &func) {
        -:  860:        this->~Callback();
        -:  861:        new (this) Callback(func);
        -:  862:    }
        -:  863:
        -:  864:    /** Attach a member function
        -:  865:     *  @param obj      Pointer to object to invoke member function on
        -:  866:     *  @param method   Member function to attach
        -:  867:     *  @deprecated
        -:  868:     *      Replaced by simple assignment 'Callback cb = func'
        -:  869:     */
        -:  870:    template<typename T, typename U>
        -:  871:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -:  872:        "Replaced by simple assignment 'Callback cb = func")
        -:  873:    void attach(U *obj, R (T::*method)(A0)) {
        -:  874:        this->~Callback();
        -:  875:        new (this) Callback(obj, method);
        -:  876:    }
        -:  877:
        -:  878:    /** Attach a member function
        -:  879:     *  @param obj      Pointer to object to invoke member function on
        -:  880:     *  @param method   Member function to attach
        -:  881:     *  @deprecated
        -:  882:     *      Replaced by simple assignment 'Callback cb = func'
        -:  883:     */
        -:  884:    template<typename T, typename U>
        -:  885:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -:  886:        "Replaced by simple assignment 'Callback cb = func")
        -:  887:    void attach(const U *obj, R (T::*method)(A0) const) {
        -:  888:        this->~Callback();
        -:  889:        new (this) Callback(obj, method);
        -:  890:    }
        -:  891:
        -:  892:    /** Attach a member function
        -:  893:     *  @param obj      Pointer to object to invoke member function on
        -:  894:     *  @param method   Member function to attach
        -:  895:     *  @deprecated
        -:  896:     *      Replaced by simple assignment 'Callback cb = func'
        -:  897:     */
        -:  898:    template<typename T, typename U>
        -:  899:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -:  900:        "Replaced by simple assignment 'Callback cb = func")
        -:  901:    void attach(volatile U *obj, R (T::*method)(A0) volatile) {
        -:  902:        this->~Callback();
        -:  903:        new (this) Callback(obj, method);
        -:  904:    }
        -:  905:
        -:  906:    /** Attach a member function
        -:  907:     *  @param obj      Pointer to object to invoke member function on
        -:  908:     *  @param method   Member function to attach
        -:  909:     *  @deprecated
        -:  910:     *      Replaced by simple assignment 'Callback cb = func'
        -:  911:     */
        -:  912:    template<typename T, typename U>
        -:  913:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -:  914:        "Replaced by simple assignment 'Callback cb = func")
        -:  915:    void attach(const volatile U *obj, R (T::*method)(A0) const volatile) {
        -:  916:        this->~Callback();
        -:  917:        new (this) Callback(obj, method);
        -:  918:    }
        -:  919:
        -:  920:    /** Attach a static function with a bound pointer
        -:  921:     *  @param func     Static function to attach
        -:  922:     *  @param arg      Pointer argument to function
        -:  923:     *  @deprecated
        -:  924:     *      Replaced by simple assignment 'Callback cb = func'
        -:  925:     */
        -:  926:    template <typename T, typename U>
        -:  927:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -:  928:        "Replaced by simple assignment 'Callback cb = func")
        -:  929:    void attach(R (*func)(T*, A0), U *arg) {
        -:  930:        this->~Callback();
        -:  931:        new (this) Callback(func, arg);
        -:  932:    }
        -:  933:
        -:  934:    /** Attach a static function with a bound pointer
        -:  935:     *  @param func     Static function to attach
        -:  936:     *  @param arg      Pointer argument to function
        -:  937:     *  @deprecated
        -:  938:     *      Replaced by simple assignment 'Callback cb = func'
        -:  939:     */
        -:  940:    template <typename T, typename U>
        -:  941:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -:  942:        "Replaced by simple assignment 'Callback cb = func")
        -:  943:    void attach(R (*func)(const T*, A0), const U *arg) {
        -:  944:        this->~Callback();
        -:  945:        new (this) Callback(func, arg);
        -:  946:    }
        -:  947:
        -:  948:    /** Attach a static function with a bound pointer
        -:  949:     *  @param func     Static function to attach
        -:  950:     *  @param arg      Pointer argument to function
        -:  951:     *  @deprecated
        -:  952:     *      Replaced by simple assignment 'Callback cb = func'
        -:  953:     */
        -:  954:    template <typename T, typename U>
        -:  955:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -:  956:        "Replaced by simple assignment 'Callback cb = func")
        -:  957:    void attach(R (*func)(volatile T*, A0), volatile U *arg) {
        -:  958:        this->~Callback();
        -:  959:        new (this) Callback(func, arg);
        -:  960:    }
        -:  961:
        -:  962:    /** Attach a static function with a bound pointer
        -:  963:     *  @param func     Static function to attach
        -:  964:     *  @param arg      Pointer argument to function
        -:  965:     *  @deprecated
        -:  966:     *      Replaced by simple assignment 'Callback cb = func'
        -:  967:     */
        -:  968:    template <typename T, typename U>
        -:  969:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -:  970:        "Replaced by simple assignment 'Callback cb = func")
        -:  971:    void attach(R (*func)(const volatile T*, A0), const volatile U *arg) {
        -:  972:        this->~Callback();
        -:  973:        new (this) Callback(func, arg);
        -:  974:    }
        -:  975:
        -:  976:    /** Attach a function object
        -:  977:     *  @param f Function object to attach
        -:  978:     *  @note The function object is limited to a single word of storage
        -:  979:     *  @deprecated
        -:  980:     *      Replaced by simple assignment 'Callback cb = func'
        -:  981:     */
        -:  982:    template <typename F>
        -:  983:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -:  984:        "Replaced by simple assignment 'Callback cb = func")
        -:  985:    void attach(F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0))) {
        -:  986:        this->~Callback();
        -:  987:        new (this) Callback(f);
        -:  988:    }
        -:  989:
        -:  990:    /** Attach a function object
        -:  991:     *  @param f Function object to attach
        -:  992:     *  @note The function object is limited to a single word of storage
        -:  993:     *  @deprecated
        -:  994:     *      Replaced by simple assignment 'Callback cb = func'
        -:  995:     */
        -:  996:    template <typename F>
        -:  997:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -:  998:        "Replaced by simple assignment 'Callback cb = func")
        -:  999:    void attach(const F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0) const)) {
        -: 1000:        this->~Callback();
        -: 1001:        new (this) Callback(f);
        -: 1002:    }
        -: 1003:
        -: 1004:    /** Attach a function object
        -: 1005:     *  @param f Function object to attach
        -: 1006:     *  @note The function object is limited to a single word of storage
        -: 1007:     *  @deprecated
        -: 1008:     *      Replaced by simple assignment 'Callback cb = func'
        -: 1009:     */
        -: 1010:    template <typename F>
        -: 1011:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -: 1012:        "Replaced by simple assignment 'Callback cb = func")
        -: 1013:    void attach(volatile F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0) volatile)) {
        -: 1014:        this->~Callback();
        -: 1015:        new (this) Callback(f);
        -: 1016:    }
        -: 1017:
        -: 1018:    /** Attach a function object
        -: 1019:     *  @param f Function object to attach
        -: 1020:     *  @note The function object is limited to a single word of storage
        -: 1021:     *  @deprecated
        -: 1022:     *      Replaced by simple assignment 'Callback cb = func'
        -: 1023:     */
        -: 1024:    template <typename F>
        -: 1025:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -: 1026:        "Replaced by simple assignment 'Callback cb = func")
        -: 1027:    void attach(const volatile F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0) const volatile)) {
        -: 1028:        this->~Callback();
        -: 1029:        new (this) Callback(f);
        -: 1030:    }
        -: 1031:
        -: 1032:    /** Attach a static function with a bound pointer
        -: 1033:     *  @param obj  Pointer to object to bind to function
        -: 1034:     *  @param func Static function to attach
        -: 1035:     *  @deprecated
        -: 1036:     *      Arguments to callback have been reordered to attach(func, arg)
        -: 1037:     */
        -: 1038:    template <typename T, typename U>
        -: 1039:    MBED_DEPRECATED_SINCE("mbed-os-5.1",
        -: 1040:        "Arguments to callback have been reordered to attach(func, arg)")
        -: 1041:    void attach(U *obj, R (*func)(T*, A0)) {
        -: 1042:        this->~Callback();
        -: 1043:        new (this) Callback(func, obj);
        -: 1044:    }
        -: 1045:
        -: 1046:    /** Attach a static function with a bound pointer
        -: 1047:     *  @param obj  Pointer to object to bind to function
        -: 1048:     *  @param func Static function to attach
        -: 1049:     *  @deprecated
        -: 1050:     *      Arguments to callback have been reordered to attach(func, arg)
        -: 1051:     */
        -: 1052:    template <typename T, typename U>
        -: 1053:    MBED_DEPRECATED_SINCE("mbed-os-5.1",
        -: 1054:        "Arguments to callback have been reordered to attach(func, arg)")
        -: 1055:    void attach(const U *obj, R (*func)(const T*, A0)) {
        -: 1056:        this->~Callback();
        -: 1057:        new (this) Callback(func, obj);
        -: 1058:    }
        -: 1059:
        -: 1060:    /** Attach a static function with a bound pointer
        -: 1061:     *  @param obj  Pointer to object to bind to function
        -: 1062:     *  @param func Static function to attach
        -: 1063:     *  @deprecated
        -: 1064:     *      Arguments to callback have been reordered to attach(func, arg)
        -: 1065:     */
        -: 1066:    template <typename T, typename U>
        -: 1067:    MBED_DEPRECATED_SINCE("mbed-os-5.1",
        -: 1068:        "Arguments to callback have been reordered to attach(func, arg)")
        -: 1069:    void attach(volatile U *obj, R (*func)(volatile T*, A0)) {
        -: 1070:        this->~Callback();
        -: 1071:        new (this) Callback(func, obj);
        -: 1072:    }
        -: 1073:
        -: 1074:    /** Attach a static function with a bound pointer
        -: 1075:     *  @param obj  Pointer to object to bind to function
        -: 1076:     *  @param func Static function to attach
        -: 1077:     *  @deprecated
        -: 1078:     *      Arguments to callback have been reordered to attach(func, arg)
        -: 1079:     */
        -: 1080:    template <typename T, typename U>
        -: 1081:    MBED_DEPRECATED_SINCE("mbed-os-5.1",
        -: 1082:        "Arguments to callback have been reordered to attach(func, arg)")
        -: 1083:    void attach(const volatile U *obj, R (*func)(const volatile T*, A0)) {
        -: 1084:        this->~Callback();
        -: 1085:        new (this) Callback(func, obj);
        -: 1086:    }
        -: 1087:
        -: 1088:    /** Assign a callback
        -: 1089:     */
        -: 1090:    Callback &operator=(const Callback &that) {
        -: 1091:        if (this != &that) {
        -: 1092:            this->~Callback();
        -: 1093:            new (this) Callback(that);
        -: 1094:        }
        -: 1095:
        -: 1096:        return *this;
        -: 1097:    }
        -: 1098:
        -: 1099:    /** Call the attached function
        -: 1100:     */
        -: 1101:    R call(A0 a0) const {
        -: 1102:        MBED_ASSERT(_ops);
        -: 1103:        return _ops->call(this, a0);
        -: 1104:    }
        -: 1105:
        -: 1106:    /** Call the attached function
        -: 1107:     */
        -: 1108:    R operator()(A0 a0) const {
        -: 1109:        return call(a0);
        -: 1110:    }
        -: 1111:
        -: 1112:    /** Test if function has been attached
        -: 1113:     */
        -: 1114:    operator bool() const {
        -: 1115:        return _ops;
        -: 1116:    }
        -: 1117:
        -: 1118:    /** Test for equality
        -: 1119:     */
        -: 1120:    friend bool operator==(const Callback &l, const Callback &r) {
        -: 1121:        return memcmp(&l, &r, sizeof(Callback)) == 0;
        -: 1122:    }
        -: 1123:
        -: 1124:    /** Test for inequality
        -: 1125:     */
        -: 1126:    friend bool operator!=(const Callback &l, const Callback &r) {
        -: 1127:        return !(l == r);
        -: 1128:    }
        -: 1129:
        -: 1130:    /** Static thunk for passing as C-style function
        -: 1131:     *  @param func Callback to call passed as void pointer
        -: 1132:     *  @param a0 An argument to be called with function func
        -: 1133:     *  @return the value as determined by func which is of 
        -: 1134:     *      type and determined by the signiture of func
        -: 1135:     */
        -: 1136:    static R thunk(void *func, A0 a0) {
        -: 1137:        return static_cast<Callback*>(func)->call(a0);
        -: 1138:    }
        -: 1139:
        -: 1140:private:
        -: 1141:    // Stored as pointer to function and pointer to optional object
        -: 1142:    // Function pointer is stored as union of possible function types
        -: 1143:    // to garuntee proper size and alignment
        -: 1144:    struct _class;
        -: 1145:    union {
        -: 1146:        void (*_staticfunc)(A0);
        -: 1147:        void (*_boundfunc)(_class*, A0);
        -: 1148:        void (_class::*_methodfunc)(A0);
        -: 1149:    } _func;
        -: 1150:    void *_obj;
        -: 1151:
        -: 1152:    // Dynamically dispatched operations
        -: 1153:    const struct ops {
        -: 1154:        R (*call)(const void*, A0);
        -: 1155:        void (*move)(void*, const void*);
        -: 1156:        void (*dtor)(void*);
        -: 1157:    } *_ops;
        -: 1158:
        -: 1159:    // Generate operations for function object
        -: 1160:    template <typename F>
        -: 1161:    void generate(const F &f) {
        -: 1162:        static const ops ops = {
        -: 1163:            &Callback::function_call<F>,
        -: 1164:            &Callback::function_move<F>,
        -: 1165:            &Callback::function_dtor<F>,
        -: 1166:        };
        -: 1167:
        -: 1168:        MBED_STATIC_ASSERT(sizeof(Callback) - sizeof(_ops) >= sizeof(F),
        -: 1169:                "Type F must not exceed the size of the Callback class");
        -: 1170:        memset(this, 0, sizeof(Callback));
        -: 1171:        new (this) F(f);
        -: 1172:        _ops = &ops;
        -: 1173:    }
        -: 1174:
        -: 1175:    // Function attributes
        -: 1176:    template <typename F>
        -: 1177:    static R function_call(const void *p, A0 a0) {
        -: 1178:        return (*(F*)p)(a0);
        -: 1179:    }
        -: 1180:
        -: 1181:    template <typename F>
        -: 1182:    static void function_move(void *d, const void *p) {
        -: 1183:        new (d) F(*(F*)p);
        -: 1184:    }
        -: 1185:
        -: 1186:    template <typename F>
        -: 1187:    static void function_dtor(void *p) {
        -: 1188:        ((F*)p)->~F();
        -: 1189:    }
        -: 1190:
        -: 1191:    // Wrappers for functions with context
        -: 1192:    template <typename O, typename M>
        -: 1193:    struct method_context {
        -: 1194:        M method;
        -: 1195:        O *obj;
        -: 1196:
        -: 1197:        method_context(O *obj, M method)
        -: 1198:            : method(method), obj(obj) {}
        -: 1199:
        -: 1200:        R operator()(A0 a0) const {
        -: 1201:            return (obj->*method)(a0);
        -: 1202:        }
        -: 1203:    };
        -: 1204:
        -: 1205:    template <typename F, typename A>
        -: 1206:    struct function_context {
        -: 1207:        F func;
        -: 1208:        A *arg;
        -: 1209:
        -: 1210:        function_context(F func, A *arg)
        -: 1211:            : func(func), arg(arg) {}
        -: 1212:
        -: 1213:        R operator()(A0 a0) const {
        -: 1214:            return func(arg, a0);
        -: 1215:        }
        -: 1216:    };
        -: 1217:};
        -: 1218:
        -: 1219:/** Callback class based on template specialization
        -: 1220: *
        -: 1221: * @note Synchronization level: Not protected
        -: 1222: */
        -: 1223:template <typename R, typename A0, typename A1>
        -: 1224:class Callback<R(A0, A1)> {
        -: 1225:public:
        -: 1226:    /** Create a Callback with a static function
        -: 1227:     *  @param func     Static function to attach
        -: 1228:     */
        -: 1229:    Callback(R (*func)(A0, A1) = 0) {
        -: 1230:        if (!func) {
        -: 1231:            memset(this, 0, sizeof(Callback));
        -: 1232:        } else {
        -: 1233:            generate(func);
        -: 1234:        }
        -: 1235:    }
        -: 1236:
        -: 1237:    /** Attach a Callback
        -: 1238:     *  @param func     The Callback to attach
        -: 1239:     */
        -: 1240:    Callback(const Callback<R(A0, A1)> &func) {
        -: 1241:        if (func._ops) {
        -: 1242:            func._ops->move(this, &func);
        -: 1243:        }
        -: 1244:        _ops = func._ops;
        -: 1245:    }
        -: 1246:
        -: 1247:    /** Create a Callback with a member function
        -: 1248:     *  @param obj      Pointer to object to invoke member function on
        -: 1249:     *  @param method   Member function to attach
        -: 1250:     */
        -: 1251:    template<typename T, typename U>
        -: 1252:    Callback(U *obj, R (T::*method)(A0, A1)) {
        -: 1253:        generate(method_context<T, R (T::*)(A0, A1)>(obj, method));
        -: 1254:    }
        -: 1255:
        -: 1256:    /** Create a Callback with a member function
        -: 1257:     *  @param obj      Pointer to object to invoke member function on
        -: 1258:     *  @param method   Member function to attach
        -: 1259:     */
        -: 1260:    template<typename T, typename U>
        -: 1261:    Callback(const U *obj, R (T::*method)(A0, A1) const) {
        -: 1262:        generate(method_context<const T, R (T::*)(A0, A1) const>(obj, method));
        -: 1263:    }
        -: 1264:
        -: 1265:    /** Create a Callback with a member function
        -: 1266:     *  @param obj      Pointer to object to invoke member function on
        -: 1267:     *  @param method   Member function to attach
        -: 1268:     */
        -: 1269:    template<typename T, typename U>
        -: 1270:    Callback(volatile U *obj, R (T::*method)(A0, A1) volatile) {
        -: 1271:        generate(method_context<volatile T, R (T::*)(A0, A1) volatile>(obj, method));
        -: 1272:    }
        -: 1273:
        -: 1274:    /** Create a Callback with a member function
        -: 1275:     *  @param obj      Pointer to object to invoke member function on
        -: 1276:     *  @param method   Member function to attach
        -: 1277:     */
        -: 1278:    template<typename T, typename U>
        -: 1279:    Callback(const volatile U *obj, R (T::*method)(A0, A1) const volatile) {
        -: 1280:        generate(method_context<const volatile T, R (T::*)(A0, A1) const volatile>(obj, method));
        -: 1281:    }
        -: 1282:
        -: 1283:    /** Create a Callback with a static function and bound pointer
        -: 1284:     *  @param func     Static function to attach
        -: 1285:     *  @param arg      Pointer argument to function 
        -: 1286:     */
        -: 1287:    template<typename T, typename U>
        -: 1288:    Callback(R (*func)(T*, A0, A1), U *arg) {
        -: 1289:        generate(function_context<R (*)(T*, A0, A1), T>(func, arg));
        -: 1290:    }
        -: 1291:
        -: 1292:    /** Create a Callback with a static function and bound pointer
        -: 1293:     *  @param func     Static function to attach
        -: 1294:     *  @param arg      Pointer argument to function 
        -: 1295:     */
        -: 1296:    template<typename T, typename U>
        -: 1297:    Callback(R (*func)(const T*, A0, A1), const U *arg) {
        -: 1298:        generate(function_context<R (*)(const T*, A0, A1), const T>(func, arg));
        -: 1299:    }
        -: 1300:
        -: 1301:    /** Create a Callback with a static function and bound pointer
        -: 1302:     *  @param func     Static function to attach
        -: 1303:     *  @param arg      Pointer argument to function 
        -: 1304:     */
        -: 1305:    template<typename T, typename U>
        -: 1306:    Callback(R (*func)(volatile T*, A0, A1), volatile U *arg) {
        -: 1307:        generate(function_context<R (*)(volatile T*, A0, A1), volatile T>(func, arg));
        -: 1308:    }
        -: 1309:
        -: 1310:    /** Create a Callback with a static function and bound pointer
        -: 1311:     *  @param func     Static function to attach
        -: 1312:     *  @param arg      Pointer argument to function 
        -: 1313:     */
        -: 1314:    template<typename T, typename U>
        -: 1315:    Callback(R (*func)(const volatile T*, A0, A1), const volatile U *arg) {
        -: 1316:        generate(function_context<R (*)(const volatile T*, A0, A1), const volatile T>(func, arg));
        -: 1317:    }
        -: 1318:
        -: 1319:    /** Create a Callback with a function object
        -: 1320:     *  @param f Function object to attach
        -: 1321:     *  @note The function object is limited to a single word of storage
        -: 1322:     */
        -: 1323:    template <typename F>
        -: 1324:    Callback(F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0, A1))) {
        -: 1325:        generate(f);
        -: 1326:    }
        -: 1327:
        -: 1328:    /** Create a Callback with a function object
        -: 1329:     *  @param f Function object to attach
        -: 1330:     *  @note The function object is limited to a single word of storage
        -: 1331:     */
        -: 1332:    template <typename F>
        -: 1333:    Callback(const F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0, A1) const)) {
        -: 1334:        generate(f);
        -: 1335:    }
        -: 1336:
        -: 1337:    /** Create a Callback with a function object
        -: 1338:     *  @param f Function object to attach
        -: 1339:     *  @note The function object is limited to a single word of storage
        -: 1340:     */
        -: 1341:    template <typename F>
        -: 1342:    Callback(volatile F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0, A1) volatile)) {
        -: 1343:        generate(f);
        -: 1344:    }
        -: 1345:
        -: 1346:    /** Create a Callback with a function object
        -: 1347:     *  @param f Function object to attach
        -: 1348:     *  @note The function object is limited to a single word of storage
        -: 1349:     */
        -: 1350:    template <typename F>
        -: 1351:    Callback(const volatile F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0, A1) const volatile)) {
        -: 1352:        generate(f);
        -: 1353:    }
        -: 1354:
        -: 1355:    /** Create a Callback with a static function and bound pointer
        -: 1356:     *  @param obj  Pointer to object to bind to function
        -: 1357:     *  @param func Static function to attach
        -: 1358:     *  @deprecated
        -: 1359:     *      Arguments to callback have been reordered to Callback(func, arg)
        -: 1360:     */
        -: 1361:    template<typename T, typename U>
        -: 1362:    MBED_DEPRECATED_SINCE("mbed-os-5.1",
        -: 1363:        "Arguments to callback have been reordered to Callback(func, arg)")
        -: 1364:    Callback(U *obj, R (*func)(T*, A0, A1)) {
        -: 1365:        new (this) Callback(func, obj);
        -: 1366:    }
        -: 1367:
        -: 1368:    /** Create a Callback with a static function and bound pointer
        -: 1369:     *  @param obj  Pointer to object to bind to function
        -: 1370:     *  @param func Static function to attach
        -: 1371:     *  @deprecated
        -: 1372:     *      Arguments to callback have been reordered to Callback(func, arg)
        -: 1373:     */
        -: 1374:    template<typename T, typename U>
        -: 1375:    MBED_DEPRECATED_SINCE("mbed-os-5.1",
        -: 1376:        "Arguments to callback have been reordered to Callback(func, arg)")
        -: 1377:    Callback(const U *obj, R (*func)(const T*, A0, A1)) {
        -: 1378:        new (this) Callback(func, obj);
        -: 1379:    }
        -: 1380:
        -: 1381:    /** Create a Callback with a static function and bound pointer
        -: 1382:     *  @param obj  Pointer to object to bind to function
        -: 1383:     *  @param func Static function to attach
        -: 1384:     *  @deprecated
        -: 1385:     *      Arguments to callback have been reordered to Callback(func, arg)
        -: 1386:     */
        -: 1387:    template<typename T, typename U>
        -: 1388:    MBED_DEPRECATED_SINCE("mbed-os-5.1",
        -: 1389:        "Arguments to callback have been reordered to Callback(func, arg)")
        -: 1390:    Callback(volatile U *obj, R (*func)(volatile T*, A0, A1)) {
        -: 1391:        new (this) Callback(func, obj);
        -: 1392:    }
        -: 1393:
        -: 1394:    /** Create a Callback with a static function and bound pointer
        -: 1395:     *  @param obj  Pointer to object to bind to function
        -: 1396:     *  @param func Static function to attach
        -: 1397:     *  @deprecated
        -: 1398:     *      Arguments to callback have been reordered to Callback(func, arg)
        -: 1399:     */
        -: 1400:    template<typename T, typename U>
        -: 1401:    MBED_DEPRECATED_SINCE("mbed-os-5.1",
        -: 1402:        "Arguments to callback have been reordered to Callback(func, arg)")
        -: 1403:    Callback(const volatile U *obj, R (*func)(const volatile T*, A0, A1)) {
        -: 1404:        new (this) Callback(func, obj);
        -: 1405:    }
        -: 1406:
        -: 1407:    /** Destroy a callback
        -: 1408:     */
        -: 1409:    ~Callback() {
        -: 1410:        if (_ops) {
        -: 1411:            _ops->dtor(this);
        -: 1412:        }
        -: 1413:    }
        -: 1414:
        -: 1415:    /** Attach a static function
        -: 1416:     *  @param func     Static function to attach
        -: 1417:     *  @deprecated
        -: 1418:     *      Replaced by simple assignment 'Callback cb = func'
        -: 1419:     */
        -: 1420:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -: 1421:        "Replaced by simple assignment 'Callback cb = func")
        -: 1422:    void attach(R (*func)(A0, A1)) {
        -: 1423:        this->~Callback();
        -: 1424:        new (this) Callback(func);
        -: 1425:    }
        -: 1426:
        -: 1427:    /** Attach a Callback
        -: 1428:     *  @param func     The Callback to attach
        -: 1429:     *  @deprecated
        -: 1430:     *      Replaced by simple assignment 'Callback cb = func'
        -: 1431:     */
        -: 1432:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -: 1433:        "Replaced by simple assignment 'Callback cb = func")
        -: 1434:    void attach(const Callback<R(A0, A1)> &func) {
        -: 1435:        this->~Callback();
        -: 1436:        new (this) Callback(func);
        -: 1437:    }
        -: 1438:
        -: 1439:    /** Attach a member function
        -: 1440:     *  @param obj      Pointer to object to invoke member function on
        -: 1441:     *  @param method   Member function to attach
        -: 1442:     *  @deprecated
        -: 1443:     *      Replaced by simple assignment 'Callback cb = func'
        -: 1444:     */
        -: 1445:    template<typename T, typename U>
        -: 1446:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -: 1447:        "Replaced by simple assignment 'Callback cb = func")
        -: 1448:    void attach(U *obj, R (T::*method)(A0, A1)) {
        -: 1449:        this->~Callback();
        -: 1450:        new (this) Callback(obj, method);
        -: 1451:    }
        -: 1452:
        -: 1453:    /** Attach a member function
        -: 1454:     *  @param obj      Pointer to object to invoke member function on
        -: 1455:     *  @param method   Member function to attach
        -: 1456:     *  @deprecated
        -: 1457:     *      Replaced by simple assignment 'Callback cb = func'
        -: 1458:     */
        -: 1459:    template<typename T, typename U>
        -: 1460:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -: 1461:        "Replaced by simple assignment 'Callback cb = func")
        -: 1462:    void attach(const U *obj, R (T::*method)(A0, A1) const) {
        -: 1463:        this->~Callback();
        -: 1464:        new (this) Callback(obj, method);
        -: 1465:    }
        -: 1466:
        -: 1467:    /** Attach a member function
        -: 1468:     *  @param obj      Pointer to object to invoke member function on
        -: 1469:     *  @param method   Member function to attach
        -: 1470:     *  @deprecated
        -: 1471:     *      Replaced by simple assignment 'Callback cb = func'
        -: 1472:     */
        -: 1473:    template<typename T, typename U>
        -: 1474:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -: 1475:        "Replaced by simple assignment 'Callback cb = func")
        -: 1476:    void attach(volatile U *obj, R (T::*method)(A0, A1) volatile) {
        -: 1477:        this->~Callback();
        -: 1478:        new (this) Callback(obj, method);
        -: 1479:    }
        -: 1480:
        -: 1481:    /** Attach a member function
        -: 1482:     *  @param obj      Pointer to object to invoke member function on
        -: 1483:     *  @param method   Member function to attach
        -: 1484:     *  @deprecated
        -: 1485:     *      Replaced by simple assignment 'Callback cb = func'
        -: 1486:     */
        -: 1487:    template<typename T, typename U>
        -: 1488:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -: 1489:        "Replaced by simple assignment 'Callback cb = func")
        -: 1490:    void attach(const volatile U *obj, R (T::*method)(A0, A1) const volatile) {
        -: 1491:        this->~Callback();
        -: 1492:        new (this) Callback(obj, method);
        -: 1493:    }
        -: 1494:
        -: 1495:    /** Attach a static function with a bound pointer
        -: 1496:     *  @param func     Static function to attach
        -: 1497:     *  @param arg      Pointer argument to function
        -: 1498:     *  @deprecated
        -: 1499:     *      Replaced by simple assignment 'Callback cb = func'
        -: 1500:     */
        -: 1501:    template <typename T, typename U>
        -: 1502:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -: 1503:        "Replaced by simple assignment 'Callback cb = func")
        -: 1504:    void attach(R (*func)(T*, A0, A1), U *arg) {
        -: 1505:        this->~Callback();
        -: 1506:        new (this) Callback(func, arg);
        -: 1507:    }
        -: 1508:
        -: 1509:    /** Attach a static function with a bound pointer
        -: 1510:     *  @param func     Static function to attach
        -: 1511:     *  @param arg      Pointer argument to function
        -: 1512:     *  @deprecated
        -: 1513:     *      Replaced by simple assignment 'Callback cb = func'
        -: 1514:     */
        -: 1515:    template <typename T, typename U>
        -: 1516:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -: 1517:        "Replaced by simple assignment 'Callback cb = func")
        -: 1518:    void attach(R (*func)(const T*, A0, A1), const U *arg) {
        -: 1519:        this->~Callback();
        -: 1520:        new (this) Callback(func, arg);
        -: 1521:    }
        -: 1522:
        -: 1523:    /** Attach a static function with a bound pointer
        -: 1524:     *  @param func     Static function to attach
        -: 1525:     *  @param arg      Pointer argument to function
        -: 1526:     *  @deprecated
        -: 1527:     *      Replaced by simple assignment 'Callback cb = func'
        -: 1528:     */
        -: 1529:    template <typename T, typename U>
        -: 1530:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -: 1531:        "Replaced by simple assignment 'Callback cb = func")
        -: 1532:    void attach(R (*func)(volatile T*, A0, A1), volatile U *arg) {
        -: 1533:        this->~Callback();
        -: 1534:        new (this) Callback(func, arg);
        -: 1535:    }
        -: 1536:
        -: 1537:    /** Attach a static function with a bound pointer
        -: 1538:     *  @param func     Static function to attach
        -: 1539:     *  @param arg      Pointer argument to function
        -: 1540:     *  @deprecated
        -: 1541:     *      Replaced by simple assignment 'Callback cb = func'
        -: 1542:     */
        -: 1543:    template <typename T, typename U>
        -: 1544:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -: 1545:        "Replaced by simple assignment 'Callback cb = func")
        -: 1546:    void attach(R (*func)(const volatile T*, A0, A1), const volatile U *arg) {
        -: 1547:        this->~Callback();
        -: 1548:        new (this) Callback(func, arg);
        -: 1549:    }
        -: 1550:
        -: 1551:    /** Attach a function object
        -: 1552:     *  @param f Function object to attach
        -: 1553:     *  @note The function object is limited to a single word of storage
        -: 1554:     *  @deprecated
        -: 1555:     *      Replaced by simple assignment 'Callback cb = func'
        -: 1556:     */
        -: 1557:    template <typename F>
        -: 1558:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -: 1559:        "Replaced by simple assignment 'Callback cb = func")
        -: 1560:    void attach(F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0, A1))) {
        -: 1561:        this->~Callback();
        -: 1562:        new (this) Callback(f);
        -: 1563:    }
        -: 1564:
        -: 1565:    /** Attach a function object
        -: 1566:     *  @param f Function object to attach
        -: 1567:     *  @note The function object is limited to a single word of storage
        -: 1568:     *  @deprecated
        -: 1569:     *      Replaced by simple assignment 'Callback cb = func'
        -: 1570:     */
        -: 1571:    template <typename F>
        -: 1572:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -: 1573:        "Replaced by simple assignment 'Callback cb = func")
        -: 1574:    void attach(const F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0, A1) const)) {
        -: 1575:        this->~Callback();
        -: 1576:        new (this) Callback(f);
        -: 1577:    }
        -: 1578:
        -: 1579:    /** Attach a function object
        -: 1580:     *  @param f Function object to attach
        -: 1581:     *  @note The function object is limited to a single word of storage
        -: 1582:     *  @deprecated
        -: 1583:     *      Replaced by simple assignment 'Callback cb = func'
        -: 1584:     */
        -: 1585:    template <typename F>
        -: 1586:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -: 1587:        "Replaced by simple assignment 'Callback cb = func")
        -: 1588:    void attach(volatile F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0, A1) volatile)) {
        -: 1589:        this->~Callback();
        -: 1590:        new (this) Callback(f);
        -: 1591:    }
        -: 1592:
        -: 1593:    /** Attach a function object
        -: 1594:     *  @param f Function object to attach
        -: 1595:     *  @note The function object is limited to a single word of storage
        -: 1596:     *  @deprecated
        -: 1597:     *      Replaced by simple assignment 'Callback cb = func'
        -: 1598:     */
        -: 1599:    template <typename F>
        -: 1600:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -: 1601:        "Replaced by simple assignment 'Callback cb = func")
        -: 1602:    void attach(const volatile F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0, A1) const volatile)) {
        -: 1603:        this->~Callback();
        -: 1604:        new (this) Callback(f);
        -: 1605:    }
        -: 1606:
        -: 1607:    /** Attach a static function with a bound pointer
        -: 1608:     *  @param obj  Pointer to object to bind to function
        -: 1609:     *  @param func Static function to attach
        -: 1610:     *  @deprecated
        -: 1611:     *      Arguments to callback have been reordered to attach(func, arg)
        -: 1612:     */
        -: 1613:    template <typename T, typename U>
        -: 1614:    MBED_DEPRECATED_SINCE("mbed-os-5.1",
        -: 1615:        "Arguments to callback have been reordered to attach(func, arg)")
        -: 1616:    void attach(U *obj, R (*func)(T*, A0, A1)) {
        -: 1617:        this->~Callback();
        -: 1618:        new (this) Callback(func, obj);
        -: 1619:    }
        -: 1620:
        -: 1621:    /** Attach a static function with a bound pointer
        -: 1622:     *  @param obj  Pointer to object to bind to function
        -: 1623:     *  @param func Static function to attach
        -: 1624:     *  @deprecated
        -: 1625:     *      Arguments to callback have been reordered to attach(func, arg)
        -: 1626:     */
        -: 1627:    template <typename T, typename U>
        -: 1628:    MBED_DEPRECATED_SINCE("mbed-os-5.1",
        -: 1629:        "Arguments to callback have been reordered to attach(func, arg)")
        -: 1630:    void attach(const U *obj, R (*func)(const T*, A0, A1)) {
        -: 1631:        this->~Callback();
        -: 1632:        new (this) Callback(func, obj);
        -: 1633:    }
        -: 1634:
        -: 1635:    /** Attach a static function with a bound pointer
        -: 1636:     *  @param obj  Pointer to object to bind to function
        -: 1637:     *  @param func Static function to attach
        -: 1638:     *  @deprecated
        -: 1639:     *      Arguments to callback have been reordered to attach(func, arg)
        -: 1640:     */
        -: 1641:    template <typename T, typename U>
        -: 1642:    MBED_DEPRECATED_SINCE("mbed-os-5.1",
        -: 1643:        "Arguments to callback have been reordered to attach(func, arg)")
        -: 1644:    void attach(volatile U *obj, R (*func)(volatile T*, A0, A1)) {
        -: 1645:        this->~Callback();
        -: 1646:        new (this) Callback(func, obj);
        -: 1647:    }
        -: 1648:
        -: 1649:    /** Attach a static function with a bound pointer
        -: 1650:     *  @param obj  Pointer to object to bind to function
        -: 1651:     *  @param func Static function to attach
        -: 1652:     *  @deprecated
        -: 1653:     *      Arguments to callback have been reordered to attach(func, arg)
        -: 1654:     */
        -: 1655:    template <typename T, typename U>
        -: 1656:    MBED_DEPRECATED_SINCE("mbed-os-5.1",
        -: 1657:        "Arguments to callback have been reordered to attach(func, arg)")
        -: 1658:    void attach(const volatile U *obj, R (*func)(const volatile T*, A0, A1)) {
        -: 1659:        this->~Callback();
        -: 1660:        new (this) Callback(func, obj);
        -: 1661:    }
        -: 1662:
        -: 1663:    /** Assign a callback
        -: 1664:     */
        -: 1665:    Callback &operator=(const Callback &that) {
        -: 1666:        if (this != &that) {
        -: 1667:            this->~Callback();
        -: 1668:            new (this) Callback(that);
        -: 1669:        }
        -: 1670:
        -: 1671:        return *this;
        -: 1672:    }
        -: 1673:
        -: 1674:    /** Call the attached function
        -: 1675:     */
        -: 1676:    R call(A0 a0, A1 a1) const {
        -: 1677:        MBED_ASSERT(_ops);
        -: 1678:        return _ops->call(this, a0, a1);
        -: 1679:    }
        -: 1680:
        -: 1681:    /** Call the attached function
        -: 1682:     */
        -: 1683:    R operator()(A0 a0, A1 a1) const {
        -: 1684:        return call(a0, a1);
        -: 1685:    }
        -: 1686:
        -: 1687:    /** Test if function has been attached
        -: 1688:     */
        -: 1689:    operator bool() const {
        -: 1690:        return _ops;
        -: 1691:    }
        -: 1692:
        -: 1693:    /** Test for equality
        -: 1694:     */
        -: 1695:    friend bool operator==(const Callback &l, const Callback &r) {
        -: 1696:        return memcmp(&l, &r, sizeof(Callback)) == 0;
        -: 1697:    }
        -: 1698:
        -: 1699:    /** Test for inequality
        -: 1700:     */
        -: 1701:    friend bool operator!=(const Callback &l, const Callback &r) {
        -: 1702:        return !(l == r);
        -: 1703:    }
        -: 1704:
        -: 1705:    /** Static thunk for passing as C-style function
        -: 1706:     *  @param func Callback to call passed as void pointer
        -: 1707:     *  @param a0 An argument to be called with function func
        -: 1708:     *  @param a1 An argument to be called with function func
        -: 1709:     *  @return the value as determined by func which is of 
        -: 1710:     *      type and determined by the signiture of func
        -: 1711:     */
        -: 1712:    static R thunk(void *func, A0 a0, A1 a1) {
        -: 1713:        return static_cast<Callback*>(func)->call(a0, a1);
        -: 1714:    }
        -: 1715:
        -: 1716:private:
        -: 1717:    // Stored as pointer to function and pointer to optional object
        -: 1718:    // Function pointer is stored as union of possible function types
        -: 1719:    // to garuntee proper size and alignment
        -: 1720:    struct _class;
        -: 1721:    union {
        -: 1722:        void (*_staticfunc)(A0, A1);
        -: 1723:        void (*_boundfunc)(_class*, A0, A1);
        -: 1724:        void (_class::*_methodfunc)(A0, A1);
        -: 1725:    } _func;
        -: 1726:    void *_obj;
        -: 1727:
        -: 1728:    // Dynamically dispatched operations
        -: 1729:    const struct ops {
        -: 1730:        R (*call)(const void*, A0, A1);
        -: 1731:        void (*move)(void*, const void*);
        -: 1732:        void (*dtor)(void*);
        -: 1733:    } *_ops;
        -: 1734:
        -: 1735:    // Generate operations for function object
        -: 1736:    template <typename F>
        -: 1737:    void generate(const F &f) {
        -: 1738:        static const ops ops = {
        -: 1739:            &Callback::function_call<F>,
        -: 1740:            &Callback::function_move<F>,
        -: 1741:            &Callback::function_dtor<F>,
        -: 1742:        };
        -: 1743:
        -: 1744:        MBED_STATIC_ASSERT(sizeof(Callback) - sizeof(_ops) >= sizeof(F),
        -: 1745:                "Type F must not exceed the size of the Callback class");
        -: 1746:        memset(this, 0, sizeof(Callback));
        -: 1747:        new (this) F(f);
        -: 1748:        _ops = &ops;
        -: 1749:    }
        -: 1750:
        -: 1751:    // Function attributes
        -: 1752:    template <typename F>
        -: 1753:    static R function_call(const void *p, A0 a0, A1 a1) {
        -: 1754:        return (*(F*)p)(a0, a1);
        -: 1755:    }
        -: 1756:
        -: 1757:    template <typename F>
        -: 1758:    static void function_move(void *d, const void *p) {
        -: 1759:        new (d) F(*(F*)p);
        -: 1760:    }
        -: 1761:
        -: 1762:    template <typename F>
        -: 1763:    static void function_dtor(void *p) {
        -: 1764:        ((F*)p)->~F();
        -: 1765:    }
        -: 1766:
        -: 1767:    // Wrappers for functions with context
        -: 1768:    template <typename O, typename M>
        -: 1769:    struct method_context {
        -: 1770:        M method;
        -: 1771:        O *obj;
        -: 1772:
        -: 1773:        method_context(O *obj, M method)
        -: 1774:            : method(method), obj(obj) {}
        -: 1775:
        -: 1776:        R operator()(A0 a0, A1 a1) const {
        -: 1777:            return (obj->*method)(a0, a1);
        -: 1778:        }
        -: 1779:    };
        -: 1780:
        -: 1781:    template <typename F, typename A>
        -: 1782:    struct function_context {
        -: 1783:        F func;
        -: 1784:        A *arg;
        -: 1785:
        -: 1786:        function_context(F func, A *arg)
        -: 1787:            : func(func), arg(arg) {}
        -: 1788:
        -: 1789:        R operator()(A0 a0, A1 a1) const {
        -: 1790:            return func(arg, a0, a1);
        -: 1791:        }
        -: 1792:    };
        -: 1793:};
        -: 1794:
        -: 1795:/** Callback class based on template specialization
        -: 1796: *
        -: 1797: * @note Synchronization level: Not protected
        -: 1798: */
        -: 1799:template <typename R, typename A0, typename A1, typename A2>
        -: 1800:class Callback<R(A0, A1, A2)> {
        -: 1801:public:
        -: 1802:    /** Create a Callback with a static function
        -: 1803:     *  @param func     Static function to attach
        -: 1804:     */
        -: 1805:    Callback(R (*func)(A0, A1, A2) = 0) {
        -: 1806:        if (!func) {
        -: 1807:            memset(this, 0, sizeof(Callback));
        -: 1808:        } else {
        -: 1809:            generate(func);
        -: 1810:        }
        -: 1811:    }
        -: 1812:
        -: 1813:    /** Attach a Callback
        -: 1814:     *  @param func     The Callback to attach
        -: 1815:     */
        -: 1816:    Callback(const Callback<R(A0, A1, A2)> &func) {
        -: 1817:        if (func._ops) {
        -: 1818:            func._ops->move(this, &func);
        -: 1819:        }
        -: 1820:        _ops = func._ops;
        -: 1821:    }
        -: 1822:
        -: 1823:    /** Create a Callback with a member function
        -: 1824:     *  @param obj      Pointer to object to invoke member function on
        -: 1825:     *  @param method   Member function to attach
        -: 1826:     */
        -: 1827:    template<typename T, typename U>
        -: 1828:    Callback(U *obj, R (T::*method)(A0, A1, A2)) {
        -: 1829:        generate(method_context<T, R (T::*)(A0, A1, A2)>(obj, method));
        -: 1830:    }
        -: 1831:
        -: 1832:    /** Create a Callback with a member function
        -: 1833:     *  @param obj      Pointer to object to invoke member function on
        -: 1834:     *  @param method   Member function to attach
        -: 1835:     */
        -: 1836:    template<typename T, typename U>
        -: 1837:    Callback(const U *obj, R (T::*method)(A0, A1, A2) const) {
        -: 1838:        generate(method_context<const T, R (T::*)(A0, A1, A2) const>(obj, method));
        -: 1839:    }
        -: 1840:
        -: 1841:    /** Create a Callback with a member function
        -: 1842:     *  @param obj      Pointer to object to invoke member function on
        -: 1843:     *  @param method   Member function to attach
        -: 1844:     */
        -: 1845:    template<typename T, typename U>
        -: 1846:    Callback(volatile U *obj, R (T::*method)(A0, A1, A2) volatile) {
        -: 1847:        generate(method_context<volatile T, R (T::*)(A0, A1, A2) volatile>(obj, method));
        -: 1848:    }
        -: 1849:
        -: 1850:    /** Create a Callback with a member function
        -: 1851:     *  @param obj      Pointer to object to invoke member function on
        -: 1852:     *  @param method   Member function to attach
        -: 1853:     */
        -: 1854:    template<typename T, typename U>
        -: 1855:    Callback(const volatile U *obj, R (T::*method)(A0, A1, A2) const volatile) {
        -: 1856:        generate(method_context<const volatile T, R (T::*)(A0, A1, A2) const volatile>(obj, method));
        -: 1857:    }
        -: 1858:
        -: 1859:    /** Create a Callback with a static function and bound pointer
        -: 1860:     *  @param func     Static function to attach
        -: 1861:     *  @param arg      Pointer argument to function 
        -: 1862:     */
        -: 1863:    template<typename T, typename U>
        -: 1864:    Callback(R (*func)(T*, A0, A1, A2), U *arg) {
        -: 1865:        generate(function_context<R (*)(T*, A0, A1, A2), T>(func, arg));
        -: 1866:    }
        -: 1867:
        -: 1868:    /** Create a Callback with a static function and bound pointer
        -: 1869:     *  @param func     Static function to attach
        -: 1870:     *  @param arg      Pointer argument to function 
        -: 1871:     */
        -: 1872:    template<typename T, typename U>
        -: 1873:    Callback(R (*func)(const T*, A0, A1, A2), const U *arg) {
        -: 1874:        generate(function_context<R (*)(const T*, A0, A1, A2), const T>(func, arg));
        -: 1875:    }
        -: 1876:
        -: 1877:    /** Create a Callback with a static function and bound pointer
        -: 1878:     *  @param func     Static function to attach
        -: 1879:     *  @param arg      Pointer argument to function 
        -: 1880:     */
        -: 1881:    template<typename T, typename U>
        -: 1882:    Callback(R (*func)(volatile T*, A0, A1, A2), volatile U *arg) {
        -: 1883:        generate(function_context<R (*)(volatile T*, A0, A1, A2), volatile T>(func, arg));
        -: 1884:    }
        -: 1885:
        -: 1886:    /** Create a Callback with a static function and bound pointer
        -: 1887:     *  @param func     Static function to attach
        -: 1888:     *  @param arg      Pointer argument to function 
        -: 1889:     */
        -: 1890:    template<typename T, typename U>
        -: 1891:    Callback(R (*func)(const volatile T*, A0, A1, A2), const volatile U *arg) {
        -: 1892:        generate(function_context<R (*)(const volatile T*, A0, A1, A2), const volatile T>(func, arg));
        -: 1893:    }
        -: 1894:
        -: 1895:    /** Create a Callback with a function object
        -: 1896:     *  @param f Function object to attach
        -: 1897:     *  @note The function object is limited to a single word of storage
        -: 1898:     */
        -: 1899:    template <typename F>
        -: 1900:    Callback(F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0, A1, A2))) {
        -: 1901:        generate(f);
        -: 1902:    }
        -: 1903:
        -: 1904:    /** Create a Callback with a function object
        -: 1905:     *  @param f Function object to attach
        -: 1906:     *  @note The function object is limited to a single word of storage
        -: 1907:     */
        -: 1908:    template <typename F>
        -: 1909:    Callback(const F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0, A1, A2) const)) {
        -: 1910:        generate(f);
        -: 1911:    }
        -: 1912:
        -: 1913:    /** Create a Callback with a function object
        -: 1914:     *  @param f Function object to attach
        -: 1915:     *  @note The function object is limited to a single word of storage
        -: 1916:     */
        -: 1917:    template <typename F>
        -: 1918:    Callback(volatile F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0, A1, A2) volatile)) {
        -: 1919:        generate(f);
        -: 1920:    }
        -: 1921:
        -: 1922:    /** Create a Callback with a function object
        -: 1923:     *  @param f Function object to attach
        -: 1924:     *  @note The function object is limited to a single word of storage
        -: 1925:     */
        -: 1926:    template <typename F>
        -: 1927:    Callback(const volatile F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0, A1, A2) const volatile)) {
        -: 1928:        generate(f);
        -: 1929:    }
        -: 1930:
        -: 1931:    /** Create a Callback with a static function and bound pointer
        -: 1932:     *  @param obj  Pointer to object to bind to function
        -: 1933:     *  @param func Static function to attach
        -: 1934:     *  @deprecated
        -: 1935:     *      Arguments to callback have been reordered to Callback(func, arg)
        -: 1936:     */
        -: 1937:    template<typename T, typename U>
        -: 1938:    MBED_DEPRECATED_SINCE("mbed-os-5.1",
        -: 1939:        "Arguments to callback have been reordered to Callback(func, arg)")
        -: 1940:    Callback(U *obj, R (*func)(T*, A0, A1, A2)) {
        -: 1941:        new (this) Callback(func, obj);
        -: 1942:    }
        -: 1943:
        -: 1944:    /** Create a Callback with a static function and bound pointer
        -: 1945:     *  @param obj  Pointer to object to bind to function
        -: 1946:     *  @param func Static function to attach
        -: 1947:     *  @deprecated
        -: 1948:     *      Arguments to callback have been reordered to Callback(func, arg)
        -: 1949:     */
        -: 1950:    template<typename T, typename U>
        -: 1951:    MBED_DEPRECATED_SINCE("mbed-os-5.1",
        -: 1952:        "Arguments to callback have been reordered to Callback(func, arg)")
        -: 1953:    Callback(const U *obj, R (*func)(const T*, A0, A1, A2)) {
        -: 1954:        new (this) Callback(func, obj);
        -: 1955:    }
        -: 1956:
        -: 1957:    /** Create a Callback with a static function and bound pointer
        -: 1958:     *  @param obj  Pointer to object to bind to function
        -: 1959:     *  @param func Static function to attach
        -: 1960:     *  @deprecated
        -: 1961:     *      Arguments to callback have been reordered to Callback(func, arg)
        -: 1962:     */
        -: 1963:    template<typename T, typename U>
        -: 1964:    MBED_DEPRECATED_SINCE("mbed-os-5.1",
        -: 1965:        "Arguments to callback have been reordered to Callback(func, arg)")
        -: 1966:    Callback(volatile U *obj, R (*func)(volatile T*, A0, A1, A2)) {
        -: 1967:        new (this) Callback(func, obj);
        -: 1968:    }
        -: 1969:
        -: 1970:    /** Create a Callback with a static function and bound pointer
        -: 1971:     *  @param obj  Pointer to object to bind to function
        -: 1972:     *  @param func Static function to attach
        -: 1973:     *  @deprecated
        -: 1974:     *      Arguments to callback have been reordered to Callback(func, arg)
        -: 1975:     */
        -: 1976:    template<typename T, typename U>
        -: 1977:    MBED_DEPRECATED_SINCE("mbed-os-5.1",
        -: 1978:        "Arguments to callback have been reordered to Callback(func, arg)")
        -: 1979:    Callback(const volatile U *obj, R (*func)(const volatile T*, A0, A1, A2)) {
        -: 1980:        new (this) Callback(func, obj);
        -: 1981:    }
        -: 1982:
        -: 1983:    /** Destroy a callback
        -: 1984:     */
        -: 1985:    ~Callback() {
        -: 1986:        if (_ops) {
        -: 1987:            _ops->dtor(this);
        -: 1988:        }
        -: 1989:    }
        -: 1990:
        -: 1991:    /** Attach a static function
        -: 1992:     *  @param func     Static function to attach
        -: 1993:     *  @deprecated
        -: 1994:     *      Replaced by simple assignment 'Callback cb = func'
        -: 1995:     */
        -: 1996:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -: 1997:        "Replaced by simple assignment 'Callback cb = func")
        -: 1998:    void attach(R (*func)(A0, A1, A2)) {
        -: 1999:        this->~Callback();
        -: 2000:        new (this) Callback(func);
        -: 2001:    }
        -: 2002:
        -: 2003:    /** Attach a Callback
        -: 2004:     *  @param func     The Callback to attach
        -: 2005:     *  @deprecated
        -: 2006:     *      Replaced by simple assignment 'Callback cb = func'
        -: 2007:     */
        -: 2008:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -: 2009:        "Replaced by simple assignment 'Callback cb = func")
        -: 2010:    void attach(const Callback<R(A0, A1, A2)> &func) {
        -: 2011:        this->~Callback();
        -: 2012:        new (this) Callback(func);
        -: 2013:    }
        -: 2014:
        -: 2015:    /** Attach a member function
        -: 2016:     *  @param obj      Pointer to object to invoke member function on
        -: 2017:     *  @param method   Member function to attach
        -: 2018:     *  @deprecated
        -: 2019:     *      Replaced by simple assignment 'Callback cb = func'
        -: 2020:     */
        -: 2021:    template<typename T, typename U>
        -: 2022:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -: 2023:        "Replaced by simple assignment 'Callback cb = func")
        -: 2024:    void attach(U *obj, R (T::*method)(A0, A1, A2)) {
        -: 2025:        this->~Callback();
        -: 2026:        new (this) Callback(obj, method);
        -: 2027:    }
        -: 2028:
        -: 2029:    /** Attach a member function
        -: 2030:     *  @param obj      Pointer to object to invoke member function on
        -: 2031:     *  @param method   Member function to attach
        -: 2032:     *  @deprecated
        -: 2033:     *      Replaced by simple assignment 'Callback cb = func'
        -: 2034:     */
        -: 2035:    template<typename T, typename U>
        -: 2036:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -: 2037:        "Replaced by simple assignment 'Callback cb = func")
        -: 2038:    void attach(const U *obj, R (T::*method)(A0, A1, A2) const) {
        -: 2039:        this->~Callback();
        -: 2040:        new (this) Callback(obj, method);
        -: 2041:    }
        -: 2042:
        -: 2043:    /** Attach a member function
        -: 2044:     *  @param obj      Pointer to object to invoke member function on
        -: 2045:     *  @param method   Member function to attach
        -: 2046:     *  @deprecated
        -: 2047:     *      Replaced by simple assignment 'Callback cb = func'
        -: 2048:     */
        -: 2049:    template<typename T, typename U>
        -: 2050:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -: 2051:        "Replaced by simple assignment 'Callback cb = func")
        -: 2052:    void attach(volatile U *obj, R (T::*method)(A0, A1, A2) volatile) {
        -: 2053:        this->~Callback();
        -: 2054:        new (this) Callback(obj, method);
        -: 2055:    }
        -: 2056:
        -: 2057:    /** Attach a member function
        -: 2058:     *  @param obj      Pointer to object to invoke member function on
        -: 2059:     *  @param method   Member function to attach
        -: 2060:     *  @deprecated
        -: 2061:     *      Replaced by simple assignment 'Callback cb = func'
        -: 2062:     */
        -: 2063:    template<typename T, typename U>
        -: 2064:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -: 2065:        "Replaced by simple assignment 'Callback cb = func")
        -: 2066:    void attach(const volatile U *obj, R (T::*method)(A0, A1, A2) const volatile) {
        -: 2067:        this->~Callback();
        -: 2068:        new (this) Callback(obj, method);
        -: 2069:    }
        -: 2070:
        -: 2071:    /** Attach a static function with a bound pointer
        -: 2072:     *  @param func     Static function to attach
        -: 2073:     *  @param arg      Pointer argument to function
        -: 2074:     *  @deprecated
        -: 2075:     *      Replaced by simple assignment 'Callback cb = func'
        -: 2076:     */
        -: 2077:    template <typename T, typename U>
        -: 2078:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -: 2079:        "Replaced by simple assignment 'Callback cb = func")
        -: 2080:    void attach(R (*func)(T*, A0, A1, A2), U *arg) {
        -: 2081:        this->~Callback();
        -: 2082:        new (this) Callback(func, arg);
        -: 2083:    }
        -: 2084:
        -: 2085:    /** Attach a static function with a bound pointer
        -: 2086:     *  @param func     Static function to attach
        -: 2087:     *  @param arg      Pointer argument to function
        -: 2088:     *  @deprecated
        -: 2089:     *      Replaced by simple assignment 'Callback cb = func'
        -: 2090:     */
        -: 2091:    template <typename T, typename U>
        -: 2092:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -: 2093:        "Replaced by simple assignment 'Callback cb = func")
        -: 2094:    void attach(R (*func)(const T*, A0, A1, A2), const U *arg) {
        -: 2095:        this->~Callback();
        -: 2096:        new (this) Callback(func, arg);
        -: 2097:    }
        -: 2098:
        -: 2099:    /** Attach a static function with a bound pointer
        -: 2100:     *  @param func     Static function to attach
        -: 2101:     *  @param arg      Pointer argument to function
        -: 2102:     *  @deprecated
        -: 2103:     *      Replaced by simple assignment 'Callback cb = func'
        -: 2104:     */
        -: 2105:    template <typename T, typename U>
        -: 2106:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -: 2107:        "Replaced by simple assignment 'Callback cb = func")
        -: 2108:    void attach(R (*func)(volatile T*, A0, A1, A2), volatile U *arg) {
        -: 2109:        this->~Callback();
        -: 2110:        new (this) Callback(func, arg);
        -: 2111:    }
        -: 2112:
        -: 2113:    /** Attach a static function with a bound pointer
        -: 2114:     *  @param func     Static function to attach
        -: 2115:     *  @param arg      Pointer argument to function
        -: 2116:     *  @deprecated
        -: 2117:     *      Replaced by simple assignment 'Callback cb = func'
        -: 2118:     */
        -: 2119:    template <typename T, typename U>
        -: 2120:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -: 2121:        "Replaced by simple assignment 'Callback cb = func")
        -: 2122:    void attach(R (*func)(const volatile T*, A0, A1, A2), const volatile U *arg) {
        -: 2123:        this->~Callback();
        -: 2124:        new (this) Callback(func, arg);
        -: 2125:    }
        -: 2126:
        -: 2127:    /** Attach a function object
        -: 2128:     *  @param f Function object to attach
        -: 2129:     *  @note The function object is limited to a single word of storage
        -: 2130:     *  @deprecated
        -: 2131:     *      Replaced by simple assignment 'Callback cb = func'
        -: 2132:     */
        -: 2133:    template <typename F>
        -: 2134:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -: 2135:        "Replaced by simple assignment 'Callback cb = func")
        -: 2136:    void attach(F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0, A1, A2))) {
        -: 2137:        this->~Callback();
        -: 2138:        new (this) Callback(f);
        -: 2139:    }
        -: 2140:
        -: 2141:    /** Attach a function object
        -: 2142:     *  @param f Function object to attach
        -: 2143:     *  @note The function object is limited to a single word of storage
        -: 2144:     *  @deprecated
        -: 2145:     *      Replaced by simple assignment 'Callback cb = func'
        -: 2146:     */
        -: 2147:    template <typename F>
        -: 2148:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -: 2149:        "Replaced by simple assignment 'Callback cb = func")
        -: 2150:    void attach(const F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0, A1, A2) const)) {
        -: 2151:        this->~Callback();
        -: 2152:        new (this) Callback(f);
        -: 2153:    }
        -: 2154:
        -: 2155:    /** Attach a function object
        -: 2156:     *  @param f Function object to attach
        -: 2157:     *  @note The function object is limited to a single word of storage
        -: 2158:     *  @deprecated
        -: 2159:     *      Replaced by simple assignment 'Callback cb = func'
        -: 2160:     */
        -: 2161:    template <typename F>
        -: 2162:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -: 2163:        "Replaced by simple assignment 'Callback cb = func")
        -: 2164:    void attach(volatile F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0, A1, A2) volatile)) {
        -: 2165:        this->~Callback();
        -: 2166:        new (this) Callback(f);
        -: 2167:    }
        -: 2168:
        -: 2169:    /** Attach a function object
        -: 2170:     *  @param f Function object to attach
        -: 2171:     *  @note The function object is limited to a single word of storage
        -: 2172:     *  @deprecated
        -: 2173:     *      Replaced by simple assignment 'Callback cb = func'
        -: 2174:     */
        -: 2175:    template <typename F>
        -: 2176:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -: 2177:        "Replaced by simple assignment 'Callback cb = func")
        -: 2178:    void attach(const volatile F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0, A1, A2) const volatile)) {
        -: 2179:        this->~Callback();
        -: 2180:        new (this) Callback(f);
        -: 2181:    }
        -: 2182:
        -: 2183:    /** Attach a static function with a bound pointer
        -: 2184:     *  @param obj  Pointer to object to bind to function
        -: 2185:     *  @param func Static function to attach
        -: 2186:     *  @deprecated
        -: 2187:     *      Arguments to callback have been reordered to attach(func, arg)
        -: 2188:     */
        -: 2189:    template <typename T, typename U>
        -: 2190:    MBED_DEPRECATED_SINCE("mbed-os-5.1",
        -: 2191:        "Arguments to callback have been reordered to attach(func, arg)")
        -: 2192:    void attach(U *obj, R (*func)(T*, A0, A1, A2)) {
        -: 2193:        this->~Callback();
        -: 2194:        new (this) Callback(func, obj);
        -: 2195:    }
        -: 2196:
        -: 2197:    /** Attach a static function with a bound pointer
        -: 2198:     *  @param obj  Pointer to object to bind to function
        -: 2199:     *  @param func Static function to attach
        -: 2200:     *  @deprecated
        -: 2201:     *      Arguments to callback have been reordered to attach(func, arg)
        -: 2202:     */
        -: 2203:    template <typename T, typename U>
        -: 2204:    MBED_DEPRECATED_SINCE("mbed-os-5.1",
        -: 2205:        "Arguments to callback have been reordered to attach(func, arg)")
        -: 2206:    void attach(const U *obj, R (*func)(const T*, A0, A1, A2)) {
        -: 2207:        this->~Callback();
        -: 2208:        new (this) Callback(func, obj);
        -: 2209:    }
        -: 2210:
        -: 2211:    /** Attach a static function with a bound pointer
        -: 2212:     *  @param obj  Pointer to object to bind to function
        -: 2213:     *  @param func Static function to attach
        -: 2214:     *  @deprecated
        -: 2215:     *      Arguments to callback have been reordered to attach(func, arg)
        -: 2216:     */
        -: 2217:    template <typename T, typename U>
        -: 2218:    MBED_DEPRECATED_SINCE("mbed-os-5.1",
        -: 2219:        "Arguments to callback have been reordered to attach(func, arg)")
        -: 2220:    void attach(volatile U *obj, R (*func)(volatile T*, A0, A1, A2)) {
        -: 2221:        this->~Callback();
        -: 2222:        new (this) Callback(func, obj);
        -: 2223:    }
        -: 2224:
        -: 2225:    /** Attach a static function with a bound pointer
        -: 2226:     *  @param obj  Pointer to object to bind to function
        -: 2227:     *  @param func Static function to attach
        -: 2228:     *  @deprecated
        -: 2229:     *      Arguments to callback have been reordered to attach(func, arg)
        -: 2230:     */
        -: 2231:    template <typename T, typename U>
        -: 2232:    MBED_DEPRECATED_SINCE("mbed-os-5.1",
        -: 2233:        "Arguments to callback have been reordered to attach(func, arg)")
        -: 2234:    void attach(const volatile U *obj, R (*func)(const volatile T*, A0, A1, A2)) {
        -: 2235:        this->~Callback();
        -: 2236:        new (this) Callback(func, obj);
        -: 2237:    }
        -: 2238:
        -: 2239:    /** Assign a callback
        -: 2240:     */
        -: 2241:    Callback &operator=(const Callback &that) {
        -: 2242:        if (this != &that) {
        -: 2243:            this->~Callback();
        -: 2244:            new (this) Callback(that);
        -: 2245:        }
        -: 2246:
        -: 2247:        return *this;
        -: 2248:    }
        -: 2249:
        -: 2250:    /** Call the attached function
        -: 2251:     */
        -: 2252:    R call(A0 a0, A1 a1, A2 a2) const {
        -: 2253:        MBED_ASSERT(_ops);
        -: 2254:        return _ops->call(this, a0, a1, a2);
        -: 2255:    }
        -: 2256:
        -: 2257:    /** Call the attached function
        -: 2258:     */
        -: 2259:    R operator()(A0 a0, A1 a1, A2 a2) const {
        -: 2260:        return call(a0, a1, a2);
        -: 2261:    }
        -: 2262:
        -: 2263:    /** Test if function has been attached
        -: 2264:     */
        -: 2265:    operator bool() const {
        -: 2266:        return _ops;
        -: 2267:    }
        -: 2268:
        -: 2269:    /** Test for equality
        -: 2270:     */
        -: 2271:    friend bool operator==(const Callback &l, const Callback &r) {
        -: 2272:        return memcmp(&l, &r, sizeof(Callback)) == 0;
        -: 2273:    }
        -: 2274:
        -: 2275:    /** Test for inequality
        -: 2276:     */
        -: 2277:    friend bool operator!=(const Callback &l, const Callback &r) {
        -: 2278:        return !(l == r);
        -: 2279:    }
        -: 2280:
        -: 2281:    /** Static thunk for passing as C-style function
        -: 2282:     *  @param func Callback to call passed as void pointer
        -: 2283:     *  @param a0 An argument to be called with function func
        -: 2284:     *  @param a1 An argument to be called with function func
        -: 2285:     *  @param a2 An argument to be called with function func
        -: 2286:     *  @return the value as determined by func which is of 
        -: 2287:     *      type and determined by the signiture of func
        -: 2288:     */
        -: 2289:    static R thunk(void *func, A0 a0, A1 a1, A2 a2) {
        -: 2290:        return static_cast<Callback*>(func)->call(a0, a1, a2);
        -: 2291:    }
        -: 2292:
        -: 2293:private:
        -: 2294:    // Stored as pointer to function and pointer to optional object
        -: 2295:    // Function pointer is stored as union of possible function types
        -: 2296:    // to garuntee proper size and alignment
        -: 2297:    struct _class;
        -: 2298:    union {
        -: 2299:        void (*_staticfunc)(A0, A1, A2);
        -: 2300:        void (*_boundfunc)(_class*, A0, A1, A2);
        -: 2301:        void (_class::*_methodfunc)(A0, A1, A2);
        -: 2302:    } _func;
        -: 2303:    void *_obj;
        -: 2304:
        -: 2305:    // Dynamically dispatched operations
        -: 2306:    const struct ops {
        -: 2307:        R (*call)(const void*, A0, A1, A2);
        -: 2308:        void (*move)(void*, const void*);
        -: 2309:        void (*dtor)(void*);
        -: 2310:    } *_ops;
        -: 2311:
        -: 2312:    // Generate operations for function object
        -: 2313:    template <typename F>
        -: 2314:    void generate(const F &f) {
        -: 2315:        static const ops ops = {
        -: 2316:            &Callback::function_call<F>,
        -: 2317:            &Callback::function_move<F>,
        -: 2318:            &Callback::function_dtor<F>,
        -: 2319:        };
        -: 2320:
        -: 2321:        MBED_STATIC_ASSERT(sizeof(Callback) - sizeof(_ops) >= sizeof(F),
        -: 2322:                "Type F must not exceed the size of the Callback class");
        -: 2323:        memset(this, 0, sizeof(Callback));
        -: 2324:        new (this) F(f);
        -: 2325:        _ops = &ops;
        -: 2326:    }
        -: 2327:
        -: 2328:    // Function attributes
        -: 2329:    template <typename F>
        -: 2330:    static R function_call(const void *p, A0 a0, A1 a1, A2 a2) {
        -: 2331:        return (*(F*)p)(a0, a1, a2);
        -: 2332:    }
        -: 2333:
        -: 2334:    template <typename F>
        -: 2335:    static void function_move(void *d, const void *p) {
        -: 2336:        new (d) F(*(F*)p);
        -: 2337:    }
        -: 2338:
        -: 2339:    template <typename F>
        -: 2340:    static void function_dtor(void *p) {
        -: 2341:        ((F*)p)->~F();
        -: 2342:    }
        -: 2343:
        -: 2344:    // Wrappers for functions with context
        -: 2345:    template <typename O, typename M>
        -: 2346:    struct method_context {
        -: 2347:        M method;
        -: 2348:        O *obj;
        -: 2349:
        -: 2350:        method_context(O *obj, M method)
        -: 2351:            : method(method), obj(obj) {}
        -: 2352:
        -: 2353:        R operator()(A0 a0, A1 a1, A2 a2) const {
        -: 2354:            return (obj->*method)(a0, a1, a2);
        -: 2355:        }
        -: 2356:    };
        -: 2357:
        -: 2358:    template <typename F, typename A>
        -: 2359:    struct function_context {
        -: 2360:        F func;
        -: 2361:        A *arg;
        -: 2362:
        -: 2363:        function_context(F func, A *arg)
        -: 2364:            : func(func), arg(arg) {}
        -: 2365:
        -: 2366:        R operator()(A0 a0, A1 a1, A2 a2) const {
        -: 2367:            return func(arg, a0, a1, a2);
        -: 2368:        }
        -: 2369:    };
        -: 2370:};
        -: 2371:
        -: 2372:/** Callback class based on template specialization
        -: 2373: *
        -: 2374: * @note Synchronization level: Not protected
        -: 2375: */
        -: 2376:template <typename R, typename A0, typename A1, typename A2, typename A3>
        -: 2377:class Callback<R(A0, A1, A2, A3)> {
        -: 2378:public:
        -: 2379:    /** Create a Callback with a static function
        -: 2380:     *  @param func     Static function to attach
        -: 2381:     */
        -: 2382:    Callback(R (*func)(A0, A1, A2, A3) = 0) {
        -: 2383:        if (!func) {
        -: 2384:            memset(this, 0, sizeof(Callback));
        -: 2385:        } else {
        -: 2386:            generate(func);
        -: 2387:        }
        -: 2388:    }
        -: 2389:
        -: 2390:    /** Attach a Callback
        -: 2391:     *  @param func     The Callback to attach
        -: 2392:     */
        -: 2393:    Callback(const Callback<R(A0, A1, A2, A3)> &func) {
        -: 2394:        if (func._ops) {
        -: 2395:            func._ops->move(this, &func);
        -: 2396:        }
        -: 2397:        _ops = func._ops;
        -: 2398:    }
        -: 2399:
        -: 2400:    /** Create a Callback with a member function
        -: 2401:     *  @param obj      Pointer to object to invoke member function on
        -: 2402:     *  @param method   Member function to attach
        -: 2403:     */
        -: 2404:    template<typename T, typename U>
        -: 2405:    Callback(U *obj, R (T::*method)(A0, A1, A2, A3)) {
        -: 2406:        generate(method_context<T, R (T::*)(A0, A1, A2, A3)>(obj, method));
        -: 2407:    }
        -: 2408:
        -: 2409:    /** Create a Callback with a member function
        -: 2410:     *  @param obj      Pointer to object to invoke member function on
        -: 2411:     *  @param method   Member function to attach
        -: 2412:     */
        -: 2413:    template<typename T, typename U>
        -: 2414:    Callback(const U *obj, R (T::*method)(A0, A1, A2, A3) const) {
        -: 2415:        generate(method_context<const T, R (T::*)(A0, A1, A2, A3) const>(obj, method));
        -: 2416:    }
        -: 2417:
        -: 2418:    /** Create a Callback with a member function
        -: 2419:     *  @param obj      Pointer to object to invoke member function on
        -: 2420:     *  @param method   Member function to attach
        -: 2421:     */
        -: 2422:    template<typename T, typename U>
        -: 2423:    Callback(volatile U *obj, R (T::*method)(A0, A1, A2, A3) volatile) {
        -: 2424:        generate(method_context<volatile T, R (T::*)(A0, A1, A2, A3) volatile>(obj, method));
        -: 2425:    }
        -: 2426:
        -: 2427:    /** Create a Callback with a member function
        -: 2428:     *  @param obj      Pointer to object to invoke member function on
        -: 2429:     *  @param method   Member function to attach
        -: 2430:     */
        -: 2431:    template<typename T, typename U>
        -: 2432:    Callback(const volatile U *obj, R (T::*method)(A0, A1, A2, A3) const volatile) {
        -: 2433:        generate(method_context<const volatile T, R (T::*)(A0, A1, A2, A3) const volatile>(obj, method));
        -: 2434:    }
        -: 2435:
        -: 2436:    /** Create a Callback with a static function and bound pointer
        -: 2437:     *  @param func     Static function to attach
        -: 2438:     *  @param arg      Pointer argument to function 
        -: 2439:     */
        -: 2440:    template<typename T, typename U>
        -: 2441:    Callback(R (*func)(T*, A0, A1, A2, A3), U *arg) {
        -: 2442:        generate(function_context<R (*)(T*, A0, A1, A2, A3), T>(func, arg));
        -: 2443:    }
        -: 2444:
        -: 2445:    /** Create a Callback with a static function and bound pointer
        -: 2446:     *  @param func     Static function to attach
        -: 2447:     *  @param arg      Pointer argument to function 
        -: 2448:     */
        -: 2449:    template<typename T, typename U>
        -: 2450:    Callback(R (*func)(const T*, A0, A1, A2, A3), const U *arg) {
        -: 2451:        generate(function_context<R (*)(const T*, A0, A1, A2, A3), const T>(func, arg));
        -: 2452:    }
        -: 2453:
        -: 2454:    /** Create a Callback with a static function and bound pointer
        -: 2455:     *  @param func     Static function to attach
        -: 2456:     *  @param arg      Pointer argument to function 
        -: 2457:     */
        -: 2458:    template<typename T, typename U>
        -: 2459:    Callback(R (*func)(volatile T*, A0, A1, A2, A3), volatile U *arg) {
        -: 2460:        generate(function_context<R (*)(volatile T*, A0, A1, A2, A3), volatile T>(func, arg));
        -: 2461:    }
        -: 2462:
        -: 2463:    /** Create a Callback with a static function and bound pointer
        -: 2464:     *  @param func     Static function to attach
        -: 2465:     *  @param arg      Pointer argument to function 
        -: 2466:     */
        -: 2467:    template<typename T, typename U>
        -: 2468:    Callback(R (*func)(const volatile T*, A0, A1, A2, A3), const volatile U *arg) {
        -: 2469:        generate(function_context<R (*)(const volatile T*, A0, A1, A2, A3), const volatile T>(func, arg));
        -: 2470:    }
        -: 2471:
        -: 2472:    /** Create a Callback with a function object
        -: 2473:     *  @param f Function object to attach
        -: 2474:     *  @note The function object is limited to a single word of storage
        -: 2475:     */
        -: 2476:    template <typename F>
        -: 2477:    Callback(F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0, A1, A2, A3))) {
        -: 2478:        generate(f);
        -: 2479:    }
        -: 2480:
        -: 2481:    /** Create a Callback with a function object
        -: 2482:     *  @param f Function object to attach
        -: 2483:     *  @note The function object is limited to a single word of storage
        -: 2484:     */
        -: 2485:    template <typename F>
        -: 2486:    Callback(const F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0, A1, A2, A3) const)) {
        -: 2487:        generate(f);
        -: 2488:    }
        -: 2489:
        -: 2490:    /** Create a Callback with a function object
        -: 2491:     *  @param f Function object to attach
        -: 2492:     *  @note The function object is limited to a single word of storage
        -: 2493:     */
        -: 2494:    template <typename F>
        -: 2495:    Callback(volatile F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0, A1, A2, A3) volatile)) {
        -: 2496:        generate(f);
        -: 2497:    }
        -: 2498:
        -: 2499:    /** Create a Callback with a function object
        -: 2500:     *  @param f Function object to attach
        -: 2501:     *  @note The function object is limited to a single word of storage
        -: 2502:     */
        -: 2503:    template <typename F>
        -: 2504:    Callback(const volatile F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0, A1, A2, A3) const volatile)) {
        -: 2505:        generate(f);
        -: 2506:    }
        -: 2507:
        -: 2508:    /** Create a Callback with a static function and bound pointer
        -: 2509:     *  @param obj  Pointer to object to bind to function
        -: 2510:     *  @param func Static function to attach
        -: 2511:     *  @deprecated
        -: 2512:     *      Arguments to callback have been reordered to Callback(func, arg)
        -: 2513:     */
        -: 2514:    template<typename T, typename U>
        -: 2515:    MBED_DEPRECATED_SINCE("mbed-os-5.1",
        -: 2516:        "Arguments to callback have been reordered to Callback(func, arg)")
        -: 2517:    Callback(U *obj, R (*func)(T*, A0, A1, A2, A3)) {
        -: 2518:        new (this) Callback(func, obj);
        -: 2519:    }
        -: 2520:
        -: 2521:    /** Create a Callback with a static function and bound pointer
        -: 2522:     *  @param obj  Pointer to object to bind to function
        -: 2523:     *  @param func Static function to attach
        -: 2524:     *  @deprecated
        -: 2525:     *      Arguments to callback have been reordered to Callback(func, arg)
        -: 2526:     */
        -: 2527:    template<typename T, typename U>
        -: 2528:    MBED_DEPRECATED_SINCE("mbed-os-5.1",
        -: 2529:        "Arguments to callback have been reordered to Callback(func, arg)")
        -: 2530:    Callback(const U *obj, R (*func)(const T*, A0, A1, A2, A3)) {
        -: 2531:        new (this) Callback(func, obj);
        -: 2532:    }
        -: 2533:
        -: 2534:    /** Create a Callback with a static function and bound pointer
        -: 2535:     *  @param obj  Pointer to object to bind to function
        -: 2536:     *  @param func Static function to attach
        -: 2537:     *  @deprecated
        -: 2538:     *      Arguments to callback have been reordered to Callback(func, arg)
        -: 2539:     */
        -: 2540:    template<typename T, typename U>
        -: 2541:    MBED_DEPRECATED_SINCE("mbed-os-5.1",
        -: 2542:        "Arguments to callback have been reordered to Callback(func, arg)")
        -: 2543:    Callback(volatile U *obj, R (*func)(volatile T*, A0, A1, A2, A3)) {
        -: 2544:        new (this) Callback(func, obj);
        -: 2545:    }
        -: 2546:
        -: 2547:    /** Create a Callback with a static function and bound pointer
        -: 2548:     *  @param obj  Pointer to object to bind to function
        -: 2549:     *  @param func Static function to attach
        -: 2550:     *  @deprecated
        -: 2551:     *      Arguments to callback have been reordered to Callback(func, arg)
        -: 2552:     */
        -: 2553:    template<typename T, typename U>
        -: 2554:    MBED_DEPRECATED_SINCE("mbed-os-5.1",
        -: 2555:        "Arguments to callback have been reordered to Callback(func, arg)")
        -: 2556:    Callback(const volatile U *obj, R (*func)(const volatile T*, A0, A1, A2, A3)) {
        -: 2557:        new (this) Callback(func, obj);
        -: 2558:    }
        -: 2559:
        -: 2560:    /** Destroy a callback
        -: 2561:     */
        -: 2562:    ~Callback() {
        -: 2563:        if (_ops) {
        -: 2564:            _ops->dtor(this);
        -: 2565:        }
        -: 2566:    }
        -: 2567:
        -: 2568:    /** Attach a static function
        -: 2569:     *  @param func     Static function to attach
        -: 2570:     *  @deprecated
        -: 2571:     *      Replaced by simple assignment 'Callback cb = func'
        -: 2572:     */
        -: 2573:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -: 2574:        "Replaced by simple assignment 'Callback cb = func")
        -: 2575:    void attach(R (*func)(A0, A1, A2, A3)) {
        -: 2576:        this->~Callback();
        -: 2577:        new (this) Callback(func);
        -: 2578:    }
        -: 2579:
        -: 2580:    /** Attach a Callback
        -: 2581:     *  @param func     The Callback to attach
        -: 2582:     *  @deprecated
        -: 2583:     *      Replaced by simple assignment 'Callback cb = func'
        -: 2584:     */
        -: 2585:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -: 2586:        "Replaced by simple assignment 'Callback cb = func")
        -: 2587:    void attach(const Callback<R(A0, A1, A2, A3)> &func) {
        -: 2588:        this->~Callback();
        -: 2589:        new (this) Callback(func);
        -: 2590:    }
        -: 2591:
        -: 2592:    /** Attach a member function
        -: 2593:     *  @param obj      Pointer to object to invoke member function on
        -: 2594:     *  @param method   Member function to attach
        -: 2595:     *  @deprecated
        -: 2596:     *      Replaced by simple assignment 'Callback cb = func'
        -: 2597:     */
        -: 2598:    template<typename T, typename U>
        -: 2599:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -: 2600:        "Replaced by simple assignment 'Callback cb = func")
        -: 2601:    void attach(U *obj, R (T::*method)(A0, A1, A2, A3)) {
        -: 2602:        this->~Callback();
        -: 2603:        new (this) Callback(obj, method);
        -: 2604:    }
        -: 2605:
        -: 2606:    /** Attach a member function
        -: 2607:     *  @param obj      Pointer to object to invoke member function on
        -: 2608:     *  @param method   Member function to attach
        -: 2609:     *  @deprecated
        -: 2610:     *      Replaced by simple assignment 'Callback cb = func'
        -: 2611:     */
        -: 2612:    template<typename T, typename U>
        -: 2613:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -: 2614:        "Replaced by simple assignment 'Callback cb = func")
        -: 2615:    void attach(const U *obj, R (T::*method)(A0, A1, A2, A3) const) {
        -: 2616:        this->~Callback();
        -: 2617:        new (this) Callback(obj, method);
        -: 2618:    }
        -: 2619:
        -: 2620:    /** Attach a member function
        -: 2621:     *  @param obj      Pointer to object to invoke member function on
        -: 2622:     *  @param method   Member function to attach
        -: 2623:     *  @deprecated
        -: 2624:     *      Replaced by simple assignment 'Callback cb = func'
        -: 2625:     */
        -: 2626:    template<typename T, typename U>
        -: 2627:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -: 2628:        "Replaced by simple assignment 'Callback cb = func")
        -: 2629:    void attach(volatile U *obj, R (T::*method)(A0, A1, A2, A3) volatile) {
        -: 2630:        this->~Callback();
        -: 2631:        new (this) Callback(obj, method);
        -: 2632:    }
        -: 2633:
        -: 2634:    /** Attach a member function
        -: 2635:     *  @param obj      Pointer to object to invoke member function on
        -: 2636:     *  @param method   Member function to attach
        -: 2637:     *  @deprecated
        -: 2638:     *      Replaced by simple assignment 'Callback cb = func'
        -: 2639:     */
        -: 2640:    template<typename T, typename U>
        -: 2641:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -: 2642:        "Replaced by simple assignment 'Callback cb = func")
        -: 2643:    void attach(const volatile U *obj, R (T::*method)(A0, A1, A2, A3) const volatile) {
        -: 2644:        this->~Callback();
        -: 2645:        new (this) Callback(obj, method);
        -: 2646:    }
        -: 2647:
        -: 2648:    /** Attach a static function with a bound pointer
        -: 2649:     *  @param func     Static function to attach
        -: 2650:     *  @param arg      Pointer argument to function
        -: 2651:     *  @deprecated
        -: 2652:     *      Replaced by simple assignment 'Callback cb = func'
        -: 2653:     */
        -: 2654:    template <typename T, typename U>
        -: 2655:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -: 2656:        "Replaced by simple assignment 'Callback cb = func")
        -: 2657:    void attach(R (*func)(T*, A0, A1, A2, A3), U *arg) {
        -: 2658:        this->~Callback();
        -: 2659:        new (this) Callback(func, arg);
        -: 2660:    }
        -: 2661:
        -: 2662:    /** Attach a static function with a bound pointer
        -: 2663:     *  @param func     Static function to attach
        -: 2664:     *  @param arg      Pointer argument to function
        -: 2665:     *  @deprecated
        -: 2666:     *      Replaced by simple assignment 'Callback cb = func'
        -: 2667:     */
        -: 2668:    template <typename T, typename U>
        -: 2669:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -: 2670:        "Replaced by simple assignment 'Callback cb = func")
        -: 2671:    void attach(R (*func)(const T*, A0, A1, A2, A3), const U *arg) {
        -: 2672:        this->~Callback();
        -: 2673:        new (this) Callback(func, arg);
        -: 2674:    }
        -: 2675:
        -: 2676:    /** Attach a static function with a bound pointer
        -: 2677:     *  @param func     Static function to attach
        -: 2678:     *  @param arg      Pointer argument to function
        -: 2679:     *  @deprecated
        -: 2680:     *      Replaced by simple assignment 'Callback cb = func'
        -: 2681:     */
        -: 2682:    template <typename T, typename U>
        -: 2683:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -: 2684:        "Replaced by simple assignment 'Callback cb = func")
        -: 2685:    void attach(R (*func)(volatile T*, A0, A1, A2, A3), volatile U *arg) {
        -: 2686:        this->~Callback();
        -: 2687:        new (this) Callback(func, arg);
        -: 2688:    }
        -: 2689:
        -: 2690:    /** Attach a static function with a bound pointer
        -: 2691:     *  @param func     Static function to attach
        -: 2692:     *  @param arg      Pointer argument to function
        -: 2693:     *  @deprecated
        -: 2694:     *      Replaced by simple assignment 'Callback cb = func'
        -: 2695:     */
        -: 2696:    template <typename T, typename U>
        -: 2697:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -: 2698:        "Replaced by simple assignment 'Callback cb = func")
        -: 2699:    void attach(R (*func)(const volatile T*, A0, A1, A2, A3), const volatile U *arg) {
        -: 2700:        this->~Callback();
        -: 2701:        new (this) Callback(func, arg);
        -: 2702:    }
        -: 2703:
        -: 2704:    /** Attach a function object
        -: 2705:     *  @param f Function object to attach
        -: 2706:     *  @note The function object is limited to a single word of storage
        -: 2707:     *  @deprecated
        -: 2708:     *      Replaced by simple assignment 'Callback cb = func'
        -: 2709:     */
        -: 2710:    template <typename F>
        -: 2711:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -: 2712:        "Replaced by simple assignment 'Callback cb = func")
        -: 2713:    void attach(F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0, A1, A2, A3))) {
        -: 2714:        this->~Callback();
        -: 2715:        new (this) Callback(f);
        -: 2716:    }
        -: 2717:
        -: 2718:    /** Attach a function object
        -: 2719:     *  @param f Function object to attach
        -: 2720:     *  @note The function object is limited to a single word of storage
        -: 2721:     *  @deprecated
        -: 2722:     *      Replaced by simple assignment 'Callback cb = func'
        -: 2723:     */
        -: 2724:    template <typename F>
        -: 2725:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -: 2726:        "Replaced by simple assignment 'Callback cb = func")
        -: 2727:    void attach(const F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0, A1, A2, A3) const)) {
        -: 2728:        this->~Callback();
        -: 2729:        new (this) Callback(f);
        -: 2730:    }
        -: 2731:
        -: 2732:    /** Attach a function object
        -: 2733:     *  @param f Function object to attach
        -: 2734:     *  @note The function object is limited to a single word of storage
        -: 2735:     *  @deprecated
        -: 2736:     *      Replaced by simple assignment 'Callback cb = func'
        -: 2737:     */
        -: 2738:    template <typename F>
        -: 2739:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -: 2740:        "Replaced by simple assignment 'Callback cb = func")
        -: 2741:    void attach(volatile F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0, A1, A2, A3) volatile)) {
        -: 2742:        this->~Callback();
        -: 2743:        new (this) Callback(f);
        -: 2744:    }
        -: 2745:
        -: 2746:    /** Attach a function object
        -: 2747:     *  @param f Function object to attach
        -: 2748:     *  @note The function object is limited to a single word of storage
        -: 2749:     *  @deprecated
        -: 2750:     *      Replaced by simple assignment 'Callback cb = func'
        -: 2751:     */
        -: 2752:    template <typename F>
        -: 2753:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -: 2754:        "Replaced by simple assignment 'Callback cb = func")
        -: 2755:    void attach(const volatile F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0, A1, A2, A3) const volatile)) {
        -: 2756:        this->~Callback();
        -: 2757:        new (this) Callback(f);
        -: 2758:    }
        -: 2759:
        -: 2760:    /** Attach a static function with a bound pointer
        -: 2761:     *  @param obj  Pointer to object to bind to function
        -: 2762:     *  @param func Static function to attach
        -: 2763:     *  @deprecated
        -: 2764:     *      Arguments to callback have been reordered to attach(func, arg)
        -: 2765:     */
        -: 2766:    template <typename T, typename U>
        -: 2767:    MBED_DEPRECATED_SINCE("mbed-os-5.1",
        -: 2768:        "Arguments to callback have been reordered to attach(func, arg)")
        -: 2769:    void attach(U *obj, R (*func)(T*, A0, A1, A2, A3)) {
        -: 2770:        this->~Callback();
        -: 2771:        new (this) Callback(func, obj);
        -: 2772:    }
        -: 2773:
        -: 2774:    /** Attach a static function with a bound pointer
        -: 2775:     *  @param obj  Pointer to object to bind to function
        -: 2776:     *  @param func Static function to attach
        -: 2777:     *  @deprecated
        -: 2778:     *      Arguments to callback have been reordered to attach(func, arg)
        -: 2779:     */
        -: 2780:    template <typename T, typename U>
        -: 2781:    MBED_DEPRECATED_SINCE("mbed-os-5.1",
        -: 2782:        "Arguments to callback have been reordered to attach(func, arg)")
        -: 2783:    void attach(const U *obj, R (*func)(const T*, A0, A1, A2, A3)) {
        -: 2784:        this->~Callback();
        -: 2785:        new (this) Callback(func, obj);
        -: 2786:    }
        -: 2787:
        -: 2788:    /** Attach a static function with a bound pointer
        -: 2789:     *  @param obj  Pointer to object to bind to function
        -: 2790:     *  @param func Static function to attach
        -: 2791:     *  @deprecated
        -: 2792:     *      Arguments to callback have been reordered to attach(func, arg)
        -: 2793:     */
        -: 2794:    template <typename T, typename U>
        -: 2795:    MBED_DEPRECATED_SINCE("mbed-os-5.1",
        -: 2796:        "Arguments to callback have been reordered to attach(func, arg)")
        -: 2797:    void attach(volatile U *obj, R (*func)(volatile T*, A0, A1, A2, A3)) {
        -: 2798:        this->~Callback();
        -: 2799:        new (this) Callback(func, obj);
        -: 2800:    }
        -: 2801:
        -: 2802:    /** Attach a static function with a bound pointer
        -: 2803:     *  @param obj  Pointer to object to bind to function
        -: 2804:     *  @param func Static function to attach
        -: 2805:     *  @deprecated
        -: 2806:     *      Arguments to callback have been reordered to attach(func, arg)
        -: 2807:     */
        -: 2808:    template <typename T, typename U>
        -: 2809:    MBED_DEPRECATED_SINCE("mbed-os-5.1",
        -: 2810:        "Arguments to callback have been reordered to attach(func, arg)")
        -: 2811:    void attach(const volatile U *obj, R (*func)(const volatile T*, A0, A1, A2, A3)) {
        -: 2812:        this->~Callback();
        -: 2813:        new (this) Callback(func, obj);
        -: 2814:    }
        -: 2815:
        -: 2816:    /** Assign a callback
        -: 2817:     */
        -: 2818:    Callback &operator=(const Callback &that) {
        -: 2819:        if (this != &that) {
        -: 2820:            this->~Callback();
        -: 2821:            new (this) Callback(that);
        -: 2822:        }
        -: 2823:
        -: 2824:        return *this;
        -: 2825:    }
        -: 2826:
        -: 2827:    /** Call the attached function
        -: 2828:     */
        -: 2829:    R call(A0 a0, A1 a1, A2 a2, A3 a3) const {
        -: 2830:        MBED_ASSERT(_ops);
        -: 2831:        return _ops->call(this, a0, a1, a2, a3);
        -: 2832:    }
        -: 2833:
        -: 2834:    /** Call the attached function
        -: 2835:     */
        -: 2836:    R operator()(A0 a0, A1 a1, A2 a2, A3 a3) const {
        -: 2837:        return call(a0, a1, a2, a3);
        -: 2838:    }
        -: 2839:
        -: 2840:    /** Test if function has been attached
        -: 2841:     */
        -: 2842:    operator bool() const {
        -: 2843:        return _ops;
        -: 2844:    }
        -: 2845:
        -: 2846:    /** Test for equality
        -: 2847:     */
        -: 2848:    friend bool operator==(const Callback &l, const Callback &r) {
        -: 2849:        return memcmp(&l, &r, sizeof(Callback)) == 0;
        -: 2850:    }
        -: 2851:
        -: 2852:    /** Test for inequality
        -: 2853:     */
        -: 2854:    friend bool operator!=(const Callback &l, const Callback &r) {
        -: 2855:        return !(l == r);
        -: 2856:    }
        -: 2857:
        -: 2858:    /** Static thunk for passing as C-style function
        -: 2859:     *  @param func Callback to call passed as void pointer
        -: 2860:     *  @param a0 An argument to be called with function func
        -: 2861:     *  @param a1 An argument to be called with function func
        -: 2862:     *  @param a2 An argument to be called with function func
        -: 2863:     *  @param a3 An argument to be called with function func
        -: 2864:     *  @return the value as determined by func which is of 
        -: 2865:     *      type and determined by the signiture of func
        -: 2866:     */
        -: 2867:    static R thunk(void *func, A0 a0, A1 a1, A2 a2, A3 a3) {
        -: 2868:        return static_cast<Callback*>(func)->call(a0, a1, a2, a3);
        -: 2869:    }
        -: 2870:
        -: 2871:private:
        -: 2872:    // Stored as pointer to function and pointer to optional object
        -: 2873:    // Function pointer is stored as union of possible function types
        -: 2874:    // to garuntee proper size and alignment
        -: 2875:    struct _class;
        -: 2876:    union {
        -: 2877:        void (*_staticfunc)(A0, A1, A2, A3);
        -: 2878:        void (*_boundfunc)(_class*, A0, A1, A2, A3);
        -: 2879:        void (_class::*_methodfunc)(A0, A1, A2, A3);
        -: 2880:    } _func;
        -: 2881:    void *_obj;
        -: 2882:
        -: 2883:    // Dynamically dispatched operations
        -: 2884:    const struct ops {
        -: 2885:        R (*call)(const void*, A0, A1, A2, A3);
        -: 2886:        void (*move)(void*, const void*);
        -: 2887:        void (*dtor)(void*);
        -: 2888:    } *_ops;
        -: 2889:
        -: 2890:    // Generate operations for function object
        -: 2891:    template <typename F>
        -: 2892:    void generate(const F &f) {
        -: 2893:        static const ops ops = {
        -: 2894:            &Callback::function_call<F>,
        -: 2895:            &Callback::function_move<F>,
        -: 2896:            &Callback::function_dtor<F>,
        -: 2897:        };
        -: 2898:
        -: 2899:        MBED_STATIC_ASSERT(sizeof(Callback) - sizeof(_ops) >= sizeof(F),
        -: 2900:                "Type F must not exceed the size of the Callback class");
        -: 2901:        memset(this, 0, sizeof(Callback));
        -: 2902:        new (this) F(f);
        -: 2903:        _ops = &ops;
        -: 2904:    }
        -: 2905:
        -: 2906:    // Function attributes
        -: 2907:    template <typename F>
        -: 2908:    static R function_call(const void *p, A0 a0, A1 a1, A2 a2, A3 a3) {
        -: 2909:        return (*(F*)p)(a0, a1, a2, a3);
        -: 2910:    }
        -: 2911:
        -: 2912:    template <typename F>
        -: 2913:    static void function_move(void *d, const void *p) {
        -: 2914:        new (d) F(*(F*)p);
        -: 2915:    }
        -: 2916:
        -: 2917:    template <typename F>
        -: 2918:    static void function_dtor(void *p) {
        -: 2919:        ((F*)p)->~F();
        -: 2920:    }
        -: 2921:
        -: 2922:    // Wrappers for functions with context
        -: 2923:    template <typename O, typename M>
        -: 2924:    struct method_context {
        -: 2925:        M method;
        -: 2926:        O *obj;
        -: 2927:
        -: 2928:        method_context(O *obj, M method)
        -: 2929:            : method(method), obj(obj) {}
        -: 2930:
        -: 2931:        R operator()(A0 a0, A1 a1, A2 a2, A3 a3) const {
        -: 2932:            return (obj->*method)(a0, a1, a2, a3);
        -: 2933:        }
        -: 2934:    };
        -: 2935:
        -: 2936:    template <typename F, typename A>
        -: 2937:    struct function_context {
        -: 2938:        F func;
        -: 2939:        A *arg;
        -: 2940:
        -: 2941:        function_context(F func, A *arg)
        -: 2942:            : func(func), arg(arg) {}
        -: 2943:
        -: 2944:        R operator()(A0 a0, A1 a1, A2 a2, A3 a3) const {
        -: 2945:            return func(arg, a0, a1, a2, a3);
        -: 2946:        }
        -: 2947:    };
        -: 2948:};
        -: 2949:
        -: 2950:/** Callback class based on template specialization
        -: 2951: *
        -: 2952: * @note Synchronization level: Not protected
        -: 2953: */
        -: 2954:template <typename R, typename A0, typename A1, typename A2, typename A3, typename A4>
        -: 2955:class Callback<R(A0, A1, A2, A3, A4)> {
        -: 2956:public:
        -: 2957:    /** Create a Callback with a static function
        -: 2958:     *  @param func     Static function to attach
        -: 2959:     */
        -: 2960:    Callback(R (*func)(A0, A1, A2, A3, A4) = 0) {
        -: 2961:        if (!func) {
        -: 2962:            memset(this, 0, sizeof(Callback));
        -: 2963:        } else {
        -: 2964:            generate(func);
        -: 2965:        }
        -: 2966:    }
        -: 2967:
        -: 2968:    /** Attach a Callback
        -: 2969:     *  @param func     The Callback to attach
        -: 2970:     */
        -: 2971:    Callback(const Callback<R(A0, A1, A2, A3, A4)> &func) {
        -: 2972:        if (func._ops) {
        -: 2973:            func._ops->move(this, &func);
        -: 2974:        }
        -: 2975:        _ops = func._ops;
        -: 2976:    }
        -: 2977:
        -: 2978:    /** Create a Callback with a member function
        -: 2979:     *  @param obj      Pointer to object to invoke member function on
        -: 2980:     *  @param method   Member function to attach
        -: 2981:     */
        -: 2982:    template<typename T, typename U>
        -: 2983:    Callback(U *obj, R (T::*method)(A0, A1, A2, A3, A4)) {
        -: 2984:        generate(method_context<T, R (T::*)(A0, A1, A2, A3, A4)>(obj, method));
        -: 2985:    }
        -: 2986:
        -: 2987:    /** Create a Callback with a member function
        -: 2988:     *  @param obj      Pointer to object to invoke member function on
        -: 2989:     *  @param method   Member function to attach
        -: 2990:     */
        -: 2991:    template<typename T, typename U>
        -: 2992:    Callback(const U *obj, R (T::*method)(A0, A1, A2, A3, A4) const) {
        -: 2993:        generate(method_context<const T, R (T::*)(A0, A1, A2, A3, A4) const>(obj, method));
        -: 2994:    }
        -: 2995:
        -: 2996:    /** Create a Callback with a member function
        -: 2997:     *  @param obj      Pointer to object to invoke member function on
        -: 2998:     *  @param method   Member function to attach
        -: 2999:     */
        -: 3000:    template<typename T, typename U>
        -: 3001:    Callback(volatile U *obj, R (T::*method)(A0, A1, A2, A3, A4) volatile) {
        -: 3002:        generate(method_context<volatile T, R (T::*)(A0, A1, A2, A3, A4) volatile>(obj, method));
        -: 3003:    }
        -: 3004:
        -: 3005:    /** Create a Callback with a member function
        -: 3006:     *  @param obj      Pointer to object to invoke member function on
        -: 3007:     *  @param method   Member function to attach
        -: 3008:     */
        -: 3009:    template<typename T, typename U>
        -: 3010:    Callback(const volatile U *obj, R (T::*method)(A0, A1, A2, A3, A4) const volatile) {
        -: 3011:        generate(method_context<const volatile T, R (T::*)(A0, A1, A2, A3, A4) const volatile>(obj, method));
        -: 3012:    }
        -: 3013:
        -: 3014:    /** Create a Callback with a static function and bound pointer
        -: 3015:     *  @param func     Static function to attach
        -: 3016:     *  @param arg      Pointer argument to function 
        -: 3017:     */
        -: 3018:    template<typename T, typename U>
        -: 3019:    Callback(R (*func)(T*, A0, A1, A2, A3, A4), U *arg) {
        -: 3020:        generate(function_context<R (*)(T*, A0, A1, A2, A3, A4), T>(func, arg));
        -: 3021:    }
        -: 3022:
        -: 3023:    /** Create a Callback with a static function and bound pointer
        -: 3024:     *  @param func     Static function to attach
        -: 3025:     *  @param arg      Pointer argument to function 
        -: 3026:     */
        -: 3027:    template<typename T, typename U>
        -: 3028:    Callback(R (*func)(const T*, A0, A1, A2, A3, A4), const U *arg) {
        -: 3029:        generate(function_context<R (*)(const T*, A0, A1, A2, A3, A4), const T>(func, arg));
        -: 3030:    }
        -: 3031:
        -: 3032:    /** Create a Callback with a static function and bound pointer
        -: 3033:     *  @param func     Static function to attach
        -: 3034:     *  @param arg      Pointer argument to function 
        -: 3035:     */
        -: 3036:    template<typename T, typename U>
        -: 3037:    Callback(R (*func)(volatile T*, A0, A1, A2, A3, A4), volatile U *arg) {
        -: 3038:        generate(function_context<R (*)(volatile T*, A0, A1, A2, A3, A4), volatile T>(func, arg));
        -: 3039:    }
        -: 3040:
        -: 3041:    /** Create a Callback with a static function and bound pointer
        -: 3042:     *  @param func     Static function to attach
        -: 3043:     *  @param arg      Pointer argument to function 
        -: 3044:     */
        -: 3045:    template<typename T, typename U>
        -: 3046:    Callback(R (*func)(const volatile T*, A0, A1, A2, A3, A4), const volatile U *arg) {
        -: 3047:        generate(function_context<R (*)(const volatile T*, A0, A1, A2, A3, A4), const volatile T>(func, arg));
        -: 3048:    }
        -: 3049:
        -: 3050:    /** Create a Callback with a function object
        -: 3051:     *  @param f Function object to attach
        -: 3052:     *  @note The function object is limited to a single word of storage
        -: 3053:     */
        -: 3054:    template <typename F>
        -: 3055:    Callback(F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0, A1, A2, A3, A4))) {
        -: 3056:        generate(f);
        -: 3057:    }
        -: 3058:
        -: 3059:    /** Create a Callback with a function object
        -: 3060:     *  @param f Function object to attach
        -: 3061:     *  @note The function object is limited to a single word of storage
        -: 3062:     */
        -: 3063:    template <typename F>
        -: 3064:    Callback(const F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0, A1, A2, A3, A4) const)) {
        -: 3065:        generate(f);
        -: 3066:    }
        -: 3067:
        -: 3068:    /** Create a Callback with a function object
        -: 3069:     *  @param f Function object to attach
        -: 3070:     *  @note The function object is limited to a single word of storage
        -: 3071:     */
        -: 3072:    template <typename F>
        -: 3073:    Callback(volatile F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0, A1, A2, A3, A4) volatile)) {
        -: 3074:        generate(f);
        -: 3075:    }
        -: 3076:
        -: 3077:    /** Create a Callback with a function object
        -: 3078:     *  @param f Function object to attach
        -: 3079:     *  @note The function object is limited to a single word of storage
        -: 3080:     */
        -: 3081:    template <typename F>
        -: 3082:    Callback(const volatile F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0, A1, A2, A3, A4) const volatile)) {
        -: 3083:        generate(f);
        -: 3084:    }
        -: 3085:
        -: 3086:    /** Create a Callback with a static function and bound pointer
        -: 3087:     *  @param obj  Pointer to object to bind to function
        -: 3088:     *  @param func Static function to attach
        -: 3089:     *  @deprecated
        -: 3090:     *      Arguments to callback have been reordered to Callback(func, arg)
        -: 3091:     */
        -: 3092:    template<typename T, typename U>
        -: 3093:    MBED_DEPRECATED_SINCE("mbed-os-5.1",
        -: 3094:        "Arguments to callback have been reordered to Callback(func, arg)")
        -: 3095:    Callback(U *obj, R (*func)(T*, A0, A1, A2, A3, A4)) {
        -: 3096:        new (this) Callback(func, obj);
        -: 3097:    }
        -: 3098:
        -: 3099:    /** Create a Callback with a static function and bound pointer
        -: 3100:     *  @param obj  Pointer to object to bind to function
        -: 3101:     *  @param func Static function to attach
        -: 3102:     *  @deprecated
        -: 3103:     *      Arguments to callback have been reordered to Callback(func, arg)
        -: 3104:     */
        -: 3105:    template<typename T, typename U>
        -: 3106:    MBED_DEPRECATED_SINCE("mbed-os-5.1",
        -: 3107:        "Arguments to callback have been reordered to Callback(func, arg)")
        -: 3108:    Callback(const U *obj, R (*func)(const T*, A0, A1, A2, A3, A4)) {
        -: 3109:        new (this) Callback(func, obj);
        -: 3110:    }
        -: 3111:
        -: 3112:    /** Create a Callback with a static function and bound pointer
        -: 3113:     *  @param obj  Pointer to object to bind to function
        -: 3114:     *  @param func Static function to attach
        -: 3115:     *  @deprecated
        -: 3116:     *      Arguments to callback have been reordered to Callback(func, arg)
        -: 3117:     */
        -: 3118:    template<typename T, typename U>
        -: 3119:    MBED_DEPRECATED_SINCE("mbed-os-5.1",
        -: 3120:        "Arguments to callback have been reordered to Callback(func, arg)")
        -: 3121:    Callback(volatile U *obj, R (*func)(volatile T*, A0, A1, A2, A3, A4)) {
        -: 3122:        new (this) Callback(func, obj);
        -: 3123:    }
        -: 3124:
        -: 3125:    /** Create a Callback with a static function and bound pointer
        -: 3126:     *  @param obj  Pointer to object to bind to function
        -: 3127:     *  @param func Static function to attach
        -: 3128:     *  @deprecated
        -: 3129:     *      Arguments to callback have been reordered to Callback(func, arg)
        -: 3130:     */
        -: 3131:    template<typename T, typename U>
        -: 3132:    MBED_DEPRECATED_SINCE("mbed-os-5.1",
        -: 3133:        "Arguments to callback have been reordered to Callback(func, arg)")
        -: 3134:    Callback(const volatile U *obj, R (*func)(const volatile T*, A0, A1, A2, A3, A4)) {
        -: 3135:        new (this) Callback(func, obj);
        -: 3136:    }
        -: 3137:
        -: 3138:    /** Destroy a callback
        -: 3139:     */
        -: 3140:    ~Callback() {
        -: 3141:        if (_ops) {
        -: 3142:            _ops->dtor(this);
        -: 3143:        }
        -: 3144:    }
        -: 3145:
        -: 3146:    /** Attach a static function
        -: 3147:     *  @param func     Static function to attach
        -: 3148:     *  @deprecated
        -: 3149:     *      Replaced by simple assignment 'Callback cb = func'
        -: 3150:     */
        -: 3151:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -: 3152:        "Replaced by simple assignment 'Callback cb = func")
        -: 3153:    void attach(R (*func)(A0, A1, A2, A3, A4)) {
        -: 3154:        this->~Callback();
        -: 3155:        new (this) Callback(func);
        -: 3156:    }
        -: 3157:
        -: 3158:    /** Attach a Callback
        -: 3159:     *  @param func     The Callback to attach
        -: 3160:     *  @deprecated
        -: 3161:     *      Replaced by simple assignment 'Callback cb = func'
        -: 3162:     */
        -: 3163:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -: 3164:        "Replaced by simple assignment 'Callback cb = func")
        -: 3165:    void attach(const Callback<R(A0, A1, A2, A3, A4)> &func) {
        -: 3166:        this->~Callback();
        -: 3167:        new (this) Callback(func);
        -: 3168:    }
        -: 3169:
        -: 3170:    /** Attach a member function
        -: 3171:     *  @param obj      Pointer to object to invoke member function on
        -: 3172:     *  @param method   Member function to attach
        -: 3173:     *  @deprecated
        -: 3174:     *      Replaced by simple assignment 'Callback cb = func'
        -: 3175:     */
        -: 3176:    template<typename T, typename U>
        -: 3177:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -: 3178:        "Replaced by simple assignment 'Callback cb = func")
        -: 3179:    void attach(U *obj, R (T::*method)(A0, A1, A2, A3, A4)) {
        -: 3180:        this->~Callback();
        -: 3181:        new (this) Callback(obj, method);
        -: 3182:    }
        -: 3183:
        -: 3184:    /** Attach a member function
        -: 3185:     *  @param obj      Pointer to object to invoke member function on
        -: 3186:     *  @param method   Member function to attach
        -: 3187:     *  @deprecated
        -: 3188:     *      Replaced by simple assignment 'Callback cb = func'
        -: 3189:     */
        -: 3190:    template<typename T, typename U>
        -: 3191:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -: 3192:        "Replaced by simple assignment 'Callback cb = func")
        -: 3193:    void attach(const U *obj, R (T::*method)(A0, A1, A2, A3, A4) const) {
        -: 3194:        this->~Callback();
        -: 3195:        new (this) Callback(obj, method);
        -: 3196:    }
        -: 3197:
        -: 3198:    /** Attach a member function
        -: 3199:     *  @param obj      Pointer to object to invoke member function on
        -: 3200:     *  @param method   Member function to attach
        -: 3201:     *  @deprecated
        -: 3202:     *      Replaced by simple assignment 'Callback cb = func'
        -: 3203:     */
        -: 3204:    template<typename T, typename U>
        -: 3205:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -: 3206:        "Replaced by simple assignment 'Callback cb = func")
        -: 3207:    void attach(volatile U *obj, R (T::*method)(A0, A1, A2, A3, A4) volatile) {
        -: 3208:        this->~Callback();
        -: 3209:        new (this) Callback(obj, method);
        -: 3210:    }
        -: 3211:
        -: 3212:    /** Attach a member function
        -: 3213:     *  @param obj      Pointer to object to invoke member function on
        -: 3214:     *  @param method   Member function to attach
        -: 3215:     *  @deprecated
        -: 3216:     *      Replaced by simple assignment 'Callback cb = func'
        -: 3217:     */
        -: 3218:    template<typename T, typename U>
        -: 3219:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -: 3220:        "Replaced by simple assignment 'Callback cb = func")
        -: 3221:    void attach(const volatile U *obj, R (T::*method)(A0, A1, A2, A3, A4) const volatile) {
        -: 3222:        this->~Callback();
        -: 3223:        new (this) Callback(obj, method);
        -: 3224:    }
        -: 3225:
        -: 3226:    /** Attach a static function with a bound pointer
        -: 3227:     *  @param func     Static function to attach
        -: 3228:     *  @param arg      Pointer argument to function
        -: 3229:     *  @deprecated
        -: 3230:     *      Replaced by simple assignment 'Callback cb = func'
        -: 3231:     */
        -: 3232:    template <typename T, typename U>
        -: 3233:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -: 3234:        "Replaced by simple assignment 'Callback cb = func")
        -: 3235:    void attach(R (*func)(T*, A0, A1, A2, A3, A4), U *arg) {
        -: 3236:        this->~Callback();
        -: 3237:        new (this) Callback(func, arg);
        -: 3238:    }
        -: 3239:
        -: 3240:    /** Attach a static function with a bound pointer
        -: 3241:     *  @param func     Static function to attach
        -: 3242:     *  @param arg      Pointer argument to function
        -: 3243:     *  @deprecated
        -: 3244:     *      Replaced by simple assignment 'Callback cb = func'
        -: 3245:     */
        -: 3246:    template <typename T, typename U>
        -: 3247:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -: 3248:        "Replaced by simple assignment 'Callback cb = func")
        -: 3249:    void attach(R (*func)(const T*, A0, A1, A2, A3, A4), const U *arg) {
        -: 3250:        this->~Callback();
        -: 3251:        new (this) Callback(func, arg);
        -: 3252:    }
        -: 3253:
        -: 3254:    /** Attach a static function with a bound pointer
        -: 3255:     *  @param func     Static function to attach
        -: 3256:     *  @param arg      Pointer argument to function
        -: 3257:     *  @deprecated
        -: 3258:     *      Replaced by simple assignment 'Callback cb = func'
        -: 3259:     */
        -: 3260:    template <typename T, typename U>
        -: 3261:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -: 3262:        "Replaced by simple assignment 'Callback cb = func")
        -: 3263:    void attach(R (*func)(volatile T*, A0, A1, A2, A3, A4), volatile U *arg) {
        -: 3264:        this->~Callback();
        -: 3265:        new (this) Callback(func, arg);
        -: 3266:    }
        -: 3267:
        -: 3268:    /** Attach a static function with a bound pointer
        -: 3269:     *  @param func     Static function to attach
        -: 3270:     *  @param arg      Pointer argument to function
        -: 3271:     *  @deprecated
        -: 3272:     *      Replaced by simple assignment 'Callback cb = func'
        -: 3273:     */
        -: 3274:    template <typename T, typename U>
        -: 3275:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -: 3276:        "Replaced by simple assignment 'Callback cb = func")
        -: 3277:    void attach(R (*func)(const volatile T*, A0, A1, A2, A3, A4), const volatile U *arg) {
        -: 3278:        this->~Callback();
        -: 3279:        new (this) Callback(func, arg);
        -: 3280:    }
        -: 3281:
        -: 3282:    /** Attach a function object
        -: 3283:     *  @param f Function object to attach
        -: 3284:     *  @note The function object is limited to a single word of storage
        -: 3285:     *  @deprecated
        -: 3286:     *      Replaced by simple assignment 'Callback cb = func'
        -: 3287:     */
        -: 3288:    template <typename F>
        -: 3289:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -: 3290:        "Replaced by simple assignment 'Callback cb = func")
        -: 3291:    void attach(F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0, A1, A2, A3, A4))) {
        -: 3292:        this->~Callback();
        -: 3293:        new (this) Callback(f);
        -: 3294:    }
        -: 3295:
        -: 3296:    /** Attach a function object
        -: 3297:     *  @param f Function object to attach
        -: 3298:     *  @note The function object is limited to a single word of storage
        -: 3299:     *  @deprecated
        -: 3300:     *      Replaced by simple assignment 'Callback cb = func'
        -: 3301:     */
        -: 3302:    template <typename F>
        -: 3303:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -: 3304:        "Replaced by simple assignment 'Callback cb = func")
        -: 3305:    void attach(const F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0, A1, A2, A3, A4) const)) {
        -: 3306:        this->~Callback();
        -: 3307:        new (this) Callback(f);
        -: 3308:    }
        -: 3309:
        -: 3310:    /** Attach a function object
        -: 3311:     *  @param f Function object to attach
        -: 3312:     *  @note The function object is limited to a single word of storage
        -: 3313:     *  @deprecated
        -: 3314:     *      Replaced by simple assignment 'Callback cb = func'
        -: 3315:     */
        -: 3316:    template <typename F>
        -: 3317:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -: 3318:        "Replaced by simple assignment 'Callback cb = func")
        -: 3319:    void attach(volatile F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0, A1, A2, A3, A4) volatile)) {
        -: 3320:        this->~Callback();
        -: 3321:        new (this) Callback(f);
        -: 3322:    }
        -: 3323:
        -: 3324:    /** Attach a function object
        -: 3325:     *  @param f Function object to attach
        -: 3326:     *  @note The function object is limited to a single word of storage
        -: 3327:     *  @deprecated
        -: 3328:     *      Replaced by simple assignment 'Callback cb = func'
        -: 3329:     */
        -: 3330:    template <typename F>
        -: 3331:    MBED_DEPRECATED_SINCE("mbed-os-5.4",
        -: 3332:        "Replaced by simple assignment 'Callback cb = func")
        -: 3333:    void attach(const volatile F f, MBED_ENABLE_IF_CALLBACK_COMPATIBLE(F, R (F::*)(A0, A1, A2, A3, A4) const volatile)) {
        -: 3334:        this->~Callback();
        -: 3335:        new (this) Callback(f);
        -: 3336:    }
        -: 3337:
        -: 3338:    /** Attach a static function with a bound pointer
        -: 3339:     *  @param obj  Pointer to object to bind to function
        -: 3340:     *  @param func Static function to attach
        -: 3341:     *  @deprecated
        -: 3342:     *      Arguments to callback have been reordered to attach(func, arg)
        -: 3343:     */
        -: 3344:    template <typename T, typename U>
        -: 3345:    MBED_DEPRECATED_SINCE("mbed-os-5.1",
        -: 3346:        "Arguments to callback have been reordered to attach(func, arg)")
        -: 3347:    void attach(U *obj, R (*func)(T*, A0, A1, A2, A3, A4)) {
        -: 3348:        this->~Callback();
        -: 3349:        new (this) Callback(func, obj);
        -: 3350:    }
        -: 3351:
        -: 3352:    /** Attach a static function with a bound pointer
        -: 3353:     *  @param obj  Pointer to object to bind to function
        -: 3354:     *  @param func Static function to attach
        -: 3355:     *  @deprecated
        -: 3356:     *      Arguments to callback have been reordered to attach(func, arg)
        -: 3357:     */
        -: 3358:    template <typename T, typename U>
        -: 3359:    MBED_DEPRECATED_SINCE("mbed-os-5.1",
        -: 3360:        "Arguments to callback have been reordered to attach(func, arg)")
        -: 3361:    void attach(const U *obj, R (*func)(const T*, A0, A1, A2, A3, A4)) {
        -: 3362:        this->~Callback();
        -: 3363:        new (this) Callback(func, obj);
        -: 3364:    }
        -: 3365:
        -: 3366:    /** Attach a static function with a bound pointer
        -: 3367:     *  @param obj  Pointer to object to bind to function
        -: 3368:     *  @param func Static function to attach
        -: 3369:     *  @deprecated
        -: 3370:     *      Arguments to callback have been reordered to attach(func, arg)
        -: 3371:     */
        -: 3372:    template <typename T, typename U>
        -: 3373:    MBED_DEPRECATED_SINCE("mbed-os-5.1",
        -: 3374:        "Arguments to callback have been reordered to attach(func, arg)")
        -: 3375:    void attach(volatile U *obj, R (*func)(volatile T*, A0, A1, A2, A3, A4)) {
        -: 3376:        this->~Callback();
        -: 3377:        new (this) Callback(func, obj);
        -: 3378:    }
        -: 3379:
        -: 3380:    /** Attach a static function with a bound pointer
        -: 3381:     *  @param obj  Pointer to object to bind to function
        -: 3382:     *  @param func Static function to attach
        -: 3383:     *  @deprecated
        -: 3384:     *      Arguments to callback have been reordered to attach(func, arg)
        -: 3385:     */
        -: 3386:    template <typename T, typename U>
        -: 3387:    MBED_DEPRECATED_SINCE("mbed-os-5.1",
        -: 3388:        "Arguments to callback have been reordered to attach(func, arg)")
        -: 3389:    void attach(const volatile U *obj, R (*func)(const volatile T*, A0, A1, A2, A3, A4)) {
        -: 3390:        this->~Callback();
        -: 3391:        new (this) Callback(func, obj);
        -: 3392:    }
        -: 3393:
        -: 3394:    /** Assign a callback
        -: 3395:     */
        -: 3396:    Callback &operator=(const Callback &that) {
        -: 3397:        if (this != &that) {
        -: 3398:            this->~Callback();
        -: 3399:            new (this) Callback(that);
        -: 3400:        }
        -: 3401:
        -: 3402:        return *this;
        -: 3403:    }
        -: 3404:
        -: 3405:    /** Call the attached function
        -: 3406:     */
        -: 3407:    R call(A0 a0, A1 a1, A2 a2, A3 a3, A4 a4) const {
        -: 3408:        MBED_ASSERT(_ops);
        -: 3409:        return _ops->call(this, a0, a1, a2, a3, a4);
        -: 3410:    }
        -: 3411:
        -: 3412:    /** Call the attached function
        -: 3413:     */
        -: 3414:    R operator()(A0 a0, A1 a1, A2 a2, A3 a3, A4 a4) const {
        -: 3415:        return call(a0, a1, a2, a3, a4);
        -: 3416:    }
        -: 3417:
        -: 3418:    /** Test if function has been attached
        -: 3419:     */
        -: 3420:    operator bool() const {
        -: 3421:        return _ops;
        -: 3422:    }
        -: 3423:
        -: 3424:    /** Test for equality
        -: 3425:     */
        -: 3426:    friend bool operator==(const Callback &l, const Callback &r) {
        -: 3427:        return memcmp(&l, &r, sizeof(Callback)) == 0;
        -: 3428:    }
        -: 3429:
        -: 3430:    /** Test for inequality
        -: 3431:     */
        -: 3432:    friend bool operator!=(const Callback &l, const Callback &r) {
        -: 3433:        return !(l == r);
        -: 3434:    }
        -: 3435:
        -: 3436:    /** Static thunk for passing as C-style function
        -: 3437:     *  @param func Callback to call passed as void pointer
        -: 3438:     *  @param a0 An argument to be called with function func
        -: 3439:     *  @param a1 An argument to be called with function func
        -: 3440:     *  @param a2 An argument to be called with function func
        -: 3441:     *  @param a3 An argument to be called with function func
        -: 3442:     *  @param a4 An argument to be called with function func
        -: 3443:     *  @return the value as determined by func which is of 
        -: 3444:     *      type and determined by the signiture of func
        -: 3445:     */
        -: 3446:    static R thunk(void *func, A0 a0, A1 a1, A2 a2, A3 a3, A4 a4) {
        -: 3447:        return static_cast<Callback*>(func)->call(a0, a1, a2, a3, a4);
        -: 3448:    }
        -: 3449:
        -: 3450:private:
        -: 3451:    // Stored as pointer to function and pointer to optional object
        -: 3452:    // Function pointer is stored as union of possible function types
        -: 3453:    // to garuntee proper size and alignment
        -: 3454:    struct _class;
        -: 3455:    union {
        -: 3456:        void (*_staticfunc)(A0, A1, A2, A3, A4);
        -: 3457:        void (*_boundfunc)(_class*, A0, A1, A2, A3, A4);
        -: 3458:        void (_class::*_methodfunc)(A0, A1, A2, A3, A4);
        -: 3459:    } _func;
        -: 3460:    void *_obj;
        -: 3461:
        -: 3462:    // Dynamically dispatched operations
        -: 3463:    const struct ops {
        -: 3464:        R (*call)(const void*, A0, A1, A2, A3, A4);
        -: 3465:        void (*move)(void*, const void*);
        -: 3466:        void (*dtor)(void*);
        -: 3467:    } *_ops;
        -: 3468:
        -: 3469:    // Generate operations for function object
        -: 3470:    template <typename F>
        -: 3471:    void generate(const F &f) {
        -: 3472:        static const ops ops = {
        -: 3473:            &Callback::function_call<F>,
        -: 3474:            &Callback::function_move<F>,
        -: 3475:            &Callback::function_dtor<F>,
        -: 3476:        };
        -: 3477:
        -: 3478:        MBED_STATIC_ASSERT(sizeof(Callback) - sizeof(_ops) >= sizeof(F),
        -: 3479:                "Type F must not exceed the size of the Callback class");
        -: 3480:        memset(this, 0, sizeof(Callback));
        -: 3481:        new (this) F(f);
        -: 3482:        _ops = &ops;
        -: 3483:    }
        -: 3484:
        -: 3485:    // Function attributes
        -: 3486:    template <typename F>
        -: 3487:    static R function_call(const void *p, A0 a0, A1 a1, A2 a2, A3 a3, A4 a4) {
        -: 3488:        return (*(F*)p)(a0, a1, a2, a3, a4);
        -: 3489:    }
        -: 3490:
        -: 3491:    template <typename F>
        -: 3492:    static void function_move(void *d, const void *p) {
        -: 3493:        new (d) F(*(F*)p);
        -: 3494:    }
        -: 3495:
        -: 3496:    template <typename F>
        -: 3497:    static void function_dtor(void *p) {
        -: 3498:        ((F*)p)->~F();
        -: 3499:    }
        -: 3500:
        -: 3501:    // Wrappers for functions with context
        -: 3502:    template <typename O, typename M>
        -: 3503:    struct method_context {
        -: 3504:        M method;
        -: 3505:        O *obj;
        -: 3506:
        -: 3507:        method_context(O *obj, M method)
        -: 3508:            : method(method), obj(obj) {}
        -: 3509:
        -: 3510:        R operator()(A0 a0, A1 a1, A2 a2, A3 a3, A4 a4) const {
        -: 3511:            return (obj->*method)(a0, a1, a2, a3, a4);
        -: 3512:        }
        -: 3513:    };
        -: 3514:
        -: 3515:    template <typename F, typename A>
        -: 3516:    struct function_context {
        -: 3517:        F func;
        -: 3518:        A *arg;
        -: 3519:
        -: 3520:        function_context(F func, A *arg)
        -: 3521:            : func(func), arg(arg) {}
        -: 3522:
        -: 3523:        R operator()(A0 a0, A1 a1, A2 a2, A3 a3, A4 a4) const {
        -: 3524:            return func(arg, a0, a1, a2, a3, a4);
        -: 3525:        }
        -: 3526:    };
        -: 3527:};
        -: 3528:
        -: 3529:// Internally used event type
        -: 3530:typedef Callback<void(int)> event_callback_t;
        -: 3531:
        -: 3532:
        -: 3533:/** Create a callback class with type infered from the arguments
        -: 3534: *
        -: 3535: *  @param func     Static function to attach
        -: 3536: *  @return         Callback with infered type
        -: 3537: */
        -: 3538:template <typename R>
        -: 3539:Callback<R()> callback(R (*func)() = 0) {
        -: 3540:    return Callback<R()>(func);
        -: 3541:}
        -: 3542:
        -: 3543:/** Create a callback class with type infered from the arguments
        -: 3544: *
        -: 3545: *  @param func     Static function to attach
        -: 3546: *  @return         Callback with infered type
        -: 3547: */
        -: 3548:template <typename R>
        -: 3549:Callback<R()> callback(const Callback<R()> &func) {
        -: 3550:    return Callback<R()>(func);
        -: 3551:}
        -: 3552:
        -: 3553:/** Create a callback class with type infered from the arguments
        -: 3554: *
        -: 3555: *  @param obj      Optional pointer to object to bind to function
        -: 3556: *  @param method   Member function to attach
        -: 3557: *  @return         Callback with infered type
        -: 3558: */
        -: 3559:template<typename T, typename U, typename R>
        -: 3560:Callback<R()> callback(U *obj, R (T::*method)()) {
        -: 3561:    return Callback<R()>(obj, method);
        -: 3562:}
        -: 3563:
        -: 3564:/** Create a callback class with type infered from the arguments
        -: 3565: *
        -: 3566: *  @param obj      Optional pointer to object to bind to function
        -: 3567: *  @param method   Member function to attach
        -: 3568: *  @return         Callback with infered type
        -: 3569: */
        -: 3570:template<typename T, typename U, typename R>
        -: 3571:Callback<R()> callback(const U *obj, R (T::*method)() const) {
        -: 3572:    return Callback<R()>(obj, method);
        -: 3573:}
        -: 3574:
        -: 3575:/** Create a callback class with type infered from the arguments
        -: 3576: *
        -: 3577: *  @param obj      Optional pointer to object to bind to function
        -: 3578: *  @param method   Member function to attach
        -: 3579: *  @return         Callback with infered type
        -: 3580: */
        -: 3581:template<typename T, typename U, typename R>
        -: 3582:Callback<R()> callback(volatile U *obj, R (T::*method)() volatile) {
        -: 3583:    return Callback<R()>(obj, method);
        -: 3584:}
        -: 3585:
        -: 3586:/** Create a callback class with type infered from the arguments
        -: 3587: *
        -: 3588: *  @param obj      Optional pointer to object to bind to function
        -: 3589: *  @param method   Member function to attach
        -: 3590: *  @return         Callback with infered type
        -: 3591: */
        -: 3592:template<typename T, typename U, typename R>
        -: 3593:Callback<R()> callback(const volatile U *obj, R (T::*method)() const volatile) {
        -: 3594:    return Callback<R()>(obj, method);
        -: 3595:}
        -: 3596:
        -: 3597:/** Create a callback class with type infered from the arguments
        -: 3598: *
        -: 3599: *  @param func     Static function to attach
        -: 3600: *  @param arg      Pointer argument to function
        -: 3601: *  @return         Callback with infered type
        -: 3602: */
        -: 3603:template <typename T, typename U, typename R>
        -: 3604:Callback<R()> callback(R (*func)(T*), U *arg) {
        -: 3605:    return Callback<R()>(func, arg);
        -: 3606:}
        -: 3607:
        -: 3608:/** Create a callback class with type infered from the arguments
        -: 3609: *
        -: 3610: *  @param func     Static function to attach
        -: 3611: *  @param arg      Pointer argument to function
        -: 3612: *  @return         Callback with infered type
        -: 3613: */
        -: 3614:template <typename T, typename U, typename R>
        -: 3615:Callback<R()> callback(R (*func)(const T*), const U *arg) {
        -: 3616:    return Callback<R()>(func, arg);
        -: 3617:}
        -: 3618:
        -: 3619:/** Create a callback class with type infered from the arguments
        -: 3620: *
        -: 3621: *  @param func     Static function to attach
        -: 3622: *  @param arg      Pointer argument to function
        -: 3623: *  @return         Callback with infered type
        -: 3624: */
        -: 3625:template <typename T, typename U, typename R>
        -: 3626:Callback<R()> callback(R (*func)(volatile T*), volatile U *arg) {
        -: 3627:    return Callback<R()>(func, arg);
        -: 3628:}
        -: 3629:
        -: 3630:/** Create a callback class with type infered from the arguments
        -: 3631: *
        -: 3632: *  @param func     Static function to attach
        -: 3633: *  @param arg      Pointer argument to function
        -: 3634: *  @return         Callback with infered type
        -: 3635: */
        -: 3636:template <typename T, typename U, typename R>
        -: 3637:Callback<R()> callback(R (*func)(const volatile T*), const volatile U *arg) {
        -: 3638:    return Callback<R()>(func, arg);
        -: 3639:}
        -: 3640:
        -: 3641:/** Create a callback class with type infered from the arguments
        -: 3642: *
        -: 3643: *  @param obj  Optional pointer to object to bind to function
        -: 3644: *  @param func Static function to attach
        -: 3645: *  @return     Callback with infered type
        -: 3646: *  @deprecated
        -: 3647: *      Arguments to callback have been reordered to callback(func, arg)
        -: 3648: */
        -: 3649:template <typename T, typename U, typename R>
        -: 3650:MBED_DEPRECATED_SINCE("mbed-os-5.1",
        -: 3651:    "Arguments to callback have been reordered to callback(func, arg)")
        -: 3652:Callback<R()> callback(U *obj, R (*func)(T*)) {
        -: 3653:    return Callback<R()>(func, obj);
        -: 3654:}
        -: 3655:
        -: 3656:/** Create a callback class with type infered from the arguments
        -: 3657: *
        -: 3658: *  @param obj  Optional pointer to object to bind to function
        -: 3659: *  @param func Static function to attach
        -: 3660: *  @return     Callback with infered type
        -: 3661: *  @deprecated
        -: 3662: *      Arguments to callback have been reordered to callback(func, arg)
        -: 3663: */
        -: 3664:template <typename T, typename U, typename R>
        -: 3665:MBED_DEPRECATED_SINCE("mbed-os-5.1",
        -: 3666:    "Arguments to callback have been reordered to callback(func, arg)")
        -: 3667:Callback<R()> callback(const U *obj, R (*func)(const T*)) {
        -: 3668:    return Callback<R()>(func, obj);
        -: 3669:}
        -: 3670:
        -: 3671:/** Create a callback class with type infered from the arguments
        -: 3672: *
        -: 3673: *  @param obj  Optional pointer to object to bind to function
        -: 3674: *  @param func Static function to attach
        -: 3675: *  @return     Callback with infered type
        -: 3676: *  @deprecated
        -: 3677: *      Arguments to callback have been reordered to callback(func, arg)
        -: 3678: */
        -: 3679:template <typename T, typename U, typename R>
        -: 3680:MBED_DEPRECATED_SINCE("mbed-os-5.1",
        -: 3681:    "Arguments to callback have been reordered to callback(func, arg)")
        -: 3682:Callback<R()> callback(volatile U *obj, R (*func)(volatile T*)) {
        -: 3683:    return Callback<R()>(func, obj);
        -: 3684:}
        -: 3685:
        -: 3686:/** Create a callback class with type infered from the arguments
        -: 3687: *
        -: 3688: *  @param obj  Optional pointer to object to bind to function
        -: 3689: *  @param func Static function to attach
        -: 3690: *  @return     Callback with infered type
        -: 3691: *  @deprecated
        -: 3692: *      Arguments to callback have been reordered to callback(func, arg)
        -: 3693: */
        -: 3694:template <typename T, typename U, typename R>
        -: 3695:MBED_DEPRECATED_SINCE("mbed-os-5.1",
        -: 3696:    "Arguments to callback have been reordered to callback(func, arg)")
        -: 3697:Callback<R()> callback(const volatile U *obj, R (*func)(const volatile T*)) {
        -: 3698:    return Callback<R()>(func, obj);
        -: 3699:}
        -: 3700:
        -: 3701:
        -: 3702:/** Create a callback class with type infered from the arguments
        -: 3703: *
        -: 3704: *  @param func     Static function to attach
        -: 3705: *  @return         Callback with infered type
        -: 3706: */
        -: 3707:template <typename R, typename A0>
        -: 3708:Callback<R(A0)> callback(R (*func)(A0) = 0) {
        -: 3709:    return Callback<R(A0)>(func);
        -: 3710:}
        -: 3711:
        -: 3712:/** Create a callback class with type infered from the arguments
        -: 3713: *
        -: 3714: *  @param func     Static function to attach
        -: 3715: *  @return         Callback with infered type
        -: 3716: */
        -: 3717:template <typename R, typename A0>
        -: 3718:Callback<R(A0)> callback(const Callback<R(A0)> &func) {
        -: 3719:    return Callback<R(A0)>(func);
        -: 3720:}
        -: 3721:
        -: 3722:/** Create a callback class with type infered from the arguments
        -: 3723: *
        -: 3724: *  @param obj      Optional pointer to object to bind to function
        -: 3725: *  @param method   Member function to attach
        -: 3726: *  @return         Callback with infered type
        -: 3727: */
        -: 3728:template<typename T, typename U, typename R, typename A0>
        -: 3729:Callback<R(A0)> callback(U *obj, R (T::*method)(A0)) {
        -: 3730:    return Callback<R(A0)>(obj, method);
        -: 3731:}
        -: 3732:
        -: 3733:/** Create a callback class with type infered from the arguments
        -: 3734: *
        -: 3735: *  @param obj      Optional pointer to object to bind to function
        -: 3736: *  @param method   Member function to attach
        -: 3737: *  @return         Callback with infered type
        -: 3738: */
        -: 3739:template<typename T, typename U, typename R, typename A0>
        -: 3740:Callback<R(A0)> callback(const U *obj, R (T::*method)(A0) const) {
        -: 3741:    return Callback<R(A0)>(obj, method);
        -: 3742:}
        -: 3743:
        -: 3744:/** Create a callback class with type infered from the arguments
        -: 3745: *
        -: 3746: *  @param obj      Optional pointer to object to bind to function
        -: 3747: *  @param method   Member function to attach
        -: 3748: *  @return         Callback with infered type
        -: 3749: */
        -: 3750:template<typename T, typename U, typename R, typename A0>
        -: 3751:Callback<R(A0)> callback(volatile U *obj, R (T::*method)(A0) volatile) {
        -: 3752:    return Callback<R(A0)>(obj, method);
        -: 3753:}
        -: 3754:
        -: 3755:/** Create a callback class with type infered from the arguments
        -: 3756: *
        -: 3757: *  @param obj      Optional pointer to object to bind to function
        -: 3758: *  @param method   Member function to attach
        -: 3759: *  @return         Callback with infered type
        -: 3760: */
        -: 3761:template<typename T, typename U, typename R, typename A0>
        -: 3762:Callback<R(A0)> callback(const volatile U *obj, R (T::*method)(A0) const volatile) {
        -: 3763:    return Callback<R(A0)>(obj, method);
        -: 3764:}
        -: 3765:
        -: 3766:/** Create a callback class with type infered from the arguments
        -: 3767: *
        -: 3768: *  @param func     Static function to attach
        -: 3769: *  @param arg      Pointer argument to function
        -: 3770: *  @return         Callback with infered type
        -: 3771: */
        -: 3772:template <typename T, typename U, typename R, typename A0>
        -: 3773:Callback<R(A0)> callback(R (*func)(T*, A0), U *arg) {
        -: 3774:    return Callback<R(A0)>(func, arg);
        -: 3775:}
        -: 3776:
        -: 3777:/** Create a callback class with type infered from the arguments
        -: 3778: *
        -: 3779: *  @param func     Static function to attach
        -: 3780: *  @param arg      Pointer argument to function
        -: 3781: *  @return         Callback with infered type
        -: 3782: */
        -: 3783:template <typename T, typename U, typename R, typename A0>
        -: 3784:Callback<R(A0)> callback(R (*func)(const T*, A0), const U *arg) {
        -: 3785:    return Callback<R(A0)>(func, arg);
        -: 3786:}
        -: 3787:
        -: 3788:/** Create a callback class with type infered from the arguments
        -: 3789: *
        -: 3790: *  @param func     Static function to attach
        -: 3791: *  @param arg      Pointer argument to function
        -: 3792: *  @return         Callback with infered type
        -: 3793: */
        -: 3794:template <typename T, typename U, typename R, typename A0>
        -: 3795:Callback<R(A0)> callback(R (*func)(volatile T*, A0), volatile U *arg) {
        -: 3796:    return Callback<R(A0)>(func, arg);
        -: 3797:}
        -: 3798:
        -: 3799:/** Create a callback class with type infered from the arguments
        -: 3800: *
        -: 3801: *  @param func     Static function to attach
        -: 3802: *  @param arg      Pointer argument to function
        -: 3803: *  @return         Callback with infered type
        -: 3804: */
        -: 3805:template <typename T, typename U, typename R, typename A0>
        -: 3806:Callback<R(A0)> callback(R (*func)(const volatile T*, A0), const volatile U *arg) {
        -: 3807:    return Callback<R(A0)>(func, arg);
        -: 3808:}
        -: 3809:
        -: 3810:/** Create a callback class with type infered from the arguments
        -: 3811: *
        -: 3812: *  @param obj  Optional pointer to object to bind to function
        -: 3813: *  @param func Static function to attach
        -: 3814: *  @return     Callback with infered type
        -: 3815: *  @deprecated
        -: 3816: *      Arguments to callback have been reordered to callback(func, arg)
        -: 3817: */
        -: 3818:template <typename T, typename U, typename R, typename A0>
        -: 3819:MBED_DEPRECATED_SINCE("mbed-os-5.1",
        -: 3820:    "Arguments to callback have been reordered to callback(func, arg)")
        -: 3821:Callback<R(A0)> callback(U *obj, R (*func)(T*, A0)) {
        -: 3822:    return Callback<R(A0)>(func, obj);
        -: 3823:}
        -: 3824:
        -: 3825:/** Create a callback class with type infered from the arguments
        -: 3826: *
        -: 3827: *  @param obj  Optional pointer to object to bind to function
        -: 3828: *  @param func Static function to attach
        -: 3829: *  @return     Callback with infered type
        -: 3830: *  @deprecated
        -: 3831: *      Arguments to callback have been reordered to callback(func, arg)
        -: 3832: */
        -: 3833:template <typename T, typename U, typename R, typename A0>
        -: 3834:MBED_DEPRECATED_SINCE("mbed-os-5.1",
        -: 3835:    "Arguments to callback have been reordered to callback(func, arg)")
        -: 3836:Callback<R(A0)> callback(const U *obj, R (*func)(const T*, A0)) {
        -: 3837:    return Callback<R(A0)>(func, obj);
        -: 3838:}
        -: 3839:
        -: 3840:/** Create a callback class with type infered from the arguments
        -: 3841: *
        -: 3842: *  @param obj  Optional pointer to object to bind to function
        -: 3843: *  @param func Static function to attach
        -: 3844: *  @return     Callback with infered type
        -: 3845: *  @deprecated
        -: 3846: *      Arguments to callback have been reordered to callback(func, arg)
        -: 3847: */
        -: 3848:template <typename T, typename U, typename R, typename A0>
        -: 3849:MBED_DEPRECATED_SINCE("mbed-os-5.1",
        -: 3850:    "Arguments to callback have been reordered to callback(func, arg)")
        -: 3851:Callback<R(A0)> callback(volatile U *obj, R (*func)(volatile T*, A0)) {
        -: 3852:    return Callback<R(A0)>(func, obj);
        -: 3853:}
        -: 3854:
        -: 3855:/** Create a callback class with type infered from the arguments
        -: 3856: *
        -: 3857: *  @param obj  Optional pointer to object to bind to function
        -: 3858: *  @param func Static function to attach
        -: 3859: *  @return     Callback with infered type
        -: 3860: *  @deprecated
        -: 3861: *      Arguments to callback have been reordered to callback(func, arg)
        -: 3862: */
        -: 3863:template <typename T, typename U, typename R, typename A0>
        -: 3864:MBED_DEPRECATED_SINCE("mbed-os-5.1",
        -: 3865:    "Arguments to callback have been reordered to callback(func, arg)")
        -: 3866:Callback<R(A0)> callback(const volatile U *obj, R (*func)(const volatile T*, A0)) {
        -: 3867:    return Callback<R(A0)>(func, obj);
        -: 3868:}
        -: 3869:
        -: 3870:
        -: 3871:/** Create a callback class with type infered from the arguments
        -: 3872: *
        -: 3873: *  @param func     Static function to attach
        -: 3874: *  @return         Callback with infered type
        -: 3875: */
        -: 3876:template <typename R, typename A0, typename A1>
        -: 3877:Callback<R(A0, A1)> callback(R (*func)(A0, A1) = 0) {
        -: 3878:    return Callback<R(A0, A1)>(func);
        -: 3879:}
        -: 3880:
        -: 3881:/** Create a callback class with type infered from the arguments
        -: 3882: *
        -: 3883: *  @param func     Static function to attach
        -: 3884: *  @return         Callback with infered type
        -: 3885: */
        -: 3886:template <typename R, typename A0, typename A1>
        -: 3887:Callback<R(A0, A1)> callback(const Callback<R(A0, A1)> &func) {
        -: 3888:    return Callback<R(A0, A1)>(func);
        -: 3889:}
        -: 3890:
        -: 3891:/** Create a callback class with type infered from the arguments
        -: 3892: *
        -: 3893: *  @param obj      Optional pointer to object to bind to function
        -: 3894: *  @param method   Member function to attach
        -: 3895: *  @return         Callback with infered type
        -: 3896: */
        -: 3897:template<typename T, typename U, typename R, typename A0, typename A1>
        -: 3898:Callback<R(A0, A1)> callback(U *obj, R (T::*method)(A0, A1)) {
        -: 3899:    return Callback<R(A0, A1)>(obj, method);
        -: 3900:}
        -: 3901:
        -: 3902:/** Create a callback class with type infered from the arguments
        -: 3903: *
        -: 3904: *  @param obj      Optional pointer to object to bind to function
        -: 3905: *  @param method   Member function to attach
        -: 3906: *  @return         Callback with infered type
        -: 3907: */
        -: 3908:template<typename T, typename U, typename R, typename A0, typename A1>
        -: 3909:Callback<R(A0, A1)> callback(const U *obj, R (T::*method)(A0, A1) const) {
        -: 3910:    return Callback<R(A0, A1)>(obj, method);
        -: 3911:}
        -: 3912:
        -: 3913:/** Create a callback class with type infered from the arguments
        -: 3914: *
        -: 3915: *  @param obj      Optional pointer to object to bind to function
        -: 3916: *  @param method   Member function to attach
        -: 3917: *  @return         Callback with infered type
        -: 3918: */
        -: 3919:template<typename T, typename U, typename R, typename A0, typename A1>
        -: 3920:Callback<R(A0, A1)> callback(volatile U *obj, R (T::*method)(A0, A1) volatile) {
        -: 3921:    return Callback<R(A0, A1)>(obj, method);
        -: 3922:}
        -: 3923:
        -: 3924:/** Create a callback class with type infered from the arguments
        -: 3925: *
        -: 3926: *  @param obj      Optional pointer to object to bind to function
        -: 3927: *  @param method   Member function to attach
        -: 3928: *  @return         Callback with infered type
        -: 3929: */
        -: 3930:template<typename T, typename U, typename R, typename A0, typename A1>
        -: 3931:Callback<R(A0, A1)> callback(const volatile U *obj, R (T::*method)(A0, A1) const volatile) {
        -: 3932:    return Callback<R(A0, A1)>(obj, method);
        -: 3933:}
        -: 3934:
        -: 3935:/** Create a callback class with type infered from the arguments
        -: 3936: *
        -: 3937: *  @param func     Static function to attach
        -: 3938: *  @param arg      Pointer argument to function
        -: 3939: *  @return         Callback with infered type
        -: 3940: */
        -: 3941:template <typename T, typename U, typename R, typename A0, typename A1>
        -: 3942:Callback<R(A0, A1)> callback(R (*func)(T*, A0, A1), U *arg) {
        -: 3943:    return Callback<R(A0, A1)>(func, arg);
        -: 3944:}
        -: 3945:
        -: 3946:/** Create a callback class with type infered from the arguments
        -: 3947: *
        -: 3948: *  @param func     Static function to attach
        -: 3949: *  @param arg      Pointer argument to function
        -: 3950: *  @return         Callback with infered type
        -: 3951: */
        -: 3952:template <typename T, typename U, typename R, typename A0, typename A1>
        -: 3953:Callback<R(A0, A1)> callback(R (*func)(const T*, A0, A1), const U *arg) {
        -: 3954:    return Callback<R(A0, A1)>(func, arg);
        -: 3955:}
        -: 3956:
        -: 3957:/** Create a callback class with type infered from the arguments
        -: 3958: *
        -: 3959: *  @param func     Static function to attach
        -: 3960: *  @param arg      Pointer argument to function
        -: 3961: *  @return         Callback with infered type
        -: 3962: */
        -: 3963:template <typename T, typename U, typename R, typename A0, typename A1>
        -: 3964:Callback<R(A0, A1)> callback(R (*func)(volatile T*, A0, A1), volatile U *arg) {
        -: 3965:    return Callback<R(A0, A1)>(func, arg);
        -: 3966:}
        -: 3967:
        -: 3968:/** Create a callback class with type infered from the arguments
        -: 3969: *
        -: 3970: *  @param func     Static function to attach
        -: 3971: *  @param arg      Pointer argument to function
        -: 3972: *  @return         Callback with infered type
        -: 3973: */
        -: 3974:template <typename T, typename U, typename R, typename A0, typename A1>
        -: 3975:Callback<R(A0, A1)> callback(R (*func)(const volatile T*, A0, A1), const volatile U *arg) {
        -: 3976:    return Callback<R(A0, A1)>(func, arg);
        -: 3977:}
        -: 3978:
        -: 3979:/** Create a callback class with type infered from the arguments
        -: 3980: *
        -: 3981: *  @param obj  Optional pointer to object to bind to function
        -: 3982: *  @param func Static function to attach
        -: 3983: *  @return     Callback with infered type
        -: 3984: *  @deprecated
        -: 3985: *      Arguments to callback have been reordered to callback(func, arg)
        -: 3986: */
        -: 3987:template <typename T, typename U, typename R, typename A0, typename A1>
        -: 3988:MBED_DEPRECATED_SINCE("mbed-os-5.1",
        -: 3989:    "Arguments to callback have been reordered to callback(func, arg)")
        -: 3990:Callback<R(A0, A1)> callback(U *obj, R (*func)(T*, A0, A1)) {
        -: 3991:    return Callback<R(A0, A1)>(func, obj);
        -: 3992:}
        -: 3993:
        -: 3994:/** Create a callback class with type infered from the arguments
        -: 3995: *
        -: 3996: *  @param obj  Optional pointer to object to bind to function
        -: 3997: *  @param func Static function to attach
        -: 3998: *  @return     Callback with infered type
        -: 3999: *  @deprecated
        -: 4000: *      Arguments to callback have been reordered to callback(func, arg)
        -: 4001: */
        -: 4002:template <typename T, typename U, typename R, typename A0, typename A1>
        -: 4003:MBED_DEPRECATED_SINCE("mbed-os-5.1",
        -: 4004:    "Arguments to callback have been reordered to callback(func, arg)")
        -: 4005:Callback<R(A0, A1)> callback(const U *obj, R (*func)(const T*, A0, A1)) {
        -: 4006:    return Callback<R(A0, A1)>(func, obj);
        -: 4007:}
        -: 4008:
        -: 4009:/** Create a callback class with type infered from the arguments
        -: 4010: *
        -: 4011: *  @param obj  Optional pointer to object to bind to function
        -: 4012: *  @param func Static function to attach
        -: 4013: *  @return     Callback with infered type
        -: 4014: *  @deprecated
        -: 4015: *      Arguments to callback have been reordered to callback(func, arg)
        -: 4016: */
        -: 4017:template <typename T, typename U, typename R, typename A0, typename A1>
        -: 4018:MBED_DEPRECATED_SINCE("mbed-os-5.1",
        -: 4019:    "Arguments to callback have been reordered to callback(func, arg)")
        -: 4020:Callback<R(A0, A1)> callback(volatile U *obj, R (*func)(volatile T*, A0, A1)) {
        -: 4021:    return Callback<R(A0, A1)>(func, obj);
        -: 4022:}
        -: 4023:
        -: 4024:/** Create a callback class with type infered from the arguments
        -: 4025: *
        -: 4026: *  @param obj  Optional pointer to object to bind to function
        -: 4027: *  @param func Static function to attach
        -: 4028: *  @return     Callback with infered type
        -: 4029: *  @deprecated
        -: 4030: *      Arguments to callback have been reordered to callback(func, arg)
        -: 4031: */
        -: 4032:template <typename T, typename U, typename R, typename A0, typename A1>
        -: 4033:MBED_DEPRECATED_SINCE("mbed-os-5.1",
        -: 4034:    "Arguments to callback have been reordered to callback(func, arg)")
        -: 4035:Callback<R(A0, A1)> callback(const volatile U *obj, R (*func)(const volatile T*, A0, A1)) {
        -: 4036:    return Callback<R(A0, A1)>(func, obj);
        -: 4037:}
        -: 4038:
        -: 4039:
        -: 4040:/** Create a callback class with type infered from the arguments
        -: 4041: *
        -: 4042: *  @param func     Static function to attach
        -: 4043: *  @return         Callback with infered type
        -: 4044: */
        -: 4045:template <typename R, typename A0, typename A1, typename A2>
        -: 4046:Callback<R(A0, A1, A2)> callback(R (*func)(A0, A1, A2) = 0) {
        -: 4047:    return Callback<R(A0, A1, A2)>(func);
        -: 4048:}
        -: 4049:
        -: 4050:/** Create a callback class with type infered from the arguments
        -: 4051: *
        -: 4052: *  @param func     Static function to attach
        -: 4053: *  @return         Callback with infered type
        -: 4054: */
        -: 4055:template <typename R, typename A0, typename A1, typename A2>
        -: 4056:Callback<R(A0, A1, A2)> callback(const Callback<R(A0, A1, A2)> &func) {
        -: 4057:    return Callback<R(A0, A1, A2)>(func);
        -: 4058:}
        -: 4059:
        -: 4060:/** Create a callback class with type infered from the arguments
        -: 4061: *
        -: 4062: *  @param obj      Optional pointer to object to bind to function
        -: 4063: *  @param method   Member function to attach
        -: 4064: *  @return         Callback with infered type
        -: 4065: */
        -: 4066:template<typename T, typename U, typename R, typename A0, typename A1, typename A2>
        -: 4067:Callback<R(A0, A1, A2)> callback(U *obj, R (T::*method)(A0, A1, A2)) {
        -: 4068:    return Callback<R(A0, A1, A2)>(obj, method);
        -: 4069:}
        -: 4070:
        -: 4071:/** Create a callback class with type infered from the arguments
        -: 4072: *
        -: 4073: *  @param obj      Optional pointer to object to bind to function
        -: 4074: *  @param method   Member function to attach
        -: 4075: *  @return         Callback with infered type
        -: 4076: */
        -: 4077:template<typename T, typename U, typename R, typename A0, typename A1, typename A2>
        -: 4078:Callback<R(A0, A1, A2)> callback(const U *obj, R (T::*method)(A0, A1, A2) const) {
        -: 4079:    return Callback<R(A0, A1, A2)>(obj, method);
        -: 4080:}
        -: 4081:
        -: 4082:/** Create a callback class with type infered from the arguments
        -: 4083: *
        -: 4084: *  @param obj      Optional pointer to object to bind to function
        -: 4085: *  @param method   Member function to attach
        -: 4086: *  @return         Callback with infered type
        -: 4087: */
        -: 4088:template<typename T, typename U, typename R, typename A0, typename A1, typename A2>
        -: 4089:Callback<R(A0, A1, A2)> callback(volatile U *obj, R (T::*method)(A0, A1, A2) volatile) {
        -: 4090:    return Callback<R(A0, A1, A2)>(obj, method);
        -: 4091:}
        -: 4092:
        -: 4093:/** Create a callback class with type infered from the arguments
        -: 4094: *
        -: 4095: *  @param obj      Optional pointer to object to bind to function
        -: 4096: *  @param method   Member function to attach
        -: 4097: *  @return         Callback with infered type
        -: 4098: */
        -: 4099:template<typename T, typename U, typename R, typename A0, typename A1, typename A2>
        -: 4100:Callback<R(A0, A1, A2)> callback(const volatile U *obj, R (T::*method)(A0, A1, A2) const volatile) {
        -: 4101:    return Callback<R(A0, A1, A2)>(obj, method);
        -: 4102:}
        -: 4103:
        -: 4104:/** Create a callback class with type infered from the arguments
        -: 4105: *
        -: 4106: *  @param func     Static function to attach
        -: 4107: *  @param arg      Pointer argument to function
        -: 4108: *  @return         Callback with infered type
        -: 4109: */
        -: 4110:template <typename T, typename U, typename R, typename A0, typename A1, typename A2>
        -: 4111:Callback<R(A0, A1, A2)> callback(R (*func)(T*, A0, A1, A2), U *arg) {
        -: 4112:    return Callback<R(A0, A1, A2)>(func, arg);
        -: 4113:}
        -: 4114:
        -: 4115:/** Create a callback class with type infered from the arguments
        -: 4116: *
        -: 4117: *  @param func     Static function to attach
        -: 4118: *  @param arg      Pointer argument to function
        -: 4119: *  @return         Callback with infered type
        -: 4120: */
        -: 4121:template <typename T, typename U, typename R, typename A0, typename A1, typename A2>
        -: 4122:Callback<R(A0, A1, A2)> callback(R (*func)(const T*, A0, A1, A2), const U *arg) {
        -: 4123:    return Callback<R(A0, A1, A2)>(func, arg);
        -: 4124:}
        -: 4125:
        -: 4126:/** Create a callback class with type infered from the arguments
        -: 4127: *
        -: 4128: *  @param func     Static function to attach
        -: 4129: *  @param arg      Pointer argument to function
        -: 4130: *  @return         Callback with infered type
        -: 4131: */
        -: 4132:template <typename T, typename U, typename R, typename A0, typename A1, typename A2>
        -: 4133:Callback<R(A0, A1, A2)> callback(R (*func)(volatile T*, A0, A1, A2), volatile U *arg) {
        -: 4134:    return Callback<R(A0, A1, A2)>(func, arg);
        -: 4135:}
        -: 4136:
        -: 4137:/** Create a callback class with type infered from the arguments
        -: 4138: *
        -: 4139: *  @param func     Static function to attach
        -: 4140: *  @param arg      Pointer argument to function
        -: 4141: *  @return         Callback with infered type
        -: 4142: */
        -: 4143:template <typename T, typename U, typename R, typename A0, typename A1, typename A2>
        -: 4144:Callback<R(A0, A1, A2)> callback(R (*func)(const volatile T*, A0, A1, A2), const volatile U *arg) {
        -: 4145:    return Callback<R(A0, A1, A2)>(func, arg);
        -: 4146:}
        -: 4147:
        -: 4148:/** Create a callback class with type infered from the arguments
        -: 4149: *
        -: 4150: *  @param obj  Optional pointer to object to bind to function
        -: 4151: *  @param func Static function to attach
        -: 4152: *  @return     Callback with infered type
        -: 4153: *  @deprecated
        -: 4154: *      Arguments to callback have been reordered to callback(func, arg)
        -: 4155: */
        -: 4156:template <typename T, typename U, typename R, typename A0, typename A1, typename A2>
        -: 4157:MBED_DEPRECATED_SINCE("mbed-os-5.1",
        -: 4158:    "Arguments to callback have been reordered to callback(func, arg)")
        -: 4159:Callback<R(A0, A1, A2)> callback(U *obj, R (*func)(T*, A0, A1, A2)) {
        -: 4160:    return Callback<R(A0, A1, A2)>(func, obj);
        -: 4161:}
        -: 4162:
        -: 4163:/** Create a callback class with type infered from the arguments
        -: 4164: *
        -: 4165: *  @param obj  Optional pointer to object to bind to function
        -: 4166: *  @param func Static function to attach
        -: 4167: *  @return     Callback with infered type
        -: 4168: *  @deprecated
        -: 4169: *      Arguments to callback have been reordered to callback(func, arg)
        -: 4170: */
        -: 4171:template <typename T, typename U, typename R, typename A0, typename A1, typename A2>
        -: 4172:MBED_DEPRECATED_SINCE("mbed-os-5.1",
        -: 4173:    "Arguments to callback have been reordered to callback(func, arg)")
        -: 4174:Callback<R(A0, A1, A2)> callback(const U *obj, R (*func)(const T*, A0, A1, A2)) {
        -: 4175:    return Callback<R(A0, A1, A2)>(func, obj);
        -: 4176:}
        -: 4177:
        -: 4178:/** Create a callback class with type infered from the arguments
        -: 4179: *
        -: 4180: *  @param obj  Optional pointer to object to bind to function
        -: 4181: *  @param func Static function to attach
        -: 4182: *  @return     Callback with infered type
        -: 4183: *  @deprecated
        -: 4184: *      Arguments to callback have been reordered to callback(func, arg)
        -: 4185: */
        -: 4186:template <typename T, typename U, typename R, typename A0, typename A1, typename A2>
        -: 4187:MBED_DEPRECATED_SINCE("mbed-os-5.1",
        -: 4188:    "Arguments to callback have been reordered to callback(func, arg)")
        -: 4189:Callback<R(A0, A1, A2)> callback(volatile U *obj, R (*func)(volatile T*, A0, A1, A2)) {
        -: 4190:    return Callback<R(A0, A1, A2)>(func, obj);
        -: 4191:}
        -: 4192:
        -: 4193:/** Create a callback class with type infered from the arguments
        -: 4194: *
        -: 4195: *  @param obj  Optional pointer to object to bind to function
        -: 4196: *  @param func Static function to attach
        -: 4197: *  @return     Callback with infered type
        -: 4198: *  @deprecated
        -: 4199: *      Arguments to callback have been reordered to callback(func, arg)
        -: 4200: */
        -: 4201:template <typename T, typename U, typename R, typename A0, typename A1, typename A2>
        -: 4202:MBED_DEPRECATED_SINCE("mbed-os-5.1",
        -: 4203:    "Arguments to callback have been reordered to callback(func, arg)")
        -: 4204:Callback<R(A0, A1, A2)> callback(const volatile U *obj, R (*func)(const volatile T*, A0, A1, A2)) {
        -: 4205:    return Callback<R(A0, A1, A2)>(func, obj);
        -: 4206:}
        -: 4207:
        -: 4208:
        -: 4209:/** Create a callback class with type infered from the arguments
        -: 4210: *
        -: 4211: *  @param func     Static function to attach
        -: 4212: *  @return         Callback with infered type
        -: 4213: */
        -: 4214:template <typename R, typename A0, typename A1, typename A2, typename A3>
        -: 4215:Callback<R(A0, A1, A2, A3)> callback(R (*func)(A0, A1, A2, A3) = 0) {
        -: 4216:    return Callback<R(A0, A1, A2, A3)>(func);
        -: 4217:}
        -: 4218:
        -: 4219:/** Create a callback class with type infered from the arguments
        -: 4220: *
        -: 4221: *  @param func     Static function to attach
        -: 4222: *  @return         Callback with infered type
        -: 4223: */
        -: 4224:template <typename R, typename A0, typename A1, typename A2, typename A3>
        -: 4225:Callback<R(A0, A1, A2, A3)> callback(const Callback<R(A0, A1, A2, A3)> &func) {
        -: 4226:    return Callback<R(A0, A1, A2, A3)>(func);
        -: 4227:}
        -: 4228:
        -: 4229:/** Create a callback class with type infered from the arguments
        -: 4230: *
        -: 4231: *  @param obj      Optional pointer to object to bind to function
        -: 4232: *  @param method   Member function to attach
        -: 4233: *  @return         Callback with infered type
        -: 4234: */
        -: 4235:template<typename T, typename U, typename R, typename A0, typename A1, typename A2, typename A3>
        -: 4236:Callback<R(A0, A1, A2, A3)> callback(U *obj, R (T::*method)(A0, A1, A2, A3)) {
        -: 4237:    return Callback<R(A0, A1, A2, A3)>(obj, method);
        -: 4238:}
        -: 4239:
        -: 4240:/** Create a callback class with type infered from the arguments
        -: 4241: *
        -: 4242: *  @param obj      Optional pointer to object to bind to function
        -: 4243: *  @param method   Member function to attach
        -: 4244: *  @return         Callback with infered type
        -: 4245: */
        -: 4246:template<typename T, typename U, typename R, typename A0, typename A1, typename A2, typename A3>
        -: 4247:Callback<R(A0, A1, A2, A3)> callback(const U *obj, R (T::*method)(A0, A1, A2, A3) const) {
        -: 4248:    return Callback<R(A0, A1, A2, A3)>(obj, method);
        -: 4249:}
        -: 4250:
        -: 4251:/** Create a callback class with type infered from the arguments
        -: 4252: *
        -: 4253: *  @param obj      Optional pointer to object to bind to function
        -: 4254: *  @param method   Member function to attach
        -: 4255: *  @return         Callback with infered type
        -: 4256: */
        -: 4257:template<typename T, typename U, typename R, typename A0, typename A1, typename A2, typename A3>
        -: 4258:Callback<R(A0, A1, A2, A3)> callback(volatile U *obj, R (T::*method)(A0, A1, A2, A3) volatile) {
        -: 4259:    return Callback<R(A0, A1, A2, A3)>(obj, method);
        -: 4260:}
        -: 4261:
        -: 4262:/** Create a callback class with type infered from the arguments
        -: 4263: *
        -: 4264: *  @param obj      Optional pointer to object to bind to function
        -: 4265: *  @param method   Member function to attach
        -: 4266: *  @return         Callback with infered type
        -: 4267: */
        -: 4268:template<typename T, typename U, typename R, typename A0, typename A1, typename A2, typename A3>
        -: 4269:Callback<R(A0, A1, A2, A3)> callback(const volatile U *obj, R (T::*method)(A0, A1, A2, A3) const volatile) {
        -: 4270:    return Callback<R(A0, A1, A2, A3)>(obj, method);
        -: 4271:}
        -: 4272:
        -: 4273:/** Create a callback class with type infered from the arguments
        -: 4274: *
        -: 4275: *  @param func     Static function to attach
        -: 4276: *  @param arg      Pointer argument to function
        -: 4277: *  @return         Callback with infered type
        -: 4278: */
        -: 4279:template <typename T, typename U, typename R, typename A0, typename A1, typename A2, typename A3>
        -: 4280:Callback<R(A0, A1, A2, A3)> callback(R (*func)(T*, A0, A1, A2, A3), U *arg) {
        -: 4281:    return Callback<R(A0, A1, A2, A3)>(func, arg);
        -: 4282:}
        -: 4283:
        -: 4284:/** Create a callback class with type infered from the arguments
        -: 4285: *
        -: 4286: *  @param func     Static function to attach
        -: 4287: *  @param arg      Pointer argument to function
        -: 4288: *  @return         Callback with infered type
        -: 4289: */
        -: 4290:template <typename T, typename U, typename R, typename A0, typename A1, typename A2, typename A3>
        -: 4291:Callback<R(A0, A1, A2, A3)> callback(R (*func)(const T*, A0, A1, A2, A3), const U *arg) {
        -: 4292:    return Callback<R(A0, A1, A2, A3)>(func, arg);
        -: 4293:}
        -: 4294:
        -: 4295:/** Create a callback class with type infered from the arguments
        -: 4296: *
        -: 4297: *  @param func     Static function to attach
        -: 4298: *  @param arg      Pointer argument to function
        -: 4299: *  @return         Callback with infered type
        -: 4300: */
        -: 4301:template <typename T, typename U, typename R, typename A0, typename A1, typename A2, typename A3>
        -: 4302:Callback<R(A0, A1, A2, A3)> callback(R (*func)(volatile T*, A0, A1, A2, A3), volatile U *arg) {
        -: 4303:    return Callback<R(A0, A1, A2, A3)>(func, arg);
        -: 4304:}
        -: 4305:
        -: 4306:/** Create a callback class with type infered from the arguments
        -: 4307: *
        -: 4308: *  @param func     Static function to attach
        -: 4309: *  @param arg      Pointer argument to function
        -: 4310: *  @return         Callback with infered type
        -: 4311: */
        -: 4312:template <typename T, typename U, typename R, typename A0, typename A1, typename A2, typename A3>
        -: 4313:Callback<R(A0, A1, A2, A3)> callback(R (*func)(const volatile T*, A0, A1, A2, A3), const volatile U *arg) {
        -: 4314:    return Callback<R(A0, A1, A2, A3)>(func, arg);
        -: 4315:}
        -: 4316:
        -: 4317:/** Create a callback class with type infered from the arguments
        -: 4318: *
        -: 4319: *  @param obj  Optional pointer to object to bind to function
        -: 4320: *  @param func Static function to attach
        -: 4321: *  @return     Callback with infered type
        -: 4322: *  @deprecated
        -: 4323: *      Arguments to callback have been reordered to callback(func, arg)
        -: 4324: */
        -: 4325:template <typename T, typename U, typename R, typename A0, typename A1, typename A2, typename A3>
        -: 4326:MBED_DEPRECATED_SINCE("mbed-os-5.1",
        -: 4327:    "Arguments to callback have been reordered to callback(func, arg)")
        -: 4328:Callback<R(A0, A1, A2, A3)> callback(U *obj, R (*func)(T*, A0, A1, A2, A3)) {
        -: 4329:    return Callback<R(A0, A1, A2, A3)>(func, obj);
        -: 4330:}
        -: 4331:
        -: 4332:/** Create a callback class with type infered from the arguments
        -: 4333: *
        -: 4334: *  @param obj  Optional pointer to object to bind to function
        -: 4335: *  @param func Static function to attach
        -: 4336: *  @return     Callback with infered type
        -: 4337: *  @deprecated
        -: 4338: *      Arguments to callback have been reordered to callback(func, arg)
        -: 4339: */
        -: 4340:template <typename T, typename U, typename R, typename A0, typename A1, typename A2, typename A3>
        -: 4341:MBED_DEPRECATED_SINCE("mbed-os-5.1",
        -: 4342:    "Arguments to callback have been reordered to callback(func, arg)")
        -: 4343:Callback<R(A0, A1, A2, A3)> callback(const U *obj, R (*func)(const T*, A0, A1, A2, A3)) {
        -: 4344:    return Callback<R(A0, A1, A2, A3)>(func, obj);
        -: 4345:}
        -: 4346:
        -: 4347:/** Create a callback class with type infered from the arguments
        -: 4348: *
        -: 4349: *  @param obj  Optional pointer to object to bind to function
        -: 4350: *  @param func Static function to attach
        -: 4351: *  @return     Callback with infered type
        -: 4352: *  @deprecated
        -: 4353: *      Arguments to callback have been reordered to callback(func, arg)
        -: 4354: */
        -: 4355:template <typename T, typename U, typename R, typename A0, typename A1, typename A2, typename A3>
        -: 4356:MBED_DEPRECATED_SINCE("mbed-os-5.1",
        -: 4357:    "Arguments to callback have been reordered to callback(func, arg)")
        -: 4358:Callback<R(A0, A1, A2, A3)> callback(volatile U *obj, R (*func)(volatile T*, A0, A1, A2, A3)) {
        -: 4359:    return Callback<R(A0, A1, A2, A3)>(func, obj);
        -: 4360:}
        -: 4361:
        -: 4362:/** Create a callback class with type infered from the arguments
        -: 4363: *
        -: 4364: *  @param obj  Optional pointer to object to bind to function
        -: 4365: *  @param func Static function to attach
        -: 4366: *  @return     Callback with infered type
        -: 4367: *  @deprecated
        -: 4368: *      Arguments to callback have been reordered to callback(func, arg)
        -: 4369: */
        -: 4370:template <typename T, typename U, typename R, typename A0, typename A1, typename A2, typename A3>
        -: 4371:MBED_DEPRECATED_SINCE("mbed-os-5.1",
        -: 4372:    "Arguments to callback have been reordered to callback(func, arg)")
        -: 4373:Callback<R(A0, A1, A2, A3)> callback(const volatile U *obj, R (*func)(const volatile T*, A0, A1, A2, A3)) {
        -: 4374:    return Callback<R(A0, A1, A2, A3)>(func, obj);
        -: 4375:}
        -: 4376:
        -: 4377:
        -: 4378:/** Create a callback class with type infered from the arguments
        -: 4379: *
        -: 4380: *  @param func     Static function to attach
        -: 4381: *  @return         Callback with infered type
        -: 4382: */
        -: 4383:template <typename R, typename A0, typename A1, typename A2, typename A3, typename A4>
        -: 4384:Callback<R(A0, A1, A2, A3, A4)> callback(R (*func)(A0, A1, A2, A3, A4) = 0) {
        -: 4385:    return Callback<R(A0, A1, A2, A3, A4)>(func);
        -: 4386:}
        -: 4387:
        -: 4388:/** Create a callback class with type infered from the arguments
        -: 4389: *
        -: 4390: *  @param func     Static function to attach
        -: 4391: *  @return         Callback with infered type
        -: 4392: */
        -: 4393:template <typename R, typename A0, typename A1, typename A2, typename A3, typename A4>
        -: 4394:Callback<R(A0, A1, A2, A3, A4)> callback(const Callback<R(A0, A1, A2, A3, A4)> &func) {
        -: 4395:    return Callback<R(A0, A1, A2, A3, A4)>(func);
        -: 4396:}
        -: 4397:
        -: 4398:/** Create a callback class with type infered from the arguments
        -: 4399: *
        -: 4400: *  @param obj      Optional pointer to object to bind to function
        -: 4401: *  @param method   Member function to attach
        -: 4402: *  @return         Callback with infered type
        -: 4403: */
        -: 4404:template<typename T, typename U, typename R, typename A0, typename A1, typename A2, typename A3, typename A4>
        -: 4405:Callback<R(A0, A1, A2, A3, A4)> callback(U *obj, R (T::*method)(A0, A1, A2, A3, A4)) {
        -: 4406:    return Callback<R(A0, A1, A2, A3, A4)>(obj, method);
        -: 4407:}
        -: 4408:
        -: 4409:/** Create a callback class with type infered from the arguments
        -: 4410: *
        -: 4411: *  @param obj      Optional pointer to object to bind to function
        -: 4412: *  @param method   Member function to attach
        -: 4413: *  @return         Callback with infered type
        -: 4414: */
        -: 4415:template<typename T, typename U, typename R, typename A0, typename A1, typename A2, typename A3, typename A4>
        -: 4416:Callback<R(A0, A1, A2, A3, A4)> callback(const U *obj, R (T::*method)(A0, A1, A2, A3, A4) const) {
        -: 4417:    return Callback<R(A0, A1, A2, A3, A4)>(obj, method);
        -: 4418:}
        -: 4419:
        -: 4420:/** Create a callback class with type infered from the arguments
        -: 4421: *
        -: 4422: *  @param obj      Optional pointer to object to bind to function
        -: 4423: *  @param method   Member function to attach
        -: 4424: *  @return         Callback with infered type
        -: 4425: */
        -: 4426:template<typename T, typename U, typename R, typename A0, typename A1, typename A2, typename A3, typename A4>
        -: 4427:Callback<R(A0, A1, A2, A3, A4)> callback(volatile U *obj, R (T::*method)(A0, A1, A2, A3, A4) volatile) {
        -: 4428:    return Callback<R(A0, A1, A2, A3, A4)>(obj, method);
        -: 4429:}
        -: 4430:
        -: 4431:/** Create a callback class with type infered from the arguments
        -: 4432: *
        -: 4433: *  @param obj      Optional pointer to object to bind to function
        -: 4434: *  @param method   Member function to attach
        -: 4435: *  @return         Callback with infered type
        -: 4436: */
        -: 4437:template<typename T, typename U, typename R, typename A0, typename A1, typename A2, typename A3, typename A4>
        -: 4438:Callback<R(A0, A1, A2, A3, A4)> callback(const volatile U *obj, R (T::*method)(A0, A1, A2, A3, A4) const volatile) {
        -: 4439:    return Callback<R(A0, A1, A2, A3, A4)>(obj, method);
        -: 4440:}
        -: 4441:
        -: 4442:/** Create a callback class with type infered from the arguments
        -: 4443: *
        -: 4444: *  @param func     Static function to attach
        -: 4445: *  @param arg      Pointer argument to function
        -: 4446: *  @return         Callback with infered type
        -: 4447: */
        -: 4448:template <typename T, typename U, typename R, typename A0, typename A1, typename A2, typename A3, typename A4>
        -: 4449:Callback<R(A0, A1, A2, A3, A4)> callback(R (*func)(T*, A0, A1, A2, A3, A4), U *arg) {
        -: 4450:    return Callback<R(A0, A1, A2, A3, A4)>(func, arg);
        -: 4451:}
        -: 4452:
        -: 4453:/** Create a callback class with type infered from the arguments
        -: 4454: *
        -: 4455: *  @param func     Static function to attach
        -: 4456: *  @param arg      Pointer argument to function
        -: 4457: *  @return         Callback with infered type
        -: 4458: */
        -: 4459:template <typename T, typename U, typename R, typename A0, typename A1, typename A2, typename A3, typename A4>
        -: 4460:Callback<R(A0, A1, A2, A3, A4)> callback(R (*func)(const T*, A0, A1, A2, A3, A4), const U *arg) {
        -: 4461:    return Callback<R(A0, A1, A2, A3, A4)>(func, arg);
        -: 4462:}
        -: 4463:
        -: 4464:/** Create a callback class with type infered from the arguments
        -: 4465: *
        -: 4466: *  @param func     Static function to attach
        -: 4467: *  @param arg      Pointer argument to function
        -: 4468: *  @return         Callback with infered type
        -: 4469: */
        -: 4470:template <typename T, typename U, typename R, typename A0, typename A1, typename A2, typename A3, typename A4>
        -: 4471:Callback<R(A0, A1, A2, A3, A4)> callback(R (*func)(volatile T*, A0, A1, A2, A3, A4), volatile U *arg) {
        -: 4472:    return Callback<R(A0, A1, A2, A3, A4)>(func, arg);
        -: 4473:}
        -: 4474:
        -: 4475:/** Create a callback class with type infered from the arguments
        -: 4476: *
        -: 4477: *  @param func     Static function to attach
        -: 4478: *  @param arg      Pointer argument to function
        -: 4479: *  @return         Callback with infered type
        -: 4480: */
        -: 4481:template <typename T, typename U, typename R, typename A0, typename A1, typename A2, typename A3, typename A4>
        -: 4482:Callback<R(A0, A1, A2, A3, A4)> callback(R (*func)(const volatile T*, A0, A1, A2, A3, A4), const volatile U *arg) {
        -: 4483:    return Callback<R(A0, A1, A2, A3, A4)>(func, arg);
        -: 4484:}
        -: 4485:
        -: 4486:/** Create a callback class with type infered from the arguments
        -: 4487: *
        -: 4488: *  @param obj  Optional pointer to object to bind to function
        -: 4489: *  @param func Static function to attach
        -: 4490: *  @return     Callback with infered type
        -: 4491: *  @deprecated
        -: 4492: *      Arguments to callback have been reordered to callback(func, arg)
        -: 4493: */
        -: 4494:template <typename T, typename U, typename R, typename A0, typename A1, typename A2, typename A3, typename A4>
        -: 4495:MBED_DEPRECATED_SINCE("mbed-os-5.1",
        -: 4496:    "Arguments to callback have been reordered to callback(func, arg)")
        -: 4497:Callback<R(A0, A1, A2, A3, A4)> callback(U *obj, R (*func)(T*, A0, A1, A2, A3, A4)) {
        -: 4498:    return Callback<R(A0, A1, A2, A3, A4)>(func, obj);
        -: 4499:}
        -: 4500:
        -: 4501:/** Create a callback class with type infered from the arguments
        -: 4502: *
        -: 4503: *  @param obj  Optional pointer to object to bind to function
        -: 4504: *  @param func Static function to attach
        -: 4505: *  @return     Callback with infered type
        -: 4506: *  @deprecated
        -: 4507: *      Arguments to callback have been reordered to callback(func, arg)
        -: 4508: */
        -: 4509:template <typename T, typename U, typename R, typename A0, typename A1, typename A2, typename A3, typename A4>
        -: 4510:MBED_DEPRECATED_SINCE("mbed-os-5.1",
        -: 4511:    "Arguments to callback have been reordered to callback(func, arg)")
        -: 4512:Callback<R(A0, A1, A2, A3, A4)> callback(const U *obj, R (*func)(const T*, A0, A1, A2, A3, A4)) {
        -: 4513:    return Callback<R(A0, A1, A2, A3, A4)>(func, obj);
        -: 4514:}
        -: 4515:
        -: 4516:/** Create a callback class with type infered from the arguments
        -: 4517: *
        -: 4518: *  @param obj  Optional pointer to object to bind to function
        -: 4519: *  @param func Static function to attach
        -: 4520: *  @return     Callback with infered type
        -: 4521: *  @deprecated
        -: 4522: *      Arguments to callback have been reordered to callback(func, arg)
        -: 4523: */
        -: 4524:template <typename T, typename U, typename R, typename A0, typename A1, typename A2, typename A3, typename A4>
        -: 4525:MBED_DEPRECATED_SINCE("mbed-os-5.1",
        -: 4526:    "Arguments to callback have been reordered to callback(func, arg)")
        -: 4527:Callback<R(A0, A1, A2, A3, A4)> callback(volatile U *obj, R (*func)(volatile T*, A0, A1, A2, A3, A4)) {
        -: 4528:    return Callback<R(A0, A1, A2, A3, A4)>(func, obj);
        -: 4529:}
        -: 4530:
        -: 4531:/** Create a callback class with type infered from the arguments
        -: 4532: *
        -: 4533: *  @param obj  Optional pointer to object to bind to function
        -: 4534: *  @param func Static function to attach
        -: 4535: *  @return     Callback with infered type
        -: 4536: *  @deprecated
        -: 4537: *      Arguments to callback have been reordered to callback(func, arg)
        -: 4538: */
        -: 4539:template <typename T, typename U, typename R, typename A0, typename A1, typename A2, typename A3, typename A4>
        -: 4540:MBED_DEPRECATED_SINCE("mbed-os-5.1",
        -: 4541:    "Arguments to callback have been reordered to callback(func, arg)")
        -: 4542:Callback<R(A0, A1, A2, A3, A4)> callback(const volatile U *obj, R (*func)(const volatile T*, A0, A1, A2, A3, A4)) {
        -: 4543:    return Callback<R(A0, A1, A2, A3, A4)>(func, obj);
        -: 4544:}
        -: 4545:
        -: 4546:/**@}*/
        -: 4547:
        -: 4548:/**@}*/
        -: 4549:
        -: 4550:} // namespace mbed
        -: 4551:
        -: 4552:#endif
