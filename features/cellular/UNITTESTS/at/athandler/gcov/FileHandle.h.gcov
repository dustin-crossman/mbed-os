        -:    0:Source:../../../../../platform/FileHandle.h
        -:    0:Graph:objs/ATHandler_unit/ATHandler.gcno
        -:    0:Data:objs/ATHandler_unit/ATHandler.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* mbed Microcontroller Library
        -:    2: * Copyright (c) 2017 ARM Limited
        -:    3: *
        -:    4: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    5: * you may not use this file except in compliance with the License.
        -:    6: * You may obtain a copy of the License at
        -:    7: *
        -:    8: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    9: *
        -:   10: * Unless required by applicable law or agreed to in writing, software
        -:   11: * distributed under the License is distributed on an "AS IS" BASIS,
        -:   12: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   13: * See the License for the specific language governing permissions and
        -:   14: * limitations under the License.
        -:   15: */
        -:   16:#ifndef MBED_FILEHANDLE_H
        -:   17:#define MBED_FILEHANDLE_H
        -:   18:
        -:   19:typedef int FILEHANDLE;
        -:   20:
        -:   21:#include <cstdio>
        -:   22:#include "Callback.h"
        -:   23:#include "platform/mbed_poll.h"
        -:   24:#include "platform/platform.h"
        -:   25:#include "platform/NonCopyable.h"
        -:   26:
        -:   27:namespace mbed {
        -:   28:/** \addtogroup platform */
        -:   29:/** @{*/
        -:   30:/**
        -:   31: * \defgroup platform_FileHandle FileHandle functions
        -:   32: * @{
        -:   33: */
        -:   34:
        -:   35:
        -:   36:/** Class FileHandle
        -:   37: *
        -:   38: *  An abstract interface that represents operations on a file-like
        -:   39: *  object. The core functions are read, write, and seek, but only
        -:   40: *  a subset of these operations can be provided.
        -:   41: *
        -:   42: *  @note to create a file, @see File
        -:   43: *  @note Synchronization level: Set by subclass
        -:   44: */
        -:   45:class FileHandle : private NonCopyable<FileHandle> {
        -:   46:public:
        -:   47:    virtual ~FileHandle() {}
        -:   48:
        -:   49:    /** Read the contents of a file into a buffer
        -:   50:     *
        -:   51:     *  Devices acting as FileHandles should follow POSIX semantics:
        -:   52:     *
        -:   53:     *  * if no data is available, and non-blocking set return -EAGAIN
        -:   54:     *  * if no data is available, and blocking set, wait until some data is available
        -:   55:     *  * If any data is available, call returns immediately
        -:   56:     *
        -:   57:     *  @param buffer   The buffer to read in to
        -:   58:     *  @param size     The number of bytes to read
        -:   59:     *  @return         The number of bytes read, 0 at end of file, negative error on failure
        -:   60:     */
        -:   61:    virtual ssize_t read(void *buffer, size_t size) = 0;
        -:   62:
        -:   63:    /** Write the contents of a buffer to a file
        -:   64:     *
        -:   65:     *  Devices acting as FileHandles should follow POSIX semantics:
        -:   66:     *
        -:   67:     * * if blocking, block until all data is written
        -:   68:     * * if no data can be written, and non-blocking set, return -EAGAIN
        -:   69:     * * if some data can be written, and non-blocking set, write partial
        -:   70:     *
        -:   71:     *  @param buffer   The buffer to write from
        -:   72:     *  @param size     The number of bytes to write 
        -:   73:     *  @return         The number of bytes written, negative error on failure
        -:   74:     */
        -:   75:    virtual ssize_t write(const void *buffer, size_t size) = 0;
        -:   76:
        -:   77:    /** Move the file position to a given offset from from a given location
        -:   78:     *
        -:   79:     *  @param offset   The offset from whence to move to
        -:   80:     *  @param whence   The start of where to seek
        -:   81:     *      SEEK_SET to start from beginning of file,
        -:   82:     *      SEEK_CUR to start from current position in file,
        -:   83:     *      SEEK_END to start from end of file
        -:   84:     *  @return         The new offset of the file, negative error code on failure
        -:   85:     */
        -:   86:    virtual off_t seek(off_t offset, int whence = SEEK_SET) = 0;
        -:   87:
        -:   88:    /** Close a file
        -:   89:     *
        -:   90:     *  @return         0 on success, negative error code on failure
        -:   91:     */
        -:   92:    virtual int close() = 0;
        -:   93:
        -:   94:    /** Flush any buffers associated with the file
        -:   95:     *
        -:   96:     *  @return         0 on success, negative error code on failure
        -:   97:     */
        -:   98:    virtual int sync()
        -:   99:    {
        -:  100:        return 0;
        -:  101:    }
        -:  102:
        -:  103:    /** Check if the file in an interactive terminal device
        -:  104:     *
        -:  105:     *  @return         True if the file is a terminal
        -:  106:     *  @return         False if the file is not a terminal
        -:  107:     *  @return         Negative error code on failure
        -:  108:     */
        -:  109:    virtual int isatty()
        -:  110:    {
        -:  111:        return false;
        -:  112:    }
        -:  113:
        -:  114:    /** Get the file position of the file
        -:  115:     *
        -:  116:     *  @note This is equivalent to seek(0, SEEK_CUR)
        -:  117:     *
        -:  118:     *  @return         The current offset in the file, negative error code on failure
        -:  119:     */
        -:  120:    virtual off_t tell()
        -:  121:    {
        -:  122:        return seek(0, SEEK_CUR);
        -:  123:    }
        -:  124:
        -:  125:    /** Rewind the file position to the beginning of the file
        -:  126:     *
        -:  127:     *  @note This is equivalent to seek(0, SEEK_SET)
        -:  128:     */
        -:  129:    virtual void rewind()
        -:  130:    {
        -:  131:        seek(0, SEEK_SET);
        -:  132:    }
        -:  133:
        -:  134:    /** Get the size of the file
        -:  135:     *
        -:  136:     *  @return         Size of the file in bytes
        -:  137:     */
        -:  138:    virtual off_t size();
        -:  139:
        -:  140:    /** Move the file position to a given offset from a given location.
        -:  141:     *
        -:  142:     *  @param offset The offset from whence to move to
        -:  143:     *  @param whence SEEK_SET for the start of the file, SEEK_CUR for the
        -:  144:     *   current file position, or SEEK_END for the end of the file.
        -:  145:     *
        -:  146:     *  @returns
        -:  147:     *    new file position on success,
        -:  148:     *    -1 on failure or unsupported
        -:  149:     */
        -:  150:    MBED_DEPRECATED_SINCE("mbed-os-5.4", "Replaced by FileHandle::seek")
        -:  151:    virtual off_t lseek(off_t offset, int whence)
        -:  152:    {
        -:  153:        return seek(offset, whence);
        -:  154:    }
        -:  155:
        -:  156:    /** Flush any buffers associated with the FileHandle, ensuring it
        -:  157:     *  is up to date on disk
        -:  158:     *
        -:  159:     *  @returns
        -:  160:     *    0 on success or un-needed,
        -:  161:     *   -1 on error
        -:  162:     */
        -:  163:    MBED_DEPRECATED_SINCE("mbed-os-5.4", "Replaced by FileHandle::sync")
        -:  164:    virtual int fsync()
        -:  165:    {
        -:  166:        return sync();
        -:  167:    }
        -:  168:
        -:  169:    /** Find the length of the file
        -:  170:     *
        -:  171:     *  @returns
        -:  172:     *   Length of the file
        -:  173:     */
        -:  174:    MBED_DEPRECATED_SINCE("mbed-os-5.4", "Replaced by FileHandle::size")
        -:  175:    virtual off_t flen()
        -:  176:    {
        -:  177:        return size();
        -:  178:    }
        -:  179:
        -:  180:    /** Set blocking or non-blocking mode of the file operation like read/write.
        -:  181:     *  Definition depends upon the subclass implementing FileHandle.
        -:  182:     *  The default is blocking.
        -:  183:     *
        -:  184:     *  @param blocking     true for blocking mode, false for non-blocking mode.
        -:  185:     *
        -:  186:     *  @return             0 on success
        -:  187:     *  @return             Negative error code on failure
        -:  188:     */
        -:  189:    virtual int set_blocking(bool blocking)
        -:  190:    {
        -:  191:        return -1;
        -:  192:    }
        -:  193:
        -:  194:    /** Check for poll event flags
        -:  195:     * The input parameter can be used or ignored - the could always return all events,
        -:  196:     * or could check just the events listed in events.
        -:  197:     * Call is non-blocking - returns instantaneous state of events.
        -:  198:     * Whenever an event occurs, the derived class should call the sigio() callback).
        -:  199:     *
        -:  200:     * @param events        bitmask of poll events we're interested in - POLLIN/POLLOUT etc.
        -:  201:     *
        -:  202:     * @returns             bitmask of poll events that have occurred.
        -:  203:     */
        -:  204:    virtual short poll(short events) const
        -:  205:    {
        -:  206:        // Possible default for real files
        -:  207:        return POLLIN | POLLOUT;
        -:  208:    }
        -:  209:
        -:  210:    /** Definition depends upon the subclass implementing FileHandle.
        -:  211:     *  For example, if the FileHandle is of type Stream, writable() could return
        -:  212:     *  true when there is ample buffer space available for write() calls.
        -:  213:     *
        -:  214:     * @returns             true if the FileHandle is writable.
        -:  215:     */
        -:  216:    bool writable() const
        -:  217:    {
        -:  218:        return poll(POLLOUT) & POLLOUT;
        -:  219:    }
        -:  220:
        -:  221:    /** Definition depends upon the subclass implementing FileHandle.
        -:  222:     *  For example, if the FileHandle is of type Stream, readable() could return
        -:  223:     *  true when there is something available to read.
        -:  224:     *
        -:  225:     *  @returns            true when there is something available to read.
        -:  226:     */
       49:  227:    bool readable() const
        -:  228:    {
       49:  229:        return poll(POLLIN) & POLLIN;
        -:  230:    }
        -:  231:
        -:  232:    /** Register a callback on state change of the file.
        -:  233:     *
        -:  234:     *  The specified callback will be called on state changes such as when
        -:  235:     *  the file can be written to or read from.
        -:  236:     *
        -:  237:     *  The callback may be called in an interrupt context and should not
        -:  238:     *  perform expensive operations.
        -:  239:     *
        -:  240:     *  Note! This is not intended as an attach-like asynchronous api, but rather
        -:  241:     *  as a building block for constructing  such functionality.
        -:  242:     *
        -:  243:     *  The exact timing of when the registered function
        -:  244:     *  is called is not guaranteed and susceptible to change. It should be used
        -:  245:     *  as a cue to make read/write/poll calls to find the current state.
        -:  246:     *
        -:  247:     *  @param func     Function to call on state change
        -:  248:     */
        -:  249:    virtual void sigio(Callback<void()> func)
        -:  250:    {
        -:  251:        //Default for real files. Do nothing for real files.
        -:  252:    }
        -:  253:};
        -:  254:
        -:  255:/**@}*/
        -:  256:
        -:  257:/**@}*/
        -:  258:
        -:  259:
        -:  260:} // namespace mbed
        -:  261:
        -:  262:#endif
