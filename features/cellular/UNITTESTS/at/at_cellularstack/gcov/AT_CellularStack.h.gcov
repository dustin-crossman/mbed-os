        -:    0:Source:../../../framework/AT/AT_CellularStack.h
        -:    0:Graph:objs/AT_CellularStack_unit/AT_CellularStack.gcno
        -:    0:Data:objs/AT_CellularStack_unit/AT_CellularStack.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Copyright (c) 2017, Arm Limited and affiliates.
        -:    3: * SPDX-License-Identifier: Apache-2.0
        -:    4: *
        -:    5: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    6: * you may not use this file except in compliance with the License.
        -:    7: * You may obtain a copy of the License at
        -:    8: *
        -:    9: *     http://www.apache.org/licenses/LICENSE-2.0
        -:   10: *
        -:   11: * Unless required by applicable law or agreed to in writing, software
        -:   12: * distributed under the License is distributed on an "AS IS" BASIS,
        -:   13: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   14: * See the License for the specific language governing permissions and
        -:   15: * limitations under the License.
        -:   16: */
        -:   17:
        -:   18:#ifndef AT_CELLULAR_STACK_H_
        -:   19:#define AT_CELLULAR_STACK_H_
        -:   20:
        -:   21:#include "AT_CellularBase.h"
        -:   22:#include "NetworkStack.h"
        -:   23:
        -:   24:namespace mbed {
        -:   25:
        -:   26:// <PDP_addr_1> and <PDP_addr_2>: each is a string type that identifies the MT in the address space applicable to the PDP.
        -:   27:// The string is given as dot-separated numeric (0-255) parameter of the form:
        -:   28:// a1.a2.a3.a4 for IPv4 and
        -:   29:// a1.a2.a3.a4.a5.a6.a7.a8.a9.a10.a11.a12.a13.a14.a15.a16 for IPv6.
        -:   30:#define PDP_IPV6_SIZE 63+1
        -:   31:
        -:   32:/**
        -:   33: * Class AT_CellularStack.
        -:   34: *
        -:   35: * Implements NetworkStack and introduces interface for modem specific stack implementations.
        -:   36: */
        -:   37:class AT_CellularStack : public NetworkStack, public AT_CellularBase
        -:   38:{
        -:   39:
        -:   40:public:
        -:   41:    AT_CellularStack(ATHandler &at, int cid, nsapi_ip_stack_t stack_type);
        -:   42:    virtual ~AT_CellularStack();
        -:   43:
        -:   44:public: // NetworkStack
        -:   45:
        -:   46:    /** Get the local IP address
        -:   47:     *
        -:   48:     *  @return Null-terminated representation of the local IP address
        -:   49:     *          or null if not yet connected
        -:   50:     */
        -:   51:    virtual const char *get_ip_address();
        -:   52:
        -:   53:    /** Opens a socket
        -:   54:     *
        -:   55:     *  Creates a network socket and stores it in the specified handle.
        -:   56:     *  The handle must be passed to following calls on the socket.
        -:   57:     *
        -:   58:     *  A stack may have a finite number of sockets, in this case
        -:   59:     *  NSAPI_ERROR_NO_SOCKET is returned if no socket is available.
        -:   60:     *
        -:   61:     *  @param handle   Destination for the handle to a newly created socket
        -:   62:     *  @param proto    Protocol of socket to open, NSAPI_TCP or NSAPI_UDP
        -:   63:     *  @return         0 on success, negative error code on failure
        -:   64:     */
        -:   65:    virtual nsapi_error_t socket_open(nsapi_socket_t *handle, nsapi_protocol_t proto);
        -:   66:
        -:   67:    /** Close the socket
        -:   68:     *
        -:   69:     *  Closes any open connection and deallocates any memory associated
        -:   70:     *  with the socket.
        -:   71:     *
        -:   72:     *  @param handle   Socket handle
        -:   73:     *  @return         0 on success, negative error code on failure
        -:   74:     */
        -:   75:    virtual nsapi_error_t socket_close(nsapi_socket_t handle);
        -:   76:
        -:   77:    /** Bind a specific address to a socket
        -:   78:     *
        -:   79:     *  Binding a socket specifies the address and port on which to recieve
        -:   80:     *  data. If the IP address is zeroed, only the port is bound.
        -:   81:     *
        -:   82:     *  @param handle   Socket handle
        -:   83:     *  @param address  Local address to bind
        -:   84:     *  @return         0 on success, negative error code on failure.
        -:   85:     */
        -:   86:    virtual nsapi_error_t socket_bind(nsapi_socket_t handle, const SocketAddress &address);
        -:   87:
        -:   88:    /** Listen for connections on a TCP socket
        -:   89:     *
        -:   90:     *  Marks the socket as a passive socket that can be used to accept
        -:   91:     *  incoming connections.
        -:   92:     *
        -:   93:     *  @param handle   Socket handle
        -:   94:     *  @param backlog  Number of pending connections that can be queued
        -:   95:     *                  simultaneously
        -:   96:     *  @return         0 on success, negative error code on failure
        -:   97:     */
        -:   98:    virtual nsapi_error_t socket_listen(nsapi_socket_t handle, int backlog);
        -:   99:
        -:  100:    /** Connects TCP socket to a remote host
        -:  101:     *
        -:  102:     *  Initiates a connection to a remote server specified by the
        -:  103:     *  indicated address.
        -:  104:     *
        -:  105:     *  @param handle   Socket handle
        -:  106:     *  @param address  The SocketAddress of the remote host
        -:  107:     *  @return         0 on success, negative error code on failure
        -:  108:     */
        -:  109:    virtual nsapi_error_t socket_connect(nsapi_socket_t handle, const SocketAddress &address);
        -:  110:
        -:  111:    /** Accepts a connection on a TCP socket
        -:  112:     *
        -:  113:     *  The server socket must be bound and set to listen for connections.
        -:  114:     *  On a new connection, creates a network socket and stores it in the
        -:  115:     *  specified handle. The handle must be passed to following calls on
        -:  116:     *  the socket.
        -:  117:     *
        -:  118:     *  A stack may have a finite number of sockets, in this case
        -:  119:     *  NSAPI_ERROR_NO_SOCKET is returned if no socket is available.
        -:  120:     *
        -:  121:     *  This call is non-blocking. If accept would block,
        -:  122:     *  NSAPI_ERROR_WOULD_BLOCK is returned immediately.
        -:  123:     *
        -:  124:     *  @param server   Socket handle to server to accept from
        -:  125:     *  @param handle   Destination for a handle to the newly created socket
        -:  126:     *  @param address  Destination for the remote address or NULL
        -:  127:     *  @return         0 on success, negative error code on failure
        -:  128:     */
        -:  129:    virtual nsapi_error_t socket_accept(nsapi_socket_t server,
        -:  130:                                        nsapi_socket_t *handle, SocketAddress *address=0);
        -:  131:
        -:  132:    /** Send data over a TCP socket
        -:  133:     *
        -:  134:     *  The socket must be connected to a remote host. Returns the number of
        -:  135:     *  bytes sent from the buffer.
        -:  136:     *
        -:  137:     *  This call is non-blocking. If send would block,
        -:  138:     *  NSAPI_ERROR_WOULD_BLOCK is returned immediately.
        -:  139:     *
        -:  140:     *  @param handle   Socket handle
        -:  141:     *  @param data     Buffer of data to send to the host
        -:  142:     *  @param size     Size of the buffer in bytes
        -:  143:     *  @return         Number of sent bytes on success, negative error
        -:  144:     *                  code on failure
        -:  145:     */
        -:  146:    virtual nsapi_size_or_error_t socket_send(nsapi_socket_t handle,
        -:  147:            const void *data, nsapi_size_t size);
        -:  148:
        -:  149:    /** Receive data over a TCP socket
        -:  150:     *
        -:  151:     *  The socket must be connected to a remote host. Returns the number of
        -:  152:     *  bytes received into the buffer.
        -:  153:     *
        -:  154:     *  This call is non-blocking. If recv would block,
        -:  155:     *  NSAPI_ERROR_WOULD_BLOCK is returned immediately.
        -:  156:     *
        -:  157:     *  @param handle   Socket handle
        -:  158:     *  @param data     Destination buffer for data received from the host
        -:  159:     *  @param size     Size of the buffer in bytes
        -:  160:     *  @return         Number of received bytes on success, negative error
        -:  161:     *                  code on failure
        -:  162:     */
        -:  163:    virtual nsapi_size_or_error_t socket_recv(nsapi_socket_t handle,
        -:  164:            void *data, nsapi_size_t size);
        -:  165:
        -:  166:    /** Send a packet over a UDP socket
        -:  167:     *
        -:  168:     *  Sends data to the specified address. Returns the number of bytes
        -:  169:     *  sent from the buffer.
        -:  170:     *
        -:  171:     *  This call is non-blocking. If sendto would block,
        -:  172:     *  NSAPI_ERROR_WOULD_BLOCK is returned immediately.
        -:  173:     *
        -:  174:     *  @param handle   Socket handle
        -:  175:     *  @param address  The SocketAddress of the remote host
        -:  176:     *  @param data     Buffer of data to send to the host
        -:  177:     *  @param size     Size of the buffer in bytes
        -:  178:     *  @return         Number of sent bytes on success, negative error
        -:  179:     *                  code on failure
        -:  180:     */
        -:  181:    virtual nsapi_size_or_error_t socket_sendto(nsapi_socket_t handle, const SocketAddress &address,
        -:  182:            const void *data, nsapi_size_t size);
        -:  183:
        -:  184:    /** Receive a packet over a UDP socket
        -:  185:     *
        -:  186:     *  Receives data and stores the source address in address if address
        -:  187:     *  is not NULL. Returns the number of bytes received into the buffer.
        -:  188:     *
        -:  189:     *  This call is non-blocking. If recvfrom would block,
        -:  190:     *  NSAPI_ERROR_WOULD_BLOCK is returned immediately.
        -:  191:     *
        -:  192:     *  @param handle   Socket handle
        -:  193:     *  @param address  Destination for the source address or NULL
        -:  194:     *  @param buffer   Destination buffer for data received from the host
        -:  195:     *  @param size     Size of the buffer in bytes
        -:  196:     *  @return         Number of received bytes on success, negative error
        -:  197:     *                  code on failure
        -:  198:     */
        -:  199:    virtual nsapi_size_or_error_t socket_recvfrom(nsapi_socket_t handle, SocketAddress *address,
        -:  200:            void *buffer, nsapi_size_t size);
        -:  201:
        -:  202:    /** Register a callback on state change of the socket
        -:  203:     *
        -:  204:     *  The specified callback will be called on state changes such as when
        -:  205:     *  the socket can recv/send/accept successfully and on when an error
        -:  206:     *  occurs. The callback may also be called spuriously without reason.
        -:  207:     *
        -:  208:     *  The callback may be called in an interrupt context and should not
        -:  209:     *  perform expensive operations such as recv/send calls.
        -:  210:     *
        -:  211:     *  @param handle   Socket handle
        -:  212:     *  @param callback Function to call on state change
        -:  213:     *  @param data     Argument to pass to callback
        -:  214:     */
        -:  215:    virtual void socket_attach(nsapi_socket_t handle, void (*callback)(void *), void *data);
        -:  216:
        -:  217:protected:
        -:  218:
    #####:  219:    class CellularSocket
        -:  220:    {
        -:  221:    public:
        -:  222:        // Socket id from cellular device
        -:  223:        int id;
        -:  224:        // Being connected means remote ip address and port are set
        -:  225:        bool connected;
        -:  226:        nsapi_protocol_t proto;
        -:  227:        SocketAddress remoteAddress;
        -:  228:        SocketAddress localAddress;
        -:  229:        void (*_cb)(void *);
        -:  230:        void *_data;
        -:  231:        bool created;
        -:  232:        bool rx_avail; // used to synchronise reading from modem
        -:  233:    };
        -:  234:
        -:  235:    /**
        -:  236:    * Gets maximum number of sockets modem supports
        -:  237:    */
        -:  238:    virtual int get_max_socket_count() = 0;
        -:  239:
        -:  240:    /**
        -:  241:    * Gets maximum packet size
        -:  242:    */
        -:  243:    virtual int get_max_packet_size() = 0;
        -:  244:
        -:  245:    /**
        -:  246:    * Checks if modem supports the given protocol
        -:  247:    *
        -:  248:    * @param protocol   Protocol type
        -:  249:    */
        -:  250:    virtual bool is_protocol_supported(nsapi_protocol_t protocol) = 0;
        -:  251:
        -:  252:    /**
        -:  253:    * Implements modem specific AT command set for socket closing
        -:  254:    *
        -:  255:    * @param sock_id   Socket id
        -:  256:    */
        -:  257:    virtual nsapi_error_t socket_close_impl(int sock_id) = 0;
        -:  258:
        -:  259:    /**
        -:  260:    * Implements modem specific AT command set for creating socket
        -:  261:    *
        -:  262:    * @param socket   Cellular socket handle
        -:  263:    */
        -:  264:    virtual nsapi_error_t create_socket_impl(CellularSocket *socket) = 0;
        -:  265:
        -:  266:    /**
        -:  267:    * Implements modem specific AT command set for sending data
        -:  268:    *
        -:  269:    * @param socket   Cellular socket handle
        -:  270:    * @param address  The SocketAddress of the remote host
        -:  271:    * @param data     Buffer of data to send to the host
        -:  272:    * @param size     Size of the buffer in bytes
        -:  273:    * @return         Number of sent bytes on success, negative error
        -:  274:    *                 code on failure
        -:  275:    */
        -:  276:    virtual nsapi_size_or_error_t socket_sendto_impl(CellularSocket *socket, const SocketAddress &address,
        -:  277:            const void *data, nsapi_size_t size) = 0;
        -:  278:
        -:  279:    /**
        -:  280:     *  Implements modem specific AT command set for receiving data
        -:  281:     *
        -:  282:     *  @param socket   Socket handle
        -:  283:     *  @param address  Destination for the source address or NULL
        -:  284:     *  @param buffer   Destination buffer for data received from the host
        -:  285:     *  @param size     Size of the buffer in bytes
        -:  286:     *  @return         Number of received bytes on success, negative error
        -:  287:     *                  code on failure
        -:  288:     */
        -:  289:    virtual nsapi_size_or_error_t socket_recvfrom_impl(CellularSocket *socket, SocketAddress *address,
        -:  290:            void *buffer, nsapi_size_t size) = 0;
        -:  291:
        -:  292:    // socket container
        -:  293:    CellularSocket **_socket;
        -:  294:
        -:  295:    // number of socket slots allocated in socket container
        -:  296:    int _socket_count;
        -:  297:
        -:  298:    // IP address
        -:  299:    char _ip[PDP_IPV6_SIZE];
        -:  300:
        -:  301:    // PDP context id
        -:  302:    int _cid;
        -:  303:
        -:  304:    // stack type from PDP context
        -:  305:    nsapi_ip_stack_t _stack_type;
        -:  306:};
        -:  307:
        -:  308:} // namespace mbed
        -:  309:
        -:  310:#endif // AT_CELLULAR_STACK_H_
