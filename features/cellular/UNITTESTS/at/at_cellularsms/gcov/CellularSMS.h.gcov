        -:    0:Source:../../../framework/API/CellularSMS.h
        -:    0:Graph:objs/AT_CellularSMS_unit/AT_CellularSMS.gcno
        -:    0:Data:objs/AT_CellularSMS_unit/AT_CellularSMS.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Copyright (c) 2017, Arm Limited and affiliates.
        -:    3: * SPDX-License-Identifier: Apache-2.0
        -:    4: *
        -:    5: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    6: * you may not use this file except in compliance with the License.
        -:    7: * You may obtain a copy of the License at
        -:    8: *
        -:    9: *     http://www.apache.org/licenses/LICENSE-2.0
        -:   10: *
        -:   11: * Unless required by applicable law or agreed to in writing, software
        -:   12: * distributed under the License is distributed on an "AS IS" BASIS,
        -:   13: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   14: * See the License for the specific language governing permissions and
        -:   15: * limitations under the License.
        -:   16: */
        -:   17:
        -:   18:#ifndef CELLULAR_SMS_H_
        -:   19:#define CELLULAR_SMS_H_
        -:   20:
        -:   21:#include "Callback.h"
        -:   22:#include "nsapi_types.h"
        -:   23:
        -:   24:namespace mbed {
        -:   25:
        -:   26:// including trailing '\0'
        -:   27:const uint16_t SMS_MAX_SIZE_WITH_CONCATENATION = 4096 + 1;
        -:   28:const uint16_t SMS_MAX_PHONE_NUMBER_SIZE = 20 + 1;
        -:   29:const uint16_t SMS_MAX_TIME_STAMP_SIZE = 20 + 1;
        -:   30:
        -:   31:const uint16_t SMS_MAX_SIZE_8BIT_SINGLE_SMS_SIZE = 140;
        -:   32:const uint16_t SMS_MAX_SIZE_GSM7_SINGLE_SMS_SIZE = 160;
        -:   33:
        -:   34:const uint16_t SMS_SIM_WAIT_TIME_MILLISECONDS = 200;
        -:   35:
        -:   36:const int SMS_ERROR_MULTIPART_ALL_PARTS_NOT_READ = -5001;
        -:   37:
        -:   38:/**
        -:   39: *  Class CellularSMS
        -:   40: *
        -:   41: *  An abstract interface for SMS sending and reading.
        -:   42: */
        1:   43:class CellularSMS
        -:   44:{
        -:   45:protected:
        -:   46:    // friend of CellularDevice so that it's the only way to close/delete this class.
        -:   47:    friend class CellularDevice;
        -:   48:
        -:   49:    /**
        -:   50:     * virtual Destructor
        -:   51:     */
        1:   52:    virtual ~CellularSMS() {};
        -:   53:public:
        -:   54:
        -:   55:    /* Enumeration for possible SMS modes, PDU and Text */
        -:   56:    enum CellularSMSMmode {
        -:   57:        CellularSMSMmodePDU = 0,
        -:   58:        CellularSMSMmodeText
        -:   59:    };
        -:   60:
        -:   61:    /** Does all the necessary initializations needed for receiving and sending sms.
        -:   62:     *
        -:   63:     *  @param mode          enumeration for choosing the correct mode: text/pdu
        -:   64:     *  @return              zero on success
        -:   65:     */
        -:   66:    virtual nsapi_error_t initialize(CellularSMSMmode mode) = 0;
        -:   67:
        -:   68:    /** Send the SMS with the given parameters
        -:   69:     *
        -:   70:     *  @param phone_number  Phone number where to send sms
        -:   71:     *  @param message       SMS message content
        -:   72:     *  @param msg_len       Length of the message
        -:   73:     *  @return              possible error code or length of the sent sms
        -:   74:     */
        -:   75:    virtual nsapi_size_or_error_t send_sms(const char* phone_number, const char* message, int msg_len) = 0;
        -:   76:
        -:   77:    /** Gets the oldest received sms.
        -:   78:     *
        -:   79:     *  @param buf           preallocated buffer for sms message content
        -:   80:     *  @param buf_len       length of allocated buf
        -:   81:     *  @param phone_num     preallocated buffer for phone number where sms was sent
        -:   82:     *  @param phone_len     length of allocated phone_num  buffer
        -:   83:     *  @param time_stamp    preallocated buffer for TP-Service Centre Time Stamp (format: yy/MM/dd,hh:mm:ss-+zz). +-zz is timezone.
        -:   84:     *                       The unit of time zone is a quarter of an hour relative to GMT. For example +32 would be GMT+8.
        -:   85:     *  @param time_len      length of allocated time_stamp buffer
        -:   86:     *  @param buf_size      if method return error NSAPI_ERROR_NO_MEMORY because the given buf was not big enough this will
        -:   87:     *                       hold the size which is enough. Otherwise zero.
        -:   88:     *  @return              possible error code or size of buf. Will return SMS_ERROR_MULTIPART_ALL_PARTS_NOT_READ
        -:   89:     *                       if sms was multipart but not all parts are present/failed to read.
        -:   90:     */
        -:   91:    virtual nsapi_size_or_error_t get_sms(char* buf, uint16_t buf_len, char* phone_num, uint16_t phone_len,
        -:   92:            char* time_stamp, uint16_t time_len, int *buf_size) = 0;
        -:   93:
        -:   94:    /** Callback which is called when new sms is received. SMS can be fetched via method get_sms().
        -:   95:     *
        -:   96:     * @remark      In PDU mode there can be multipart sms and callback is called for every received part.
        -:   97:     *
        -:   98:     * @param func  Callback function which is called when new sms is received.
        -:   99:     */
        -:  100:    virtual void set_sms_callback(Callback<void()> func) = 0;
        -:  101:
        -:  102:    /** CPMS preferred message storage
        -:  103:     *
        -:  104:     *  @param memr        memory from which messages are read and deleted
        -:  105:     *                     "SM" - SIM SMS memory storage (default)
        -:  106:     *                     "ME" - NVM SMS storage
        -:  107:     *  @param memw        memory to which writing and sending operations are made
        -:  108:     *                     "SM" - SIM SMS memory storage (default)
        -:  109:     *                     "ME" - NVM SMS storage
        -:  110:     *  @param mems        memory to which received SMs are preferred to be stored
        -:  111:     *                     "SM" - SIM SMS memory storage (default)
        -:  112:     *                     "ME" - NVM SMS storage
        -:  113:     *
        -:  114:     * @return             1 for success, 0 for failure
        -:  115:     */
        -:  116:    virtual nsapi_error_t set_cpms(const char *memr, const char *memw, const char *mems) = 0;
        -:  117:
        -:  118:    /** CSCA - set Service Center Address
        -:  119:     *
        -:  120:     *  @param sca        Service Center Address to be used for mobile originated SMS transmissions.
        -:  121:     *  @param type       129 - national numbering scheme, 145 - international numbering scheme (contains the character "+")
        -:  122:     *
        -:  123:     *  @return           1 for success, 0 for failure
        -:  124:     */
        -:  125:    virtual nsapi_error_t set_csca(const char *sca, int type) = 0;
        -:  126:
        -:  127:    /** Set command sets the current character set used by the device. "GSM", "IRA",....
        -:  128:     *
        -:  129:     *  @remark Current implementation support only ASCII so choose the correct character set.
        -:  130:     *
        -:  131:     *  @param chr_set   preferred character set list (comma separated). Modem might not support the wanted character set
        -:  132:     *                   so chr_set list is looped from start until supported set is found. Used character set index is returned.
        -:  133:     *                   See more from 3GPP TS 27.005.
        -:  134:     * @return           Used character set index from the given list in case of success. Otherwise negative errorcode.
        -:  135:     */
        -:  136:    virtual nsapi_size_or_error_t set_cscs(const char *chr_set) = 0;
        -:  137:
        -:  138:    /** Deletes all messages from the currently set memory/SIM
        -:  139:     *
        -:  140:     *  @return possible error code
        -:  141:     */
        -:  142:    virtual nsapi_error_t delete_all_messages() = 0;
        -:  143:
        -:  144:    /** Some modems need extra time between AT commands and responses or there will be error -314, SIM busy.
        -:  145:     *  If SIM busy errors are an issue this time should be increased. It can also be set to zero to make
        -:  146:     *  operations faster and more energy efficient if no errors will follow. By default wait time is zero.
        -:  147:     *
        -:  148:     *  @param sim_wait_time
        -:  149:     */
        -:  150:    virtual void set_extra_sim_wait_time(int sim_wait_time) = 0;
        -:  151:};
        -:  152:
        -:  153:} // namespace mbed
        -:  154:
        -:  155:#endif // CELLULAR_SMS_H_
