        -:    0:Source:../../../framework/API/CellularSIM.h
        -:    0:Graph:objs/AT_CellularSIM_unit/AT_CellularSIM.gcno
        -:    0:Data:objs/AT_CellularSIM_unit/AT_CellularSIM.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Copyright (c) 2017, Arm Limited and affiliates.
        -:    3: * SPDX-License-Identifier: Apache-2.0
        -:    4: *
        -:    5: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    6: * you may not use this file except in compliance with the License.
        -:    7: * You may obtain a copy of the License at
        -:    8: *
        -:    9: *     http://www.apache.org/licenses/LICENSE-2.0
        -:   10: *
        -:   11: * Unless required by applicable law or agreed to in writing, software
        -:   12: * distributed under the License is distributed on an "AS IS" BASIS,
        -:   13: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   14: * See the License for the specific language governing permissions and
        -:   15: * limitations under the License.
        -:   16: */
        -:   17:
        -:   18:#ifndef CELLULAR_SIM_H_
        -:   19:#define CELLULAR_SIM_H_
        -:   20:
        -:   21:#include "nsapi_types.h"
        -:   22:
        -:   23:namespace mbed {
        -:   24:
        -:   25:const int MAX_SIM_READY_WAITING_TIME = 30;
        -:   26:
        -:   27:/**
        -:   28: *  Class CellularSIM
        -:   29: *
        -:   30: *  An abstract interface for SIM card handling.
        -:   31: */
        1:   32:class CellularSIM
        -:   33:{
        -:   34:protected:
        -:   35:    // friend of CellularDevice so that it's the only way to close/delete this class.
        -:   36:    friend class CellularDevice;
        -:   37:
        -:   38:    /**
        -:   39:     * virtual Destructor
        -:   40:     */
        1:   41:    virtual ~CellularSIM() {};
        -:   42:
        -:   43:public:
        -:   44:    /* enumeration for possible SIM states */
        -:   45:    enum SimState {
        -:   46:        SimStateReady = 0,
        -:   47:        SimStatePinNeeded,
        -:   48:        SimStatePukNeeded,
        -:   49:        SimStateUnknown
        -:   50:    };
        -:   51:
        -:   52:    /** Open the SIM card by setting the pin code for SIM.
        -:   53:     *
        -:   54:     *  @param sim_pin  PIN for the SIM card
        -:   55:     *  @return         zero on success
        -:   56:     */
        -:   57:    virtual nsapi_error_t set_pin(const char *sim_pin) = 0;
        -:   58:
        -:   59:    /**Change sim pin code.
        -:   60:     *
        -:   61:     *  @param sim_pin  Current PIN for sim
        -:   62:     *  @param new_pin  New PIN for sim
        -:   63:     *  @return         zero on success
        -:   64:     */
        -:   65:    virtual nsapi_error_t change_pin(const char *sim_pin, const char *new_pin) = 0;
        -:   66:
        -:   67:    /** Change is pin query needed after boot
        -:   68:     *
        -:   69:     *  @param sim_pin      Valid PIN for SIM card
        -:   70:     *  @param query_pin    False is PIN query not needed, True if PIN query needed after boot.
        -:   71:     *  @return             zero on success
        -:   72:     */
        -:   73:    virtual nsapi_error_t set_pin_query(const char *sim_pin, bool query_pin) = 0;
        -:   74:
        -:   75:    /** Get sim card's state
        -:   76:     *
        -:   77:     *  @param state    current state of SIM
        -:   78:     *  @return         zero on success
        -:   79:     */
        -:   80:    virtual nsapi_error_t get_sim_state(SimState &state) = 0;
        -:   81:};
        -:   82:
        -:   83:} // namespace mbed
        -:   84:
        -:   85:#endif // CELLULAR_SIM_H_
